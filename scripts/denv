#!/usr/bin/python

import os
import json
import argparse


config_path = os.path.expanduser('~/.config/gigas_devenv/denv.json')
if not os.path.exists(config_path):
    print("Couldn't find the config file {0}".format(config_path))
    exit(1)

with open(config_path) as config_file:
    CONFIG = json.load(config_file)

CODEPATH = CONFIG['CODEPATH']
CODELIBSPATH = CONFIG['CODELIBSPATH']

os.environ["CODEPATH"] = CODEPATH
os.environ["CODELIBSPATH"] = CODELIBSPATH


def confirm(message):
    return raw_input('{0} [y|N] '.format(message)).lower() == 'y'


def confirm_dangerous_command():
    return confirm('This is a dangeours command! Should i run it anyway?')


def pipe(args, params):
    try:
        command = args.command[0]
    except IndexError:
        command = 'ps'

    rest_commands = args.command[1:]

    if command == 'down' and not confirm_dangerous_command():
        exit(0)

    elif command == 'recreate':
        command = 'up'
        params = ['--force-recreate', '--no-deps', '-d'] + params

    elif command == 'up' and '-d' not in params:
        if confirm('May i run it in background?'):
            params.append('-d')

    elif command == 'tail':
        command = 'logs'
        params = ['-f', '--tail=50', '-t']

    cmd = ("docker-compose"
           " -f {0}/gigas_devenv/docker-compose.yml"
           " -p gigas_devenv {1} {2} {3}".format(CODEPATH,
                                                 command,
                                                 ' '.join(params),
                                                 ' '.join(rest_commands)))

    print("Executing: {0}".format(cmd))
    os.system(cmd)


def main():
    parser = argparse.ArgumentParser(description='A proxy for docker-compose',
                                     add_help=False)
    parser.add_argument('command', nargs='*')
    pipe(*parser.parse_known_args())


if __name__ == "__main__":
    main()
