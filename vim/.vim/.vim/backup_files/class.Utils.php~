<?php

class Utils
{

    public static function validateLanguage($language)
    {
        $isValid = false;
        $languages = array('es', 'en', 'de');
        if (in_array($language, $languages)) {
            $isValid = true;
        }
        
        return $isValid;
    }

    public static function validateEmail($email)
    {
        return preg_match("/^[_\.0-9a-zA-Z-ñÑ]+@([0-9a-zA-Z][0-9a-zA-Z-]+\.)+[a-zA-Z]{2,6}$/i", $email);
    }

    public static function validatePostCode($post_code)
    {
        // $ post_code = trim($post_code);
        return preg_match('/^[0-9]{5}$/', $post_code);
    }

    public static function validatePhone($phone)
    {
        return preg_match('/^[0-9]{9}$/', $phone);
    }

    public static function validateNumber($number)
    {
        return (is_numeric($number) && $number >= 0);
    }

    public static function validatePrice($price)
    {
        $price = trim($price);
        $price = str_replace(' ', '', $price);

        $valid_price = false;
        if (is_numeric($price) && $price >= 0) {
            $valid_price = true;
        }
        
        return $valid_price;
    }

    public static function validatePayDate($payDate)
    {
        $isValid = false;
        $limitPayDate = strtotime('+3 months', time());
        if ($payDate > time() && $payDate < $limitPayDate) {
            $isValid = true;
        }

        return $isValid;
    }

    public static function validateCifNif($value)
    {
        $value = trim($value);
        $value = str_replace(' ', '', $value);
        $cif = strtoupper($value);
        for ($i = 0; $i < 9; $i ++) {
            $num[$i] = substr($cif, $i, 1);
        }

        //si no tiene un formato valido devuelve error
        if (preg_match('/((^[A-Z]{1}[0-9]{7}[A-Z0-9]{1}$|^[T]{1}[A-Z0-9]{8}$)|^[0-9]{8}[A-Z]{1}$)/', $cif)) {
            //comprobacion de NIFs estandar
            if (preg_match('/(^[0-9]{8}[A-Z]{1}$)/', $cif)) {
                if ($num[8] == substr('TRWAGMYFPDXBNJZSQVHLCKE', substr($cif, 0, 8) % 23, 1)) {
                    return 'OK';
                } else {
                    return 'Invalid NIF';
                }
            }
            
            //algoritmo para comprobacion de codigos tipo CIF
            $suma = $num[2] + $num[4] + $num[6];
            for ($i = 1; $i < 8; $i += 2) {
                $suma += substr((2 * $num[$i]), 0, 1) + substr((2 * $num[$i]), 1, 1);
            }

            $n = 10 - substr($suma, strlen($suma) - 1, 1);

            //comprobacion de NIFs especiales (se calculan como CIFs o como NIFs)
            if (preg_match('/^[KLM]{1}/', $cif)) {
                if ($num[8] == chr(64 + $n)
                    || $num[8] == substr('TRWAGMYFPDXBNJZSQVHLCKE', substr($cif, 1, 8) % 23, 1)
                ) {
                    return 'OK';
                } else {
                    return 'Invalid NIF';
                }
            }

            //comprobacion de CIFs
            if (preg_match('/^[ABCDEFGHJNPQRSUVW]{1}/', $cif)) {
                if ($num[8] == chr(64 + $n) || $num[8] == substr($n, strlen($n) - 1, 1)) {
                    return 'OK';
                } else {
                    return 'Invalid CIF';
                }
            }

            //comprobacion de NIEs
            //T
            if (preg_match('/^[T]{1}/', $cif)) {
                if ($num[8] == preg_match('/^[T]{1}[A-Z0-9]{8}$/', $cif)) {
                    return 'OK';
                } else {
                    return 'Invalid NIE';
                }
            }
            //XYZ
            if (preg_match('/^[XYZ]{1}/', $cif)) {
                if ($num[8] == substr(
                    'TRWAGMYFPDXBNJZSQVHLCKE',
                    substr(str_replace(array('X','Y','Z'), array('0','1','2'), $cif), 0, 8) % 23,
                    1
                )) {
                    return 'OK';
                } else {
                    return 'Invalid value';
                }
            }
        } else {
            return 'Invalid format';
        }
    }

    public static function validateCardNumber($cardNumber)
    {
        $isValid = false;
        if (preg_match('/^[0-9]{16}$/', $cardNumber)) {
            $suma = 0;
            for ($i = 0; $i < 16; $i++) {
                $num[$i] = substr($cardNumber, $i, 1);
                
                if ($i % 2) {
                    $suma += $num[$i]; //par
                } else { //impar
                    $number = 2 * $num[$i];
                    if ($number > 9) {
                        $number += $number-9; /* Es equivalente ($number%10) + 1*/
                    }
                    
                    $suma += $number;
                }
            }
            
            if ($suma % 10 == 0) {
                $isValid = true;
            }
        }

        return $isValid;
    }

    public static function validateBankAccount($value)
    {
        $isValid = false;
        if (preg_match('/^[0-9]{20}$/', $value)) {
            $num1[0] = 0;
            $num1[1] = 0;
            for ($i = 0; $i < 8; $i++) {
                $num1[$i+2] = intval(substr($value, $i, 1));
            }

            $control1 = Utils::obtenerDigitoControl($num1);
            
            if (intval(substr($value, 8, 1)) == $control1) {
                for ($i = 0; $i < 10; $i++) {
                    $num2[$i] = intval(substr($value, $i+10, 1));
                }

                $control2 = Utils::obtenerDigitoControl($num2);

                if (intval(substr($value, 9, 1)) == $control2) {
                    $isValid = true;
                }
            }
        }
        
        return $isValid;
    }

    public static function obtenerDigitoControl($valor)
    {
        $valores = array(1, 2, 4, 8, 5, 10, 9, 7, 3, 6);
        $control = 0;
        for ($i = 0; $i < 10; $i++) {
            $control += $valor[$i] * $valores[$i];
        }
        
        $control = 11 - ($control % 11);
        if ($control == 11) {
            $control = 0;
        } elseif ($control == 10) {
            $control = 1;
        }

        return $control;
    }
    
    public static function validateCardType($cardType)
    {
        $validCard = false;
        $cardType = str_replace('-', '', self::slugify($cardType));
        if ($cardType == 'visa' || $cardType == 'visaelectron' || $cardType == 'mastercard' ||
            $cardType == 'maestro' || $cardType == 'americanexpress'
        ) {
            $valid = true;
        }
        
        return $valid;
    }
    
    public static function validateCardExpiration($cardExpiration)
    {
        $validCard = false;
        if (preg_match('/^[0-9]{2}\/[0-9]{2}$/', $cardExpiration)) {
            $month = substr($cardExpiration, 0, 2);
            $year = substr($cardExpiration, 3, 2);
            if (checkdate($month, 1, $year)) {
                $year = '20'.$year;
                $numDays = cal_days_in_month(CAL_GREGORIAN, $month, $year);
                $date = mktime(0, 0, 0, $month, $numDays, $year);
                if ($date > time()) {
                    $validCard = true;
                }
            }
        }

        return $validCard;
    }
    
    public static function validateDomain($url)
    {
        return preg_match('/[a-z0-9\-\_\.]+\.[a-z]+$/i', $url);
    }
    
    public static function validateDnsDomain($url, $domain_name)
    {
        $valid = true;
        if (substr($url, -1)==".") {
            // foo.bar.<tld>.<sld>
            $dom_name = "." . $domain_name . ".";
            if (substr_compare($url, $dom_name, -strlen($dom_name), strlen($dom_name)) === 0) {
                $url = substr($url, 0, strlen($url) - strlen($dom_name));
            } else {
                error_log("no me gusta: $url no contiene $dom_name");
                return false;
            }
            error_log("url: --$url--");
        }
        $domain = explode(".", $url);
        
        foreach ($domain as $elem) {
            if (!preg_match('/^([a-z0-9\_\@\-]+|\*)$/i', $elem)) {
                return false;
            }
        }
        return $valid;
    }
  
    public static function validateNameRequired($name)
    {
        //TODO Dejamos que metan tildes?
        return preg_match('/^[a-zA-ZñÑáéíóèìòù0-9\-\'\.\ \,]+$/i', $name) && strlen($name) < 150;
    }
  
    public static function validateName($name)
    {
        if ($name== '') {
            return true;
        }
    
        return preg_match('/^[a-zA-ZñÑáéíóèìòù0-9\-\'\.\,\ ]+$/i', $name) && (strlen($name) < 150);
    }
    
    public static function validateIp($ip)
    {
        return filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_IPV4);
    }
  
    public static function validateIpv6($ip)
    {
        return filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_IPV6);
    }

    /**
     * Generate a random password for the client
     */
    public static function generatePassword()
    {
        $chars = "abcdefghijkmnopqrstuvwxyz023456789";
        srand((double)microtime()*1000000);
        $i = 0;
        $pass = '';
        while ($i <= 10) {
            $num = rand() % 33;
            $tmp = substr($chars, $num, 1);
            $pass = $pass . $tmp;
            $i++;
        }
        
        return $pass;
    }

    /**
     * Generate the username for the client
     */
    public static function generateUsername($name)
    {
        $username = $name;
        $idUsername = 1;
        $user = sfGuardUserPeer::retrieveByName($username);
        while (!empty($user)) {
            $username = $name.$idUsername;
            $user = sfGuardUserPeer::retrieveByName($username);
            $idUsername++;
        }

        return $username;
    }
}
