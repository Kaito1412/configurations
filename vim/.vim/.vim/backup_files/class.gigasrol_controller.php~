<?php
class gigasrol_controller extends HBController
{

    private function fail_if_403()
    {
        if ($this->authorization->get_login_status()!=true) {
            //header("Location: /error/403.html", true, 403);
            header("Location: /error/403.html");
            die();
        }
    }
    
    public function _default($request)
    {
        /*
          list roles
        */
        $this->fail_if_403();
        $this->render_list_template();
    }

    private function csrf_check($request)
    {
        if (!empty($_SESSION['AppSettings']['login']['salt'])) {
            $original_token=$_SESSION['AppSettings']['login']['salt'];
        } else {
            $original_token=$_SESSION['AppSettings']['adminlogin']['default_salt'];
        }
        if (empty($original_token)) { // no csrf information
            return true;
        }

        if (empty($request['security_token'])) {
            hbm_log_error("no csrf info provided (forgery attempt?)");
            return false;
        }
        return $original_token == $request['security_token'];
    }

    public function edit($request)
    {
        /*
          edit a role
        */
        $this->fail_if_403();
        if (empty($request['id']) || !is_numeric($request['id'])) {
            $this->module->send_error("No rol specified");
            $this->render_list_template(true);
        }
        $role_id = $request['id'];
        $role = $this->module->get_rol($role_id);
        if ($role === false) {
            $this->module->send_error("Can't find that role");
            $this->render_list_template(true);
        }
        $client_id = $_SESSION['AppSettings']['login']['id'];
        $tpl_vars = array(
            "role_id" => $role_id,
            "permissions" => $this->module->gen_permission_hyerarchy_with_categories(
                $this->module->get_marked_permissions_for_role($role_id, $client_id)
            ),
            "name" => $role['name'],
            "description" => $role['description'],
        );
        $this->render_edit_template($tpl_vars, "modify");
    }

    public function view($request)
    {
        $this->fail_if_403();
        if (empty($request['id']) || !is_numeric($request['id'])) {
            $this->module->send_error("No rol specified");
            $this->render_list_template(true);
        }
        $role_id = $request['id'];
        $role = $this->module->get_rol($role_id);
        if ($role === false) {
            $this->module->send_error("Can't find that role");
            $this->render_list_template(true);
        }
        $client_id = $_SESSION['AppSettings']['login']['id'];
        $tpl_vars = array(
            "role_id" => $role_id,
            "permissions" => $this->module->gen_permission_hyerarchy_with_categories(
                $this->module->get_marked_permissions_for_role($role_id, $client_id)
            ),
            "name" => $role['name'],
            "description" => $role['description'],
            "readonly" => true
        );
        $this->render_edit_template($tpl_vars, "view");
    }

    public function modify($request)
    {
        $this->fail_if_403();
        $role = array(
            "name" => $request['name'],
            "description" => $request['description']
        );
        $checkboxes_permission = $this->module->permission_list_from_checkboxes($request['permission']);
        //hbm_log_error("checkboxes: " . print_r($checkboxes_permission, true));
        if ($this->module->edit_role(
            $request['role_id'],
            $role,
            $checkboxes_permission
        )
        ) {
            $this->module->send_info("Rol updated successfully");
            $this->render_list_template(true);
        } else {
            $request["permissions"] = $this->module->gen_permission_hyerarchy_with_categories(
                $this->module->get_marked_permissions_for_role($request['role_id'])
            );
            hbm_log_error("request['role_id'] = " . $request['role_id']);
            $this->render_edit_template($request, "modify");
        }
    }

    protected function render_edit_template($template_vars, $action = "create")
    {
        if (!isset($template_vars['form_action'])) {

            if ($action == "create" || $action == "add") {
                $template_vars['form_action'] = "?cmd=gigasrol&action=create";
            } else {
                $id = $template_vars['role_id'];
                $template_vars['form_action'] = "?cmd=gigasrol&action=$action&id=" . $id;
            }
        }
        if (empty($template_vars['roles'])) {
            $template_vars['roles'] = $this->module->get_roles();
        }
        $template = "templates/darthmaul/rolesedit.tpl";
        return $this->render_template($template, $template_vars);
    }

    protected function render_list_template($redirect = false)
    {
        if (!$redirect) {
            $template = "templates/darthmaul/roles.tpl";
            $template_vars = array('roles' => $this->module->get_roles());
            return $this->render_template($template, $template_vars);
        } else {
            hbm_redirect("profiles&cmd=gigasrol");
        }
    }

    protected function render_template($template, $template_vars)
    {
        $client_id = $_SESSION['AppSettings']['login']['id'];
        $template_vars["roles"] = $this->module->get_roles($client_id);
        $template_vars["template_dir"]= MAINDIR . "templates/darthmaul";
        $lang = new Language();
        $lang->addTranslation("profiles");
        $lang->addTranslation("clientarea");
        $lang->loadDictionary();
        $template_vars['lang_roles'] = $lang->getDictionary();
        return $this->template->render(MAINDIR . $template, $template_vars, true);
    }

    public function add($request)
    {
        /*
          create a new role
        */
        $this->fail_if_403();
        $client_id = $_SESSION['AppSettings']['login']['id'];
        $tpl_vars = array(
            "permissions" => $this->module->gen_permission_hyerarchy_with_categories(
                $this->module->get_permission_list(null, null, null, null, $client_id)
            )
        );
        //$tpl_vars = array("permissions" => $this->module->get_permission_list());
        return $this->render_edit_template($tpl_vars);
    }

    public function create($request)
    {
        $this->fail_if_403();
        $role_details = array(
            'name' => $request['name'],
            'description' => $request['description'],
        );

        $res = $this->module->create_role(
            $role_details,
            $this->module->permission_list_from_checkboxes($request['permission'])
        );
        if ($res !== false) {
            $this->render_list_template(true);
            return true;
        } else {

            return $this->add($request);
        }
        return false;
    }

    public function delete($request)
    {
        $this->fail_if_403();
        $ids = explode(",", $request['id']);
        $res = true;
        foreach ($ids as $id) {
            $res = $res && $this->module->delete_role($id);
        }
        if ($res) {
            $this->module->send_info("Role deleted successfully|Rol borrado satisfactoriamente");
        } else {
            $this->module->send_error("There was a problem deleting the role");
        }
        return $this->render_list_template(true);
    }

    public function delete_contact($request)
    {
        $this->fail_if_403();
        if (!$this->module->remove_contact($request['id'])) {
            $this->module->send_error(
                "There was a problem deleting the contact"
                . "|Hubo un problema al intentar borrar el contacto"
            );
        } else {
            $this->module->send_info("Contact deleted successfully|Contacto borrado satisfactoriamente");
        }
        return hbm_redirect("profiles");
    }

    public function roles($request)
    {
        $this->fail_if_403();
        $client_id = intval($request['client']);
        if (empty($client_id)) {
            $this->module->send_error("User not found|Usuario no encontrado");
            return $this->render_list_template(true);
        }

        $role_list = $this->module->get_roles($client_id);
        $this->loader->component('template/apiresponse', 'json');
        $this->json->assign("roles", $role_list);

        $contact_id = intval($request['contact']);
        if (!empty($contact_id)) {
            $contact_rol = $this->module->get_contact_rol($contact_id);
            $this->json->assign("current_rol", $contact_rol['id']);
        } else {
            $this->json->assign("current_rol", 0);
        }

        $this->json->show();
    }

    public function Profile($request)
    {
        $this->fail_if_403();
        return "No action specified :S";
    }

    public function addProfile($request)
    {
        $this->fail_if_403();
        $hapi = new GApiWrapper();

        # Only it checks if contact email is distinct
        $this->check_mail($request);

        # Check regular expressions for the fields
        $fields = array('password', 'firstname', 'lastname', 'email');
        foreach ($fields as $field) {
            if (!$this->module->isValidField($field, $request[$field])) {
                Engine::singleton()->addError("field_format_error_" . $field);
                hbm_redirect("profiles/add/");
            }
        }
        // crear cliente ...
        $res = $hapi->addClient($request);
        if (!isset($res['client_id']) || array_key_exists('error', $res)) {
            $this->module->send_error(
                "There was an error with the new contact"
                . "|Ocurrio un error al crear el nuevo contacto."
            );
            return hbm_redirect("profiles");
        }
        
        //todo get errors and redirect
        // ...marcarlo este cliente como contacto...
        $this->module->clientToContact(
            $res['client_id'],
            $request['parent_id'],
            $request['roles']
        );

        $is_rol = (bool) $request['roles'];
        if ($is_rol) {
            $permissions = $this->module->genContactPermissions($res['client_id']);
        } else {
            $permissions = $request['privileges'];
        }
        
        // ...anadirle los permisos
        if ($this->module->updateContactPermissions(
            $res['client_id'],
            $permissions
        )) {
            $this->module->send_info("Contact created successfully|Contacto creado satisfactoriamente");
        } else {
            $this->module->send_info(
                "There was an error asigning permissions to the new contact"
                . "|Ocurrio un error al asignarle los permisos al contacto."
            );
        }
        return hbm_redirect("profiles");        
    }

    public function editProfile($request)
    {
        $this->fail_if_403();
        $hapi = new GApiWrapper();
        $this->check_mail($request);
        if ($request['password'] != $request['password2']) {
            $this->module->send_error("passwordmatch_error");
            hbm_redirect("profiles/edit/{$request['id']}/");
        }
        # Check regular expressions for the fields
        $fields = array('password', 'firstname', 'lastname', 'email');
        foreach ($fields as $field) {
            if (!$this->module->isValidField($field, $request[$field])) {
                Engine::singleton()->addError("field_format_error_" . $field);
                hbm_redirect("profiles/edit/{$request['id']}/");
            }
        }

        $res = $hapi->setClientDetails($request);
        $old_role = $this->module->get_contact_rol($request['id']);
        if (!empty($request['roles']) && (empty($old_role) || $request['roles'] != $old_role['id'])) {

            $this->module->set_role_to_contact($request['roles'], $request['id']);
        } else {
            $this->module->updateContactPermissions($request['id'], $request['privileges']);
        }
        return $this->render_list_template(true);
    }

    public function getContactRoles($request)
    {
        $this->fail_if_403();
        $role_list = $this->module->clientContactRoles($request['id']);
        $this->loader->component('template/apiresponse', 'json');
        $this->json->assign("contact_roles", $role_list);
        $this->json->show();
    }

    public function remove_role($request)
    {
        $this->fail_if_403();
        $this->loader->component('template/apiresponse', 'json');
        $contact_id = $request['id'];
        if (!empty($contact_id)) {
            $result = $this->module->remove_role_from_contact($contact_id);
        } else {
            $result = false;
        }
        $this->json->assign("result", $result);
        $this->json->show();
    }

    public function clone_role($request)
    {
        $this->fail_if_403();
        $role = $this->module->get_rol($request['id']);
        $tpl_vars = array(
            "role_id" => $role['id'],
            "name" => $role['name'] . "_copy",
            "description"=>$role['description'],
            "permissions" => $this->module->gen_permission_hyerarchy_with_categories(
                $this->module->get_marked_permissions_for_role($role['id'])
            ),
        );
        $this->render_edit_template($tpl_vars, "create");
    }


    public function check_mail($request)
    {
        $this->fail_if_403();
        $hapi = new ApiWrapper();
        $params = array('id'=>$this->authorization->get_id());
        $res = $hapi->getClientDetails($params);
        if (strcasecmp($res['client']['email'], $request['email']) == 0) {
            $this->module->send_error(
                "User's email can't be the same as the client's email|".
                "El email del usuario no puede ser igual al del cliente"
            );
            hbm_redirect("profiles/add");
        } else {
            return true;
        }
    }


    /**
     * Get and process a 'changeprofilepassword' request.
     * The request must have the fields:
     * - oldpassword: The contact's current password.
     * - password: The new password.
     * - password2: The new password repeated.
     *
     * @param array $request The request variables.
     */
    public function change_password($request)
    {
        $this->fail_if_403();
        $contact_id = $_SESSION['AppSettings']['login']['contact_id'];
        if (!$contact_id) {
            $this->module->send_error("An internal error has ocurred");
            hbm_log_error("Missing contact_id in the \$_SESSION while a changeprofilepassword request");
            hbm_redirect("clientarea/profilepassword/");
        }
        foreach (array('oldpassword', 'password', 'password2') as $field) {
            if (!in_array($field, array_keys($request))) {
                $this->module->send_error("An internal error has ocurred");
                hbm_log_error("Missing changeprofilepassword request field: $field");
                hbm_redirect("clientarea/profilepassword/");
            }
        }
        $oldpass = $request['oldpassword'];
        $newpass = $request['password'];
        $newpass2 = $request['password2'];
        if (empty($newpass) && empty($newpass2)) {
            $this->module->send_error("passwordempty_error");
            hbm_redirect("clientarea/profilepassword/");
        }
        if ($newpass != $newpass2) {
            $this->module->send_error("passwordmatch_error");
            hbm_redirect("clientarea/profilepassword/");
        }
        if (!$this->module->isValidField('password', $newpass)) {
            Engine::singleton()->addError("field_format_error_password");
            hbm_redirect("clientarea/profilepassword/");
        }
        if (!$this->module->checkPassword($contact_id, $oldpass)) {
            $this->module->send_error("oldpassword_error");
            hbm_redirect("clientarea/profilepassword/");
        }
        if (!$this->authorization->blowishPass($contact_id, $newpass)) {
            $this->module->send_error("An internal error has ocurred");
            hbm_redirect("clientarea/profilepassword/");
        }
        $this->module->send_info("password_updated");
        hbm_redirect("clientarea/profilepassword/");
    }
}
