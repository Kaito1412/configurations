# -*- coding: utf-8 -*-
import datetime
from managers.db_manager import ApiUserManager, NetworkManager, NetworkJoinManager, FirewallRuleManager, IpAddressJoinManager
from managers.vm_manager import VirtualMachineManager
from managers.ip_address_manager import OnappIpAddressManager as IpAddressManager
from managers.iface_manager import OnappNetworkInterfaceManager as NetworkInterfaceManager
from managers.resource_manager import ResourceManager
from managers.exceptions import PreconditionException
from api.libs.onapp_requests import call_onapp, get_onapp_token, OnappVm
from api.libs.hal_requests import call_hal, get_hal_token, HalVm
from tornado.web import HTTPError
from api.config import logging, WEBSERVICE, HV_PUBLIC_INTERFACE, PUBLIC_INTERFACE_RATE_LIMIT, PARKING_NETWORK
from binascii import hexlify
from os import urandom
import ipaddr
from libs.onapp import get_onapp_unique_identifier, gen_mac_address
from api.controllers.virtualmachine.vm_actions import reboot, rebuild_network
from api.libs.vm import vm_is_locked
import api.config
from comfy import get_config

def get(console_id=None, api_user_id=None, cloud_id=None, args={}, is_admin=False):
    iface = NetworkInterfaceManager(console=console_id, cloud_id=cloud_id, as_admin=is_admin).get_object(args['id'])
    return {'code': 200, 'response': iface}


def get_all(console_id=None, api_user_id=None, cloud_id=None, args={}, is_admin=False):
    if 'virtual_machine_id' in args and not VirtualMachineManager(
            console=console_id, cloud_id=cloud_id, as_admin=is_admin).get_object(args['virtual_machine_id']):
        raise HTTPError(404, 'Virtual machine not found')

    ifaces = NetworkInterfaceManager(console=console_id, cloud_id=cloud_id, as_admin=is_admin).get_list(args if args else None)
    return {'code': 200, 'response': ifaces}


def create(console_id=None, api_user_id=None, cloud_id=None, args={}, is_admin=False):
    if 'primary' in args and args['primary'] == 1:
        raise HTTPError(501, 'Operation not yet implemented')

    user = ApiUserManager(console=console_id, api_user_id=api_user_id, as_admin=is_admin).get_object(api_user_id)

    if not user:
        raise HTTPError(500, 'Misconfigured user')

    vm = VirtualMachineManager(console=console_id, cloud_id=cloud_id, as_admin=is_admin).get_object(args['id'])

    if not vm:
        raise HTTPError(404, 'Virtual machine not found')

    net = NetworkManager(console_id, cloud_id, is_admin).get_object(args['network_id'])

    if not net:
        raise HTTPError(404, 'Network not found')
    
    netjoin_mng = NetworkJoinManager(console_id, cloud_id, True)
    network_joins = netjoin_mng.get_list({
                "network_id": args['network_id'],
                "target_join_id": vm.hypervisor_id,
                "target_join_type": "Hypervisor"
            })

    try:
        network_join = network_joins.next()

    except StopIteration:
        #Creamos el join con el hypervisor_id
        date_now = datetime.datetime.utcnow()
        netjoin_data = {
                "hypervisor_id": None,
                "network_id": args['network_id'],
                "interface": HV_PUBLIC_INTERFACE,
                "created_at": date_now,
                "updated_at": date_now,
                "target_join_id": vm.hypervisor_id,
                "target_join_type": "Hypervisor"
                }
        network_join_id = netjoin_mng.create_object(netjoin_data)
        network_join = netjoin_mng.get_object(network_join_id)

    admin_iface_mng = NetworkInterfaceManager(console=console_id, cloud_id=cloud_id, as_admin=True)
    interfaces_count = admin_iface_mng.get_count({"virtual_machine_id": args['id']})
    rate_limit = args.get('rate_limit',
                          PUBLIC_INTERFACE_RATE_LIMIT if net.public else 0)

    params = {
        "network_interface":
        {
            "label": "eth%s" % interfaces_count,
            "rate_limit": rate_limit,
            "network_join_id": network_join.id,
            "primary": args.get('primary', 1 if interfaces_count == 0 else 0),
        }}

    #
    # private interface creation
    #
    if not net.public:
        network_interface_info = params["network_interface"].copy()
        network_interface_info.update({
            "virtual_machine_id": args['id'],
            "created_at": datetime.datetime.utcnow(),
            "updated_at": datetime.datetime.utcnow(),
            "identifier": get_onapp_unique_identifier(),
            "mac_address": gen_mac_address(args['id'],
                                        network_interface_info['label']),
            "usage": None,
            "usage_last_reset_at": None,
            "usage_month_rolled_at": None,
            "default_firewall_rule": args.get("default_firewall_rule", "ACCEPT"),
        })
        iface_id = admin_iface_mng.create_object(network_interface_info)
        logging.debug('private interfaces are created only in db')
        return {"code": 201, "response": admin_iface_mng.get_object(iface_id)}

    #
    # public interface creation
    #
    onapp_resp = call_onapp(user, url_query="virtual_machines/%s/network_interfaces" % args['id'], data=params, method='post')

    if onapp_resp.status_code == 201:
        iface_id = onapp_resp.json()['network_interface']['id']
        admin_iface_mng.session.close()
        iface = admin_iface_mng.get_object(iface_id)
        if not iface.public and not 'rate_limit' in args:
            iface = admin_iface_mng.update_fields(iface, {"rate_limit": 0})

        if vm.booted:
            token = get_onapp_token(user.console_id, user.cloud_id, args['id'], 'VirtualMachine',
                   'reboot_virtual_machine')
            return {'code':202, 'response': {'queue_token': token.id, "resource": iface}}

        else:
            return {"code": 201, "response": iface}

    else:
        logging.debug("interface create error: %s" % onapp_resp.content)
        raise HTTPError(417, 'Operation failed')


def attach_to_vm(console_id=None, api_user_id=None, cloud_id=None, args={}, is_admin=False):
    vm = VirtualMachineManager(console_id, cloud_id, is_admin).get_object(args['virtual_machine_id'])
    if not vm:  # Si dejamos pasar onapp actua sobre cualquier disco de cualquier vm, por ejemplo, no balancer
        raise HTTPError(404, 'Virtual machine not found') 

    try:
        iface = NetworkInterfaceManager(console_id, cloud_id, is_admin).attach(args['id'], args['virtual_machine_id'])
    except PreconditionException as e:
        if 'network interface not found' in str(e):
            raise HTTPError(404, 'Network interface not Found')
        elif 'virtual machine not found' in str(e):
            raise HTTPError(404, 'Virtual machine not Found')
        else:
            raise HTTPError(404, 'Internal error')

    return {"code": 200, "response": iface}


def delete(console_id=None, api_user_id=None, cloud_id=None, args={}, is_admin=False):
    user = ApiUserManager(console=console_id, api_user_id=api_user_id, as_admin=is_admin).get_object(api_user_id)

    if not user:
        raise HTTPError(500, 'Misconfigured user')

    iface_mng = NetworkInterfaceManager(console=console_id, cloud_id=cloud_id, as_admin=is_admin)
    iface = iface_mng.get_object(args['id'])

    if not iface:
        raise HTTPError(404, 'Network interface not found')

    if iface.virtual_machine_id is None:
        if iface_mng.release(iface.id):
            return {"code": 204, "response": ""}

        else:
            raise HTTPError(500, "Operation failed")

    vm = VirtualMachineManager(console_id, cloud_id, is_admin).get_object(iface.virtual_machine_id)

    if not vm:
        raise HTTPError(404, 'Virtual machine not found') 
        
    if IpAddressJoinManager(console=console_id, cloud_id=cloud_id, as_admin=is_admin).get_count({"network_interface_id": iface.id}) > 0:
        raise HTTPError(412, 'Network interface has IP addresses attached')

    if not iface_mng.delete(iface):
        raise HTTPError(417, "Operation failed")

    token = OnappVm(user, is_admin, vm.id).rebuild_network()
    if token is not None:
        return {'code': 202, 'response': {'queue_token': token}}
    else:
        raise HTTPError(417, 'Operation failed')

    return {"code": 204, "response": ""}


def add_ip(console_id=None, api_user_id=None, cloud_id=None, args={}, is_admin=False):
    user = ApiUserManager(console=console_id, api_user_id=api_user_id, as_admin=is_admin).get_object(api_user_id)

    if not user:
        raise HTTPError(500, 'Misconfigured user')

    iface = NetworkInterfaceManager(console=console_id, cloud_id=cloud_id, as_admin=is_admin).get_object(args['id'])

    if not iface:
        raise HTTPError(404, 'Network interface not found')

    if iface.virtual_machine_id is None:
        raise HTTPError(412, 'Network interface has to be assigned to a virtual machine')

    vm = VirtualMachineManager(console_id, cloud_id, is_admin).get_object(iface.virtual_machine_id)

    if not vm:  # Si dejamos pasar onapp actua sobre cualquier disco de cualquier vm, por ejemplo, no balancer
        raise HTTPError(404, 'Virtual machine not found') 
    
    if not ResourceManager(console_id, cloud_id, is_admin).can_create_ip(iface.network_id):
        raise HTTPError(403, 'Maximum IP addresses limit reached')

    if iface.public:
        resp = call_hal(user, url_query='/nq/net/ipaddress/%s/auto' % iface.virtual_machine_id,
                payload={"vlan": iface.network_id}, as_admin=is_admin)

    else:
        resp = call_hal(user, url_query='/nq/vlan/ipaddress/%s/auto' % iface.virtual_machine_id,
                payload={"vlan": iface.vlan}, as_admin=is_admin)

    if resp.status_code == 200 and int(resp.json()['status']) == 0:
        ip_address_id = resp.json()['data']['ipaddress']['id']
        ip = IpAddressManager(console=console_id, cloud_id=cloud_id, as_admin=is_admin).get_object(ip_address_id)

        if iface.public and iface.virtual_machine_id is not None:
            resp = rebuild_network(console_id, api_user_id, cloud_id, 
                                   {"id": iface.virtual_machine_id}, is_admin, 
                                   vm_mng_cls=VirtualMachineManager)

            if resp['code'] == 202:
                return {"code": 202, "response": {"queue_token": resp["response"]["queue_token"], "resource": ip}}

            else:
                return resp
        else:
            return {'code': 200, 'response': ip}

    else:
        logging.debug("vm add ip error: %s" % resp.content)
        raise HTTPError(417, 'Operation failed')


def reserve(console_id=None, api_user_id=None, cloud_id=None, args={}, is_admin=False):
    nim = NetworkInterfaceManager(console_id, cloud_id, is_admin)

    print "total: %s" % nim.get_count({'virtual_machine_id': None})
    
    if nim.get_count({'virtual_machine_id': None})>5:
        raise HTTPError(509, "Can't reserve a network interface as you already reached your maximum number of reserved interfaces. Please, attach or delete some of those")


    if NetworkManager(console_id, cloud_id, is_admin).get_object(args['network_id']) is None:
        raise HTTPError(404, "Network not found")
        
    network_interface = nim.reserve(args['network_id'], args)
    return {"code": 201, "response": network_interface}


def attach_ip(console_id=None, api_user_id=None, cloud_id=None, args={}, is_admin=False):
    ip = IpAddressManager(console=console_id, cloud_id=cloud_id, as_admin=is_admin).get_object(args['ip_address_id'])

    if not ip:
        raise HTTPError(404, 'IP address not found')

    iface = NetworkInterfaceManager(console=console_id, cloud_id=cloud_id, as_admin=is_admin).get_object(args['id'])

    if not iface:
        raise HTTPError(404, 'Network interface not found')

    if iface.virtual_machine_id is not None:
        vm = VirtualMachineManager(console_id, cloud_id, is_admin).get_object(iface.virtual_machine_id)

        if not vm:
            raise HTTPError(404, 'Virtual machine not found') 
    
    if ip._network_id == PARKING_NETWORK[console_id - 1]:
        ip = IpAddressManager(console=console_id, cloud_id=cloud_id, as_admin=is_admin).attach(args['ip_address_id'], args['id'])

    else:
        if not is_admin and iface.public:
        	raise HTTPError(404, 'IP address not found')

        user = ApiUserManager(console=console_id, api_user_id=api_user_id, as_admin=is_admin).get_object(api_user_id)

        if not user:
            raise HTTPError(500, 'Misconfigured user')

        onapp_resp = call_onapp(user, url_query="virtual_machines/%s/ip_addresses" % (iface.virtual_machine_id), data={'ip_address_join': {'ip_address_id': ip.id, 'network_interface_id': iface.id}}, method='post')

        if onapp_resp.status_code == 201:
            if vm.status == 'online':
                token = get_onapp_token(user.console_id, user.cloud_id, iface.id, 'NetworkInterface', 'update_firewall')
                return {'code':202, 'response': {'queue_token': token.id}}

            else:
                return {"code": 200, "response": ip}

        else:
            logging.debug("assign ip address to interface: %s" % onapp_resp.content)
            raise HTTPError(417, 'Operation failed')

    if ip is None:
        raise HTTPError(404, 'Ip Address not found')

    return {"code": 200, "response": ip}


def detach_ip(console_id=None, api_user_id=None, cloud_id=None, args={}, is_admin=False):
    user = ApiUserManager(console=console_id, api_user_id=api_user_id, as_admin=is_admin).get_object(api_user_id)

    if not user:
        raise HTTPError(500, 'Misconfigured user')

    ip_mng = IpAddressManager(console=console_id, cloud_id=cloud_id, as_admin=is_admin)
    ip = ip_mng.get_object(args['ip_address_id'])

    if not ip:
        raise HTTPError(404, 'IP address not found')

    iface_mng = NetworkInterfaceManager(console=console_id, cloud_id=cloud_id, as_admin=is_admin)
    iface = iface_mng.get_object(args['id'])

    if not iface:
        raise HTTPError(404, 'Network interface not found')

    if iface.virtual_machine_id is None:
        ip_mng.detach(ip.id, iface.id)
        #ip_mng.release(ip.id)
        clean_ip(console_id, ip)
        return {"code": 204, "response": ""}

    vm = VirtualMachineManager(console_id, cloud_id, is_admin).get_object(iface.virtual_machine_id)
    if not vm:  
        raise HTTPError(404, 'Virtual machine not found')
    if vm_is_locked(user, vm):
        raise HTTPError(412, 'Virtual machine is locked by another task')
        
    net = NetworkManager(console=console_id, cloud_id=cloud_id, as_admin=is_admin).get_object(ip.network_id)
    if not net:
        raise HTTPError(404, 'Network not found')

    if iface.virtual_machine_id is None:
        if IpAddressManager(console_id, cloud_id, is_admin).detach(args['ip_address_id'], args['id']):
            clean_ip(console_id, ip)
            return {"code": 204, "response": ""}

        else:
            raise HTTPError(500, "Operation failed")

    ipjoin_mng = IpAddressJoinManager(console=console_id, cloud_id=cloud_id, as_admin=is_admin)
    ip_join = ipjoin_mng.get_object({"ip_address_id": ip.id, "network_interface_id": iface.id})

    if not ip_join:
        raise HTTPError(404, 'IP address not assigned to interface')

    onapp_resp = call_onapp(user, url_query="virtual_machines/%s/ip_addresses/%s" % (iface.virtual_machine_id, ip_join.id), method='delete')

    if onapp_resp.status_code != 200:
        logging.debug("vm unassign ip: %s" % onapp_resp.content)
        raise HTTPError(417, 'Operation failed')

    must_rebuild_network = False

    if iface.public and iface.virtual_machine_id is not None:
        must_rebuild_network = True

    # delete private interfaces if unused
    if not iface.public and ipjoin_mng.get_count(
            {"network_interface_id": iface.id}) == 0:
        if not iface_mng.delete(iface):
            raise HTTPError(417, "Operation failed")

    if must_rebuild_network:
        resp = rebuild_network(console_id, api_user_id, cloud_id,
                               {"id": iface.virtual_machine_id}, is_admin,
                               vm_mng_cls=VirtualMachineManager)
        if resp['code'] == 202:
            resp = {"code": 202, "response":
                    {"queue_token": resp["response"]["queue_token"]}}
    else:
        resp = {"code": 204, "response": ""}

    clean_ip(console_id, ip)
    return resp


def clean_ip(console, ip):
    import requests
    from api.libs.mail import send_mail

    url = "http://{url}/gigas_delister/?ip={ip}&mask={mask}&console={console}"\
        .format(url=WEBSERVICE,
                ip=ip.ip_address, 
                mask=ip.netmask, 
                console=console)
    try:
        req = requests.get(url).json(strict=False)
        if req['code'] != 200:
            raise requests.exceptions.RequestException
        response = True
    except requests.exceptions.RequestException:
        response = False
        error_msg = "Failed to clean the IP address {0}".format(ip.id)
        logging.error(error_msg)
        send_mail(error_msg, error_msg)
    
    return response 

def change_network_id(console_id=None, api_user_id=None, cloud_id=None, args={}, is_admin=False):
    user = ApiUserManager(console=console_id, api_user_id=api_user_id, as_admin=is_admin).get_object(api_user_id)

    if not user:
        raise HTTPError(500, 'Misconfigured user')

    iface_mng = NetworkInterfaceManager(console_id, cloud_id, is_admin)
    iface = iface_mng.get_object(args['id'])

    if not iface:
        raise HTTPError(404, 'Network interface not found')

    if iface.label == 'Parked':
        raise HTTPError(412, 'Unassigned network interfaces are not supported')

    old_network_join_id = iface.network_join_id
    vm = VirtualMachineManager(console_id, cloud_id, is_admin).get_object(iface.virtual_machine_id)

    if not vm:
        raise HTTPError(404, 'Virtual machine not found')

    if vm.locked:
        raise HTTPError(412, 'Virtual machine is locked by another task')

    htiers = [tier.group_id for tier in ResourceManager(console_id, cloud_id).get_list(
            {"resource_type": "HypervisorTier"})]

    if not htiers:
        raise HTTPError(403, 'You don\'t have enough hypervisor tier permissions')

    # red es nuestra
    net = NetworkManager(console_id, cloud_id, is_admin).get_object(args['network_id'])

    if not net:
        raise HTTPError(404, 'Network not found')

    # interfaz no tiene ips
    ip_count = IpAddressJoinManager(console_id, cloud_id, is_admin).get_count(
            {"network_interface_id": args['id']})

    if ip_count > 0:
        raise HTTPError(412, 'Network interface still has joined IP addresses')

    netjoin_mng = NetworkJoinManager(console_id, cloud_id, True)
    network_join = netjoin_mng.get_last_object({"network_id": args['network_id'], 
            "target_join_id": vm.hypervisor_id, "target_join_type": "Hypervisor",
            "interface": HV_PUBLIC_INTERFACE})

    if not network_join:
        date_now = datetime.datetime.utcnow()
        netjoin_data = {
                "hypervisor_id": None,
                "network_id": args['network_id'],
                "interface": HV_PUBLIC_INTERFACE,
                "created_at": date_now,
                "updated_at": date_now,
                "target_join_id": vm.hypervisor_id,
                "target_join_type": "Hypervisor"
                }
        network_join_id = netjoin_mng.create_object(netjoin_data)
        network_join = netjoin_mng.get_object(network_join_id)

    iface = iface_mng.update_fields(iface, {"network_join_id": network_join.id})

    if vm.booted:
        token = HalVm(user, True, vm.id).reboot(htiers[0])

        if token is not None:
            return {'code': 202, 'response': {'queue_token': '%s' % token, 'resource': iface}}

        else:
            iface = iface_mng.update_fields(iface, {"network_join_id": old_network_join_id})
            raise HTTPError(417, 'Operation failed')

    return {"code": 200, "response": iface}
        
def edit(console_id=None, api_user_id=None, cloud_id=None, args={}, is_admin=False):
    if 'network_id' in args:
        return change_network_id(console_id, api_user_id, cloud_id, args, is_admin)

    user = ApiUserManager(console=console_id, api_user_id=api_user_id, as_admin=is_admin).get_object(api_user_id)

    if not user:
        raise HTTPError(500, 'Misconfigured user')

    iface_mng = NetworkInterfaceManager(console_id, cloud_id, is_admin)
    iface = iface_mng.get_object(args['id'])

    if not iface:
        raise HTTPError(404, 'Network interface not found')

    if 'label' in args and iface.virtual_machine_id is None:
        raise HTTPError(412, 'Changing label is not supported for unassigned interfaces')

    if iface.virtual_machine_id is None:
        raise HTTPError(400, 'Network interface does not belong to any virtual machine')

    vm = VirtualMachineManager(console_id, cloud_id, is_admin).get_object(iface.virtual_machine_id)

    if not vm:  # Si dejamos pasar onapp actua sobre cualquier disco de cualquier vm, por ejemplo, no balancer
        raise HTTPError(404, 'Virtual machine not found') 
    
    if 'rate_limit' in args:
        resp = call_hal(user, url_query='/nq/net/ratelimit/%s/update' % iface.virtual_machine_id,
                payload={"limit": args['rate_limit'], "network_interface_id": int(args['id'])}, as_admin=is_admin)

        if resp.status_code == 200 and int(resp.json()['status']) == 0:
            iface.rate_limit = args['rate_limit']

        else:
            logging.debug("vm change rate limit error: %s" % resp.content)
            raise HTTPError(417, 'Operation failed')

    if 'default_firewall_policy' in args:
        onapp_resp = call_onapp( user,
                                 url_query="virtual_machines/{vm_id}/firewall_rules/update_defaults"
                                           .format(vm_id=iface.virtual_machine_id),
                                 data={'network_interfaces':
                                          { str(iface.id) : { 'default_firewall_rule':
                                                                args['default_firewall_policy'] }}},
                                 method='put',
                                 allow_redirects=False
                               )        
        if onapp_resp.status_code != 302:  # <--- yes, it really responds with 302 when OK (!)
            logging.debug("error updating default_firewall policy")
            raise HTTPError(417, 'Operation failed')

    onapp_data = {}
                
    if 'label' in args:
        onapp_data['label'] = args['label']

    if 'primary' in args:
        onapp_data['primary'] = args['primary']

    if onapp_data:
        onapp_resp = call_onapp(user,
                                url_query="virtual_machines/{vm_id}"
                                          "/network_interfaces/{iface_id}"
                                          .format(vm_id=iface.virtual_machine_id,
                                                  iface_id=iface.id),
                                data={"network_interface": onapp_data}, method='put'
                               )
        if onapp_resp.status_code != 200:
            logging.debug("vm unassign ip: %s" % onapp_resp.content)
            raise HTTPError(417, 'Operation failed')

    iface_mng.session.close()
    iface = iface_mng.get_object(args['id'])
    return {'code':200, 'response': iface}
