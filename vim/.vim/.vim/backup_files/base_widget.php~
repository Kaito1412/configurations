<?php

require_once(APPDIR_MODULES . 'Hosting/gigashosting/libs/class.gigasapi.php');
require_once(APPDIR_MODULES . 'Hosting/gigashosting/libs/class.request.php');


class TemplateFaker
{
    var $_tpl_vars = array();
    var $tpl = null;

    public function assign($key, $value)
    {
        $this->_tpl_vars[$key] = $value;
    }

    public function tpl($path)
    {
        $this->tpl = $path;
    }
}


class base_widget extends HostingWidget
{
    public function clientFunction(&$module)
    {
        $params = $_REQUEST;
        $params['account'] = $module->getAccountDetails();
        $this->template = new TemplateFaker();
        $this->user_api = new GigasApi($params['account']);
        $this->request = new Request();
        $this->language = Engine::getObject('language');

        $widget_name = explode('_', get_class($this), 2)[1];
        $action = !empty($params['act']) ? $widget_name . '_' . preg_replace('/\W+/', '_', $params['act']) : $widget_name;

        if (method_exists($this, $action)) {
            try {
                $this->$action($params);
            } catch (Exception $e) {
                $this->addError('An error ocurred. |Se ha producido un error. ');
                #hbm_redirect('clientarea/services/' . $params['account']['slug'] . '/' . $params['account']['id'] . '/&vpsid=' . $params['vpsid'] . '&widget=' . $widget_name);
                hbm_redirect('clientarea/services/' . $params['account']['slug'] . '/' . $params['account']['id']);
            }
        } else {
            throw new Exception('Unknown widget action');
        }

        $widget_path = APPDIR_MODULES . 'Hosting/gigashosting/widgets/' . $widget_name . '/';

        if (!is_null($this->template->tpl)) {
            $widget_tpl = $this->template->tpl;
        } else {
            $widget_tpl = $action . '.tpl';

            if (!file_exists($widget_path . $widget_tpl)) {
                if ($action != $widget_name) {
                    if (empty($params['vpsdo'])) {
                        hbm_redirect('clientarea/services/' . $params['account']['slug'] . '/' . $params['account']['id'] . '/&vpsid=' . $params['vpsid'] . '&widget=' . $widget_name);
                    } else {
                        hbm_redirect('clientarea/services/' . $params['account']['slug'] . '/' . $params['account']['id'] . '/&vpsid=' . $params['vpsid'] . '&vpsdo=' . $params['vpsdo']);
                    }
                }
                $widget_tpl = $widget_name . '.tpl';
            }
        }

        if (!file_exists($widget_path . $widget_tpl)) {
            hbm_redirect('clientarea/services/' . $params['account']['slug'] . '/' . $params['account']['id'] . '/&vpsid=' . $params['vpsid'] . '&vpsdo=vmdetails');
        }

        return array($widget_tpl, $this->template->_tpl_vars);
    }

    public function get_addons($product_id)
    {
        $hapi = new ApiWrapper();
        $aplicable_addons = $hapi->getProductApplicableAddons(array('id' => $product_id));
        $addons = array();

        foreach ($aplicable_addons['addons']['addons'] as $addon) {
            if (preg_match('/,' . $product_id . '[,$]?/', $addon['products'])) {
                $addon_details = $hapi->getAddonDetails(array('id' => $addon['id']))['addon'];
                if (!empty($addon_details['module'])) {
                    $k = preg_replace('/class.gigashosting_(.*).php/', '\1', $addon_details['module']);
                    $addons[$k][] = $addon_details;
                } else {
                    $k = $addon['id'];
                    $addons[$k] = $addon_details;
                }
            }
        }

        return $addons;
    }
}
