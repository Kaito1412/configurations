# -*- coding: utf-8 -*-
from api.handlers.base import GigasRequestHandler
from api.libs.validation import str_validator_generator, integer_validator, boolean_translator_validator
from managers.iface_manager import OnappNetworkInterfaceManager as NetworkInterfaceManager
from managers.db_manager import ParkingInterfaceOwnerManager
from tornado.web import HTTPError
from api.controllers.loader import get_controller
from api.controllers import NetworkInterfaceCtrl, FirewallCtrl


class NetworkInterfaceCommon(GigasRequestHandler):
    """
    get owner
    """
    def _get_admin_cloud(self):
        ni_id = int(self.path_args[0])
        ni = (NetworkInterfaceManager(self.console, self.cloud_id, self.is_admin)
              .get_object(ni_id, load="virtual_machine"))
        if ni is None:
            raise HTTPError(404, "Network Interface not Found!")
        try:
            return ni.virtual_machine.user_id
        except AttributeError:
            ni = (ParkingInterfaceOwnerManager(self.console, self.cloud_id, self.is_admin)
                  .get_object(ni_id, load=""))

        if ni is None:
            raise HTTPError(400, "Network interface doesn't have an user")
        return ni.cloud_id


class NetworkInterfaceHandler(NetworkInterfaceCommon):
    handler_url = r"/network_interface/([0-9]+)"
    dont_change_cloud_methods = ['GET']

    def delete(self, interface_id):
        delete_params = {"id": interface_id}
        network_interface_actions = get_controller(self.console, NetworkInterfaceCtrl)
        resp = network_interface_actions.delete(self.user_id, self.cloud_id, delete_params, self.is_admin)
        self.write_response(resp['code'], resp['response'])

    def put(self, interface_id):
        mod_params = self.validate_and_filter_parameters(
                parameters_accepted={
                        "label": str_validator_generator(),
                        "rate_limit": integer_validator,
                        "primary": boolean_translator_validator,
                        "default_firewall_policy": str_validator_generator(valid_expr="^(ACCEPT|DROP)$"),
                        "network_id": integer_validator,
                        },
                parameters_required=set(),
                parameters_ignored=set(),
                admin_only_parameters=['rate_limit'])
        mod_params['id'] = interface_id
        network_interface_actions = get_controller(self.console, NetworkInterfaceCtrl)
        resp = network_interface_actions.edit(self.user_id, self.cloud_id, mod_params, self.is_admin)
        self.write_response(resp['code'], resp['response'])

    def get(self, interface_id):
        network_interface_actions = get_controller(self.console, NetworkInterfaceCtrl)
        resp = network_interface_actions.get(self.user_id, self.cloud_id, {"id": interface_id}, self.is_admin)
        self.write_response(resp['code'], resp['response'])


class CreateNetworkInterfaceHandler(GigasRequestHandler):
    handler_url = r"/network_interface"

    _get_admin_cloud = lambda self: self._get_admin_cloud_from_header()

    def post(self):
        post_params = self.validate_and_filter_parameters(
                {
                    "label": str_validator_generator(),
                    "rate_limit": integer_validator,
                    "network_id": integer_validator,
                    "primary": boolean_translator_validator,
                },
                set(["label", "network_id"]),
                set(),
                ['rate_limit']
                )
        network_interface_actions = get_controller(self.console, NetworkInterfaceCtrl)
        resp = network_interface_actions.reserve(self.user_id, self.cloud_id, post_params, self.is_admin)
        self.write_response(resp['code'], resp['response'])


class ListNetworkInterfaces(GigasRequestHandler):
    handler_url = r"/network_interfaces"

    def get(self, *argv, **kwargs):
        get_params = self.validate_and_filter_parameters(
                parameters_accepted={
                        'virtual_machine_id': integer_validator,
                        'network_id': integer_validator,
                        'public': boolean_translator_validator,
                        "interface_label": ("label?", str_validator_generator(valid_expr=r"[\w\_]+")),
                        },
                parameters_required=set())
        if "label?" in get_params:
            get_params["label?"] = "%{label}%".format(label=get_params["label?"])
        network_interface_actions = get_controller(self.console, NetworkInterfaceCtrl)
        resp = network_interface_actions.get_all(self.user_id, self.cloud_id, get_params, self.is_admin)
        self.write_response(resp['code'], resp['response'])


class AddIPToInterface(NetworkInterfaceCommon):
    handler_url = r"/network_interface/([0-9]+)/ip_address"

    def post(self, interface_id):
        post_params = self.validate_and_filter_parameters(
                {'ip_address_id': integer_validator},
                set())
        post_params['id'] = interface_id

        network_interface_actions = get_controller(self.console, NetworkInterfaceCtrl)
        if 'ip_address_id' in post_params:
            resp = network_interface_actions.attach_ip(self.user_id, self.cloud_id, post_params, self.is_admin)

        else:
            resp = network_interface_actions.add_ip(self.user_id, self.cloud_id, post_params, self.is_admin)

        self.write_response(resp['code'], resp['response'])


class IPFromInterface(NetworkInterfaceCommon):
    dont_change_cloud_methods = []
    handler_url = r"/network_interface/([0-9]+)/ip_address/([0-9]+)"

    def delete(self, interface_id, ip_address_id):
        print("HOLAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA")
        delete_params = {"id": interface_id, "ip_address_id": ip_address_id}
        network_interface_actions = get_controller(self.console, NetworkInterfaceCtrl)
        resp = network_interface_actions.detach_ip(self.user_id, self.cloud_id, delete_params, self.is_admin)
        self.write_response(resp['code'], resp['response'])


class FirewallRulesListFromInterfaceHandler(GigasRequestHandler):
    handler_url = r"/network_interface/([0-9]+)/firewall_rules"

    def get(self, interface_id):
        firewall_actions = get_controller(self.console, FirewallCtrl)
        resp = firewall_actions.get_all(self.user_id, self.cloud_id, {"network_interface_id": interface_id}, self.is_admin)
        self.write_response(resp['code'], resp['response'])


class CreateFirewallRule(NetworkInterfaceCommon):
    handler_url = r"/network_interface/([0-9]+)/firewall_rule"

    def post(self, interface_id):
        post_params = self.validate_and_filter_parameters(
                {
                    'command': str_validator_generator(valid_expr=r"^(ACCEPT|DROP)$"),
                    'protocol': str_validator_generator(valid_expr=r"^(TCP|UDP)$"),
                    'address': str_validator_generator(valid_expr=r"^\d{1,3}(\.\d{1,3}){3}(/\d{1,3}|(/\d{1,3}(\.\d{1,3}){3}))?$"),
                    'port': str_validator_generator(valid_expr=r"^\d{1,5}((,\d{1,5})*|(:\d{1,5}))?$"),
                },
                set(['command', 'protocol']))
        post_params['network_interface_id'] = interface_id
        firewall_actions = get_controller(self.console, FirewallCtrl)
        resp = firewall_actions.create_rule(self.user_id, self.cloud_id, post_params, self.is_admin)
        self.write_response(resp['code'], resp['response'])
