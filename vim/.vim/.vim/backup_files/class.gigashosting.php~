<?php

require_once(APPDIR_MODULES . "Hosting/gigashosting/libs/class.gigasapi.php");
require_once(APPDIR_MODULES . "Hosting/gigashosting/libs/class.virtualmachine.php");
require_once(APPDIR_MODULES . "Hosting/gigashosting/libs/class.base_resources.php");
require_once("libs/hostbill/Account.php");
require_once(MAINDIR . "includes/gigas_constants.php");
require_once("libs/Utils.php");

class gigashosting extends HostingModule implements Observer
{
    const AMD_PROCESSOR = 'AMD';
    const INTEL_PROCESSOR = 'Intel';

    protected $modname = 'Gigas Hosting';

    protected $lang = array (
        "english" => array
        (
            "api_login" => "API Login",
            "api_password" => "API Password",
        ),
        "spanish" => array
        (
            "api_login" => "Usuario API",
            "api_password" => "ContraseÃ±a API",
        )
    );

    # product options
    protected $options = array(
        'option10' => array(
            'name' => 'Provisioning type',
            'value' => '',
            'type' => 'select',
            'default' => array('Single Machine, autocreation', 'Multiple Machines, full management'),
        ),
        #'option1' => array(
        #    'name' => 'User role',
        #    'value' => '',
        #    'type' => 'select',
        #    'default' => array('User', 'Admin'),
        #),
        'option3' => array(
            'name' => 'Memory limit [MB]',
            'value' => '',
            'type' => 'input',
            'default' => false,
        ),
        'option4' => array(
            'name' => 'CPU limit',
            'value' => '',
            'type' => 'input',
            'default' => false,
        ),
        'option5' => array(
            'name' => 'CPU shares %',
            'value' => '',
            'type' => 'input',
            'default' => '100',
            'description' => 'Changing this value can break things',
        ),
        'option6' => array(
            'name' => 'Disk size [GB]',
            'value' => '',
            'type' => 'input',
            'default' => false,
        ),
        #'option7' => array(
        #    'name' => 'Hypervisor',
        #    'value' => '',
        #    'type' => 'input',
        #    'default' => false,
        #),
        #'option8' => array(
        #    'name' => 'Primary network',
        #    'value' => '',
        #    'type' => 'input',
        #    'default' => false,
        #),
        'option9' => array(
            'name' => 'Port speed (rate)',
            'value' => '',
            'type' => 'input',
            'default' => false,
        ),
        #'option11' => array(
        #    'name' => 'Show link to OnApp backend',
        #    'value' => 'No',
        #    'type' => 'select',
        #    'default' => array('Yes', 'No'),
        #),
        "option12" => array
        (
            "name" => 'OS Template',
            "value" => '',
            "type" => "loadable",
            #"variable" => "os",
            #"description" => "Allow to choose by client using <a href=\"#\"
            #                 ."onclick=\"\$('#loadostemplates').click();\">Forms:Os</a>",
            "default" => "getOSTemplates"
        ),
        'option13' => array(
            'name' => 'IP Address count',
            'value' => '',
            'type' => 'input',
            'default' => false,
        ),
        'option14' => array(
            'name' => 'Max Virtual Machines',
            'value' => '',
            'type' => 'input',
            'default' => false,
        ),
        'option15' => array(
            'name' => 'Backups/Templates',
            'value' => '',
            'type' => 'input',
            'default' => false,
        ),
        #'option16' => array(
        #    'name' => 'Data sent /hour [GB]',
        #    'value' => '',
        #    'type' => 'input',
        #    'default' => false,
        #),
        #'option18' => array(
        #    'name' => 'Data received /hour [GB]',
        #    'value' => '',
        #    'type' => 'input',
        #    'default' => false,
        #),
        'option17' => array(
            'name' => 'Backup space [GB]',
            'value' => '',
            'type' => 'input',
            'default' => false,
        ),
        #'option19' => array(
        #    'name' => 'Show autoscale options',
        #    'value' => '',
        #    'type' => 'input',
        #    'default' => false,
        #),
        'option100' => array(
            'name' => 'Hypervisor Tier',
            'value' => '',
            'type' => 'loadable',
            'default' => 'getHypervisorTiers',
            'description' => 'Changing this value can break things',
        ),
        'option101' => array(
            'name' => 'Data Store Tier',
            'value' => '',
            'type' => 'loadable',
            'default' => 'getDataStoreTiers',
            'description' => 'Changing this value can break things',
        ),
        'option102' => array(
            'name' => 'Network Tier',
            'value' => '',
            'type' => 'loadable',
            'default' => "getNetworkTiers",
            'description' => 'Changing this value can break things',
        ),
        'option103' => array(
            'name' => 'Backup Tier',
            'value' => '',
            'type' => 'loadable',
            'default' => 'getDataStoreTiers',
            'description' => 'Changing this value can break things',
        ),
        'option104' => array(
            'name' => 'Enable Backup',
            'value' => '',
            'type' => 'check',
            'default' => false,
        ),
        'option105' => array(
            'name' => 'Api user role',
            'value' => '',
            'type' => 'loadable',
            'default' => 'getRoles',
            'description' => 'Changing this value can break things',
        ),
        'option106' => array(
            'name' => 'Bandwith limit',
            'value' => '',
            'type' => 'input',
            'description' => 'Changing this value can break things',
        ),
        'option107' => array(
            'name' => 'Processor',
            'value' => 'AMD',
            'type' => 'select',
            'default' => array('AMD', 'Intel'),
            'description' => 'Changing this value can break things',
        ),
        'option108' => array(
            'name' => 'Backup policy',
            'value' => BackupPolicies::BACKUP_DC,
            'type' => 'select',
            'default' => array(
                BackupPolicies::BACKUP_DC,
                BackupPolicies::BACKUP_VPS,
                BackupPolicies::NO_BACKUP,
            ),
        ),
    );

    protected $details = array(
        "option1" => array(
            "name" => "username",
            "value" => false,
            "type" => "input",
            "default" => false,
        ),
        "option2" => array (
            "name" => "password",
            "value" => false,
            "type" => "input",
            "default" => false
        ),
        "option4" => array(
            "name" => "domain",
            "value" => false,
            "type" => "input",
            "default" => false
        ),
        "option5" => array(
            "name" => "rootpassword",
            "value" => false,
            "type" => "hidden",
            "default" => false
        ),
        "option6" => array(
            "name" => "user-id",
            "value" => false,
            "type" => "hidden",
            "default" => false
        ),
        "option7" => array(
            "name" => "access_token",
            "value" => false,
            "type" => "hidden",
            "default" => false
        ),
        "option8" => array(
            "name" => "email",
            "value" => false,
            "type" => "hidden",
            "default" => false
        ),
        "option100" => array(
            "name" => "api_login",
            "value" => false,
            "type" => "input",
            "default" => false,
        ),
        "option101" => array(
            "name" => "api_password",
            "value" => false,
            "type" => "input",
            "default" => false,
        ),
        "option102" => array(
            "name" => "api_user_id",
            "value" => false,
            "type" => "hidden",
            "default" => false,
        ),
        "option103" => array(
            "name" => "api_password_encrypt",
            "value" => false,
            "type" => "hidden",
            "default" => false,
        ),
    );

    public function connect($app_details)
    {
        $this->connection['ip'] = $app_details['ip'];
        $this->connection['host'] = $app_details['host'];
        $this->connection['username'] = $app_details['username'];
        $this->connection['password'] = $app_details['password'];
        $this->connection['secure'] = $app_details['secure'];
    }


    public function testConnection()
    {
        if ($this->connection['username'] != '') {
            $api = new GigasApi($this->connection);
            try {
                $r = $api->get('/api_users', array('login'=>$this->connection['username']));
            } catch (Exception $r) {
            }
            return ($r->http_code == 200);
        } else {
            #$this->addError('Username cannot be blank!');
            hbm_log_error('Username cannot be blank!');
            return false;
        }
    }

    private function gen_onapp_credentials($sufix = '')
    {
        $sufix = ($sufix ? "_" . $sufix : '');
        $username = 'hb_client_' . $this->account_details['client_id'] . '_' . $this->account_details['id'] . $sufix;
        $password = substr(uniqid(), -8);
        $this->details['option1']['value'] = $username;
        $this->details['option2']['value'] = $password;
        return array('username' => $username, 'password' => $password);
    }

    private function generateApiPassword($length)
    {
        $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_@.';
        $new_api_password = '';
        for ($i = 0; $i < $length; $i++) {
            $new_api_password .= $characters[rand(0, strlen($characters) - 1)];
        }
        return $new_api_password;
    }

    private function localCipherApiPassword($api_password)
    {
        $this->details['option103']['value'] = true;
        return GigasUtilities::cipherApiPassword($api_password);
    }

    private function localDecipherApiPassword($api_password)
    {
        if (empty($this->details['option103']['value'])) {
            return $api_password;
        }
        return GigasUtilities::decipherApiPassword($api_password);
    }

    private function gen_api_credentials($sufix = '')
    {
        $sufix = ($sufix ? "_" . $sufix : '');
        $api_login = substr($this->client_data['email'], 0, 36 - strlen($this->account_details['id']) - strlen($sufix)) . "_" . $this->account_details['id'] . $sufix;
        $api_password = $this->generateApiPassword(13);
        $this->details['option100']['value'] = $api_login;
        $this->details['option101']['value'] = $this->localCipherApiPassword($api_password);  # cifra
        return array('api_login' => $api_login, 'api_password' => $api_password);
    }

    public function Create()
    {
        if ($this->account_details['status'] == 'Active') {
            #$this->addError('This account is already active');
            hbm_log_error("Account #" . $this->account_details['id'] . " is already active");
            return false;
        }

        $hapi = new GApiWrapper();

        /***********************BIG BUG IN HOSTBILL ****************************
         * When we put 2 account in the same order both receive the same details
         * and that creates that reuse the same api user
         ***********************************************************************/
        $account_details = $hapi->getAccountDetails(
            array('id' => $this->account_details['id'])
        );

        if (empty($account_details['extra_details'])) {
            $this->details['option100']['value'] = '';
            $this->account_details['username'] = '';
        }

        $addons_count = $hapi->getAccountAddonsCount(array('id' => $this->account_details['id']));

        if ($addons_count > 0) {
            #$this->addError('This account has addons. Please, terminate them first.');
            hbm_log_error("Account #" . $this->account_details['id'] . " has addons. Please, terminate them first");
            return false;
        }

        $this->connection = $this->getConnection();
        $api = new GigasApi($this->connection);

        #
        # USER
        #

        $api_login = $this->details['option100']['value'];
        $api_password = $this->localDecipherApiPassword($this->details['option101']['value']);
        $create_api_user = empty($api_login);
        hbm_log_error("AAAAAAAAA: " . $this->details['option100']['value']);
        if (! $create_api_user) {
            $api_user_search = $api->get('/api_users', array('login' => $api_login))->json();
            $create_api_user = ! (count($api_user_search) > 0);
        }

        if ($create_api_user) {  # create/mapp new api user

            if (empty($this->details['option100']['value']) or empty($this->details['option101']['value'])) {
                extract($this->gen_api_credentials());
            }

            hbm_log_error("Creating new API user $api_login");
            $role = $this->options['option105']['value'];

            if ((strpos($this->account_details['username'], 'client_') !== false or strpos($this->account_details['username'], 'hb_client_') !== false) and !empty($this->account_details['password'])) {
                $username = $this->account_details['username'];
                $password = $this->account_details['password'];
                try {
                    $api_user_response = $api->mapp_user($api_login, $api_password, $username, $password, $role);
                    $api_user = $api_user_response->json();
                } catch (Exception $e) {
                    hbm_log_error("Error mapping API user " . $api_login . " : " . print_r($e->json(), true));
                    return false;
                }
            } else {
                extract($this->gen_onapp_credentials());

                try {
                    $api_user_response = $api->create_user($api_login, $api_password, $this->client_data['email'], $this->client_data['firstname'], $this->client_data['lastname'], $username, $password, $role);
                    $api_user = $api_user_response->json();
                } catch (Exception $e) {
                    # Error por login ocupado? lo intentamos de nuevo
                    $sufix = substr(uniqid(), -3);
                    extract($this->gen_api_credentials($sufix));
                    extract($this->gen_onapp_credentials($sufix));
                    try {
                        $api_user_response = $api->create_user($api_login, $api_password, $this->client_data['email'], $this->client_data['firstname'], $this->client_data['lastname'], $username, $password, $role);
                        $api_user = $api_user_response->json();
                    } catch (Exception $e) {
                        hbm_log_error("Error creating API user " . $api_login . " : " . print_r($e->json(), true));
                        return false;
                    }
                }
            }

            if (!empty($api_user)) {
                #$this->addInfo('API user created');
                $this->details['option6']['value'] = $api_user['cloud_id'];
                $this->details['option102']['value'] = $api_user['id'];
            } else {
                #$this->addError('Error creating API user');
                hbm_log_error("Error creating user account. User empty.");
                return false;
            }

            $api_user_id = $api_user['id'];

        } else {  # api credentials exists

            hbm_log_error("API user $api_login already created");

            try {
                $r = $api->get("/api_users", array('login' => $api_login));
                $api_user_search = $r->json();
            } catch (Exception $e) {
                hbm_log_error('Error connection with API with API user ' . $api_login . '\n' . print_r($e, true));
                return false;
            }

            if (count($api_user_search) == 0) {
                hbm_log_error('API user ' . $api_login . ' not found');
                return false;
            }

            $api_user = $api_user_search[0];

            if ($api_user['status'] == 'Cancelled') {
                #$this->addInfo('Activating cancelled API user');
                try {
                    $r = $api->put('/api_user/' . $api_user['id'], array('status' => 'Active', 'password' => $api_password));
                } catch (Exception $r) {
                    hbm_log_error('Error activating API user ' . $api_login);
                    return false;
                }
            }

            try {
                $user_api = new GigasApi($this->getAccountDetails());
                $r = $user_api->post('/token', array('login' => $api_login, 'password' => $api_password)); # recreate permanent token
            } catch (Exception $r) {
                hbm_log_error('Error re-creating API token for API user ' . $api_login);
                return false;
            }

            $this->details['option6']['value'] = $api_user['cloud_id'];
            $this->details['option102']['value'] = $api_user['id'];
            $api_user_id = $api_user['id'];
        }

        hbm_log_error("username: ".$username);
        #
        # RESOURCES
        #

        $resources_mapp = array(
            'memory' => 'option3',
            'cpu' => 'option4',
            'cpu_share' => 'option5',
            'disk_size' => 'option6',
            'ip_addresses' => 'option13',
            'virtual_machines' => 'option14',
            'backup' => 'option15',
            'templates' => 'option15',
            'img_disk_size' => 'option17',
        );

        if ($this->options['option107']['value'] == self::INTEL_PROCESSOR) {
            $resources_mapp['intel_cpu'] = 'option4';
        }

        $group_resources_mapp = array(
            'hypervisor_tier' => 'option100',
            'data_store_group' => 'option101',
            'network_group' => 'option102',
        );

        $multi_resource_params = array();

        foreach ($resources_mapp as $res_name => $option) {
            $multi_resource_params["${res_name}_limit"] = $this->options[$option]['value'];
        }

        foreach ($group_resources_mapp as $res_name => $option) {
            if ($res_name == 'network_group') {
                $multi_resource_params["${res_name}_limit"] = $this->options['option13']['value'];
                $multi_resource_params["${res_name}_limit_rate"] = $this->options['option9']['value'];
            } elseif ($res_name == 'data_store_group') {
                $multi_resource_params["${res_name}_limit"] = $this->options['option6']['value'];
            #} elseif ($res_name == 'hypervisor_tier') {
            #    # TODO: Eliminar cuando se complete el ticket #3627
            #    $multi_resource_params["${res_name}_limit"] = $this->options['option14']['value'];
            }

            $multi_resource_params["${res_name}_id"] = $this->options[$option]['value'];
        }

        try {
            $r = $api->put('/api_user/' . $api_user_id . '/multi_base_resource', $multi_resource_params);
        } catch (Exception $r) {
        }

        #
        # VLANS
        #
        $q = $this->db->prepare("SELECT * FROM gigas_vlan WHERE client_id = ? AND group_id = ?");
        $q->execute(array($this->account_details['client_id'], $this->account_details['group_id']));
        $client_vlans = $q->fetchAll(PDO::FETCH_ASSOC);
        $q->closeCursor();
        foreach ($client_vlans as $vlan) {
            try {
                $rvlans = $api->get('/networks', array('vlan' => $vlan['vlan']))->json();
            } catch (Exception $r) {
                $rvlans = array();
            }
            if (!is_array($rvlans) or empty($rvlans)) {
                $rvlans = array($api->create_network($this->account_details['client_id'], $vlan['vlan']));
            }
            foreach ($rvlans as $rvlan) {  # No tiene sentido que haya mÃ¡s de una pero como es un array ...
                $api->create_network_permissions($rvlan['network_group_id'], $api_user_id, 254, -1);
            }
        }

        #
        # VIRTUAL MACHINE
        #
        $account_details = $this->getAccountDetails();
        $user_api = new GigasApi($this->getAccountDetails());

        if ($this->options['option10']['value'] == 'Single Machine, autocreation') {
            $deploy_vm = true;
            try {
                $vms = $user_api->get('/virtual_machines')->json();
                $deploy_vm = (count($vms) == 0);
            } catch (Exception $e) {
                # PodrÃ­amos parar aquÃ­ pero le vamos a dar la opotunidad de crear la vm
            }
        }

        if ($deploy_vm) {
            # Sacamos el template_id desde la config de producto
            $template_id = $this->options['option12']['value'];

            # Sobrescribimos con el custom form si lo hubiera
            foreach ($this->account_details['customforms'] as $config_cat => $custom_form) {
                if ($custom_form['name'] == 'OS Template') {
                    $config_id = current($custom_form['values']);
                    foreach ($custom_form['items'] as $item_id => $config_item) {
                        if ($config_item['id'] == $config_id) {
                            $template_id = $config_item['variable_id'];
                            break;
                        }
                    }
                    break;
                }
            }

            try {
                $template = $user_api->get('/template/' . $template_id)->json();
            } catch (Exception $e) {
                $this->addError('Cloud Server deployment cannot be completed because an unexpected error. |Tu Cloud Server no ha podido ser desplegado debido a un error inesperado. ');
                hbm_log_error("Cloud server deployment cannot be completed because an unexpected error. " . print_r($e->json(), true));
                return true;
            }

            $hostname = $this->details['option4']['value'];
            $hostname_slugified = preg_replace('/[^0-9_a-zA-Z]/', '', $hostname);
            $label = $this->details['option1']['value'] . '_' . $hostname_slugified;
            $this->details['option5']['value'] = $this->_generate_password(8);

            $vm_params = array(
                'memory' => $this->options['option3']['value'],
                'cpus' => $this->options['option4']['value'],
                'template_id' => $template_id,
                'hostname' => $hostname,
                'label' => $label,
                'hypervisor_tier_id' => $this->options['option100']['value'],
                'data_store_group_primary_id' => $this->options['option101']['value'],
                'data_store_group_swap_id' => $this->options['option101']['value'],
                'primary_network_group_id' => $this->options['option102']['value'],
                'rate_limit' => $this->options['option9']['value'],
                'initial_root_password' => $this->details['option5']['value'],
            );

            if ($template['operating_system'] == 'linux') {
                $vm_params['primary_disk_size'] = intval($this->options['option6']['value']) - 1;
                $vm_params['swap_disk_size'] = 1;
            } else {
                $vm_params['primary_disk_size'] = intval($this->options['option6']['value']);
            }

            #
            # CREATE VM
            #
            $Gvm = new GIGAS_VirtualMachine($account_details);
            $vm_id = $Gvm->create($vm_params);

            if ($vm_id == -12) {

                false;
                $error = "Invalid hostname. Hostname supports a maximum of 25 characters, it may only contain letters, ";
                $error.= "digits and dashes (-) and it mustn't start with a number. |";
                $error.= " El Hostname no es vÃ¡lido. Solo puede contener letras, nÃºmeros y el carÃ¡cter guiÃ³n (-). ";
                $error.= "AdemÃ¡s su logitud no debe ser superior a 25 caracteres ni puede empezar por un nÃºmero.";

                $this->addError($error);
                hbm_log_error("Invalid hostname");
            } else if ($vm_id < 1) {
                false;
                $this->addError('Cloud Server deployment cannot be completed because an unexpected error. |Tu Cloud Server no ha podido ser desplegado debido a un error inesperado. ');
                hbm_log_error("Cloud server deployment cannot be completed because an unexpected error");
            } else {
                true;
                $this->addInfo('We have started the deployment for the your new Cloud Server. |Estamos desplegando tu nuevo Cloud Server. ');
            }
        }

        return true;
    }

    public function Suspend()
    {
        //use $this->details and $this->account_details to determine which account to Unsuspend
        $api = new GigasApi($this->connection);
        $vms = $api->get('/virtual_machines', array('cloud_id' => $this->details['option6']['value']))->json();

        foreach ($vms as $vm) {
            try {
                $api->put('/virtual_machine/' . $vm['id'], array('suspended' => 'true'));
            } catch (Exception $e) {
                mail('root@gigas.com', '[' . $_SERVER['HTTP_HOST'] . '] Virtual machine #' . $vm['id'] . ' suspension failed', print_r($e, true), 'cc:javier.navarro@gigas.com');
            }
        }

        try {
            $api->put('/api_user/' . $this->details['option102']['value'], array('status' => 'Suspended'));
        } catch (Exception $e) {
        }

        return true;
    }

    public function Unsuspend()
    {
        //use $this->details and $this->account_details to determine which account to Unsuspend
        $api = new GigasApi($this->connection);
        $vms = $api->get('/virtual_machines', array('cloud_id' => $this->details['option6']['value']))->json();

        foreach ($vms as $vm) {
            try {
                $api->put('/virtual_machine/' . $vm['id'], array('suspended' => 'false'));
            } catch (Exception $e) {
                mail('root@gigas.com', '[' . $_SERVER['HTTP_HOST'] . '] Virtual machine #' . $vm['id'] . ' unsuspension failed', print_r($e, true), 'cc:javier.navarro@gigas.com');
            }
        }

        try {
            $api->put('/api_user/' . $this->details['option102']['value'], array('status' => 'Active'));
        } catch (Exception $e) {
        }

        return true;
    }

    public function Terminate()
    {
        $this->connection = $this->getConnection();
        if (!empty($this->details['option102']['value'])) {
            $account_details = $this->getAccountDetails();
            $api = new GigasApi($this->connection);

            if (empty($account_details['extra_details']['option6'])) {
                $this->addError('Cloud id is empty');
                return false;
            }

            try {
                $r = $api->get('/virtual_machines', array('cloud_id' => $account_details['extra_details']['option6']));
            } catch (Exception $r) {
                $this->addError('Could not find any virtual machine because an error');
                return false;
            }

            $vms = $r->json();

            if (count($vms) > 0) {
                $this->addInfo('Destroying all user\'s virtual machines');
                foreach ($vms as $vm) {
                    if ($vm['cloud_id'] == $account_details['extra_details']['option6']) {
                        try {
                            $r = $api->delete('/virtual_machine/' . $vm['id']);
                        } catch (Exception $r) {
                            $this->addError('Could not destroy virtual machine #' . $vm['id']);
                        }
                    }
                }
                # load account module and call suspend
                $account_module = HBLoader::loadmodel('Accounts');
                $account_module->suspendAccount($account_details['id']);
                $this->addInfo('Account suspended');
                return false;
            } else {
                try {
                    $r = $api->delete('/api_user/' . $this->details['option102']['value']);
                } catch (Exception $r) {
                    $this->addInfo('Could not cancel api user #' . $this->details['option102']['value']);
                }
                return ($r->http_code == 204 or $r->http_code == 404);
            }
        } else {
            $this->addError('API user id is empry');
            return false;
        }
        if ($this->options['option10']['value'] == 'Single Machine, autocreation') {
            #remove vps from vps details table
            $query = $this->db->prepare(
                "DELETE FROM hb_vps_details WHERE account_id=?"
            );
            $query->execute(array($account_details['id']));
            $query->closeCursor();
        }
    }

    #public function Renewal()
    #{
    #    return true;
    #}

    public function ChangePackage()
    {
    #   //use $this->options to get new package specification
    #   //use $this->account_details and $this->details to get account details that should be upgraded/downgraded

        //si no es un producto de hosting, no procesamos
        if (!($this->account_details['ptype'] == 'onappcloud' and !empty($this->account_details['options']))) {
            return true;
        }

        $orig_details = $this->account_details;

        $dest_details = array_merge($this->account_details, $this->options);
        $dest_details['product_id'] = $this->product_details['id'];

        $dest_details['details'] = $this->details;

        if ($orig_details['options']['option107'] != $dest_details['option107']['value']) {
            hbm_log_error("Change CPU type not supported (".$orig_details['options']['option107']." to ".$dest_details['option107']['value'].")");
            Engine::singleton()->addError("Unexpected failure. Please contact support|Se produjo un fallo. Contacte con soporte");
            return false;
        }

        $accHB = new AccountHB($dest_details, $orig_details['id'], $this->getConnection());

        $is_upgrade = $accHB->isUpgrade($this->account_details);
        $is_downgrade = !$is_upgrade;

        #
        # DOWNGRADE PACKAGE
        #
        if ($is_downgrade) {
            $changed = $accHB->changeProduct($orig_details);
            if (!$changed) {
                return false;
            }
        }

        #
        # RESOURCES
        #
        $new_options = array();
        foreach ($dest_details as $k => $v) {
            if (array_key_exists('value', $v)) {
                $new_options[$k] = $v['value'];
            }
        }
        $new_details = $this->account_details;
        $new_details['options'] = $new_options;
        $new_details['product_id'] = $this->product_details['id'];

        $br = new GIGAS_BaseResources($new_details);
        if (!$br->redo()) {
            if ($is_downgrade) { //Comprobaciones que no se hacen en el changeProduct (ram, cpu, disk....)
                return false;
            }
            if ($orig_details['product_id'] != $new_details['product_id']) {# Intentamos evitar que entre en bucle
                //rollback
                $accHB = new AccountHB($orig_details, $orig_details['id'], $this->getConnection());
                $accHB->changeProduct($dest_details);
                return false;
            }
        }

        #
        # UPGRADE PACKAGE
        #
        if ($is_upgrade) {
            $accHB->changeProduct($orig_details);
        }

        return true;
    }

    #public function ChangePassword($newpassword)
    #{
    #    //determine account details using $this->account_details and $this->details
    #    //and send new password to server
    #    return true;
    #}

    public function getSynchInfo()
    {

        $hapi = new GApiWrapper();
        $server_details = $hapi->getServerDetails(array('id'=>$this->account_details['server_id']));
        $admin_api = new GigasApi($server_details['server']);


        if (empty($this->details['option100']['value']) or empty($this->details['option101']['value'])) {
            return false;
        }

        $param = array('api_login' => $this->details['option100']['value'],
                       'api_password' => $this->localDecipherApiPassword($this->details['option101']['value']),
                       'cloud_login' => $this->account_details['username'],
                       'cloud_password' => $this->account_details['password'],
                       'status' => $this->account_details['status']);

        try {
            $api_user = $admin_api->post('/api_user/' .$this->account_details['client_id']. '/repair', $param)->json();
        } catch (Exception $e) {
            $this->addError($e->json());
            return false;
        }

        if ($api_user['status'] != 'Active') {
            $this->addError('Api user status is ' . $api_user['status']);
            return array('suspended' => '1');
        } else {
            $return['suspended'] = '0';
        }

        $this->account_details['extra_details']['option6'] = $api_user['cloud_id'];
        $this->account_details['extra_details']['option102'] = $api_user['id'];

        $this->account_details['username'] = $api_user['cloud_login'];
        $this->account_details['password'] = $api_user['cloud_password'];


        $q = $this->db->prepare("UPDATE hb_accounts SET username = :username, password = :password, extra_details = :extra_details WHERE id = :id");
        $data = array('username' => $api_user['cloud_login'],
                      'password' => Utilities::encrypt($api_user['cloud_password']),
                      'extra_details' => serialize($this->account_details['extra_details']),
                      'id' => $this->account_details['id']);

        $q->execute($data);
        $q->closeCursor();

        $this->addInfo('user-id #' . $api_user['api_user_id'] . ' cloud-id #' . $api_user['cloud_id']);
        return $return;
    }

    public function getNetworkTiers()
    {
        $api = new GigasApi($this->connection);
        $ngs = $api->get('/network_groups')->json();
        return array_map(function ($ng) {
            return array($ng['id'], $ng['label']);
        }, array_filter($ngs, function ($ng) {
            return strpos($ng['label'], 'private_network_zone_') === false;
        }));
    }

    public function getDataStoreTiers()
    {
        $api = new GigasApi($this->connection);
        $dstiers = $api->get('/data_store_groups')->json();
        return array_map(function ($dstier) {
            return array($dstier['id'], $dstier['label']);
        }, $dstiers);
    }

    public function getHypervisorTiers()
    {
        $api = new GigasApi($this->connection);
        $htiers = $api->get('/hypervisor_tiers')->json();
        return array_map(function ($htier) {
            return array($htier['id'], $htier['name']);
        }, $htiers);
    }

    public function getOSTemplates()
    {
        $api = new GigasApi($this->connection);
        $templates = $api->get('/templates', array('public' => 'true'))->json();
        return array_map(function ($template) {
            return array($template['id'], $template['label']);
        }, $templates);
    }

    public function getAccountDetails()
    {
        $this->connection = $this->getConnection();
        $extra_details = array_map(function ($e) {
            return !empty($e['value']) ? $e['value'] : $e['default'];
        }, $this->details);
        return array_merge($this->connection, $this->account_details, array('extra_details' => $extra_details), array('server' => $this->connection));
    }

    private function getConnection()
    {
        $s = array();

        if (!empty($this->account_details) and
            array_key_exists('forms', $this->account_details) and
            is_array($this->account_details['forms']) and
            array_key_exists('server_id', $this->account_details['forms']) and
            in_array($this->account_details['status'], array('Pending', 'Cancelled'))
        ) {
            # Get server from client form
            $server_id = $this->account_details['forms']['server_id']['variable_id'];
            $q = $this->db->prepare('SELECT * FROM hb_servers WHERE id = :server_id');
            $q->execute(array('server_id' => $server_id));
            $s = $q->fetch(PDO::FETCH_ASSOC);
            $q->closeCursor();

            if (!empty($s)) {
                $s['password'] = Utilities::decrypt($s['password']);
                $this->account_details['server_id'] = $server_id;
                $this->account_details['group_id'] = $s['group_id'];
            }
        }

        return !empty($s) ? $s : $this->connection;
    }

    public function getRoles()
    {
        $api = new GigasApi($this->connection);
        $roles = $api->get('/roles')->json();
        return array_map(function ($role) {
            return array($role['label'], $role['label']);
        }, $roles);
    }

    public function after_accountcreate($details)
    {
        # Update server_id from forms
        if (array_key_exists('forms', $details['service']) and array_key_exists('server_id', $details['service']['forms'])) {
            $server_id = $details['service']['forms']['server_id']['variable_id'];
            $q = $this->db->prepare('UPDATE hb_accounts SET server_id = :server_id WHERE id = :account_id');
            $q->execute(array('server_id' => $server_id, 'account_id' => $details['service']['id']));
            $q->closeCursor();
        }
    }

    private function _generate_password($length = 8)
    {
        $chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
        $count = mb_strlen($chars);

        for ($i = 0, $result = ''; $i < $length; $i++) {
            $index = rand(0, $count - 1);
            $result .= mb_substr($chars, $index, 1);
        }

        return $result;
    }

    #public function after_accountsuspend($account_id)
    #{
    #    $account_details = $this->getAccountDetails();
    #    $api = new GigasApi($this->connection);
    #    $vms = $api->get('/virtual_machines', array('cloud_id' => $account_details['extra_details']['option6']))->json();

    #    foreach ($vms as $vm) {
    #        try {
    #            $api->put('/virtual_machine/' . $vm['id'], array('suspended' => 'true'));
    #        } catch (Exception $e) {
    #        }
    #    }

    #    return true;
    #}

    #public function after_accountunsuspend($account_id)
    #{
    #    $account_details = $this->getAccountDetails();
    #    $api = new GigasApi($this->connection);
    #    $vms = $api->get('/virtual_machines', array('cloud_id' => $account_details['extra_details']['option6']))->json();

    #    foreach ($vms as $vm) {
    #        try {
    #            $api->put('/virtual_machine/' . $vm['id'], array('suspended' => 'false'));
    #        } catch (Exception $e) {
    #        }
    #    }

    #    return true;
    #}
}
