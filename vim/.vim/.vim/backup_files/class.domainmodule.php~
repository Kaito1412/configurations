<?php
/**
 *
 * @ This file is created by DeZend.Org
 * @ DeZend (PHP5 Decoder for ionCube Encoder)
 *
 * @	Version			:	1.1.7.0
 * @	Author			:	TuhanTS
 * @	Release on		:	25.02.2013
 * @	Official site	:	http://DeZend.Org
 *
 */

class DomainModule extends Module {
	private $type = 'Domain';
	private $error = array(  );
	private $registrar_info = array(  );
	private $domain_id = false;
	private $client_data = array(  );
	private $domain_contacts = array(  );
	private $period = null;
	private $status = 'Pending';
	private $name = null;
	private $details = array(  );
	private $ajaxLoadValues = true;
	private $options = array(  );
	private $domain_config = false;
	private $commands = array(  );
	private $clientCommands = array(  );

	function Register() {
	}

	function Renew() {
	}

	function Transfer() {
	}

	function __construct($id = false) {
		parent::(  );

		if ($id) {
			$this->getFromDB( $id );
		}

	}

	function getDomainId() {
		return $this->domain_id;
	}

	function getFromDB($id) {
		$q = $this->db->prepare( 'SELECT dom.*
         FROM hb_domains dom
         WHERE dom.id=?  LIMIT 1' );
		$q->execute( array( $id ) );
		$data = $q->fetch( FETCH_ASSOC );
		$q->closeCursor(  );

		if ($data) {
			$this->domain_id = $id;
			$this->name = $data['name'];

			if (!preg_match( '/\A[a-z0-9\-\_\.]+\Z/', $this->name )) {
				require_once( MAINDIR . 'includes' . DS . 'libs' . DS . 'idn' . DS . 'class.idn.php' );
				IDN;
				$idn = new (  );
				$punnycode = $idn->encode( $this->name );

				if ($punnycode) {
					$this->name = $punnycode;
				}
			}

			$this->period = $data['period'];
			$this->status = $data['status'];
			$client = HBLoader::loadmodel( 'Clientarea' );
			$this->client_data = $client->get_client_details( $data['client_id'] );
			$this->details['extended'] = unserialize( $data['extended'] );

			if (strpos( $data['nameservers'], '|' ) !== FALSE) {
				$data['nameservers'] = explode( '|', $data['nameservers'] );
				foreach ($data['nameservers'] as $key => $value) {
					$this->details['ns' . ( $key + 1 )] = $value;
				}
			}


			if (strpos( $data['nsips'], '|' ) !== FALSE) {
				$data['nsips'] = explode( '|', $data['nsips'] );
				foreach ($data['nsips'] as $key => $value) {
					$this->details['nsip' . ( $key + 1 )] = $value;
				}
			}

			$this->details['epp_code'] = $data['epp_code'];
			$this->details['idprotection'] = $data['idprotection'];
			$this->expires = $data['expires'];
			$this->prepare( $this->client_data );

			if (( !empty( $data['extended'] ) && is_string( $data['extended'] ) )) {
				$data['extended'] = unserialize( $data['extended'] );
			}

			$this->domain_contacts = array( 'registrant' => (empty( $data['extended']['registrant'] ) ? $this->client_data : $data['extended']['registrant']), 'admin' => (empty( $data['extended']['admin'] ) ? $this->client_data : $data['extended']['admin']), 'tech' => (empty( $data['extended']['tech'] ) ? $this->client_data : $data['extended']['tech']), 'billing' => (empty( $data['extended']['billing'] ) ? $this->client_data : $data['extended']['billing']) );
			foreach (array( 'registrant', 'admin', 'tech', 'billing' ) as $key) {
				if (is_numeric( $this->domain_contacts[$key] )) {
					$this->domain_contacts[$key] = $client->get_client_details( $this->domain_contacts[$key] );

					if (( empty( $this->domain_contacts[$key] ) || $this->domain_contacts[$key]['parent_id'] != $this->client_data['id'] )) {
						$this->domain_contacts[$key] = $this->client_data;
						continue;
					}

					continue;
				}
			}

			$this->prepare( $this->domain_contacts );
			$this->prepare( $this->details );
			$this->options['numyears'] = $this->period;
			$name = explode( '.', $this->name );
			$this->options['sld'] = $name[0];
			$tld = end( $name );

			if (count( $name ) == 3) {
				$tld = $name[1] . '.' . $tld;
			}

			$this->options['tld'] = $tld;
		}

		return $data;
	}

	function setOptions($data) {
		$this->options = $data;
	}

	function setDomainConfig($config) {
		$this->domain_config = $config;
		foreach (array( 'idprotection', 'dnsmanagement', 'emailfwd' ) as $d) {
			if (isset( $config[$d] )) {
				$this->details[$d] = $config[$d]['value'];
				continue;
			}
		}


		if (!empty( $config )) {
			foreach ($config as $var => $val) {
				if (in_array( $var, array( 'idprotection', 'dnsmanagement', 'emailfwd' ) )) {
					continue;
				}


				if ($val['variable_id'] != '') {
					$this->options['ext'][$var] = $val['variable_id'];
					continue;
				}


				if (( $val['value'] == '' && $val['value_name'] != '' )) {
					$this->options['ext'][$var] = $val['value_name'];
					continue;
				}

				$this->options['ext'][$var] = $val['value'];
			}
		}

	}

	function getCommands() {
		return $this->commands;
	}

	function getClientCommands() {
		return $this->clientCommands;
	}

	function prepare($data) {
		foreach ($data as $key => $value) {
			if ($key == 'tld') {
				if (isset( $this->options['tld'] )) {
					$this->options['tld2'] = ltrim( $value, '. ' );
					continue;
				}

				$this->options['tld'] = trim( $value, '. ' );
				continue;
			}


			if ($key == 'prices') {
				$period = explode( ' ', $data['prices'] );
				$this->options['numyears'] = $period[0];
				continue;
			}


			if (( ( $key == 'extended' && !empty( $value ) ) && is_array( $value ) )) {
				foreach ($value as $ext_att => $ext_val) {
					if (!is_array( $ext_val )) {
						$this->options['ext'][$ext_att] = $ext_val;
						continue;
					}
				}

				continue;
			}

			$this->options[$key] = $value;
		}

	}

	function addDomain($status = 'Pending Registration') {
		HBDebug::log( '' . 'method called -> addDomain, for domain ' . $this->domain_id . ' with status ' . $status . ' ', $this->filename );

		if (!$this->domain_id) {
			return false;
		}

		$q = $this->db->prepare( 'UPDATE hb_domains SET status=:status, date_created=:date_c, expires=:expires WHERE id=:id' );
		$execute = array( ':status' => $status, ':date_c' => date( 'Y-m-d' ), ':expires' => date( 'Y-m-d', strtotime( date( 'Y-m-d' ) . ' +' . $this->period . ' years' ) ), ':id' => $this->domain_id );
		return $q->execute( $execute );
	}

	function logAction($data) {
		$data['module'] = $this->getModuleName(  );
		$data['id'] = $this->domain_id;
		Engine::singleton(  )->notify( 'DomainLog', $data );
	}

	function updateExtended($ext) {
		$q = $this->db->prepare( 'UPDATE hb_domains SET extended=:extended WHERE id=:id' );
		$execute = array( ':extended' => serialize( $ext ), ':id' => $this->domain_id );
		$this->addInfo( 'extinfo_updated' );
		$this->logAction( array( 'action' => 'Update Extended Info', 'result' => true, 'change' => false, 'error' => false ) );
		return $q->execute( $execute );
	}

	function addPeriod() {
		HBDebug::log( '' . 'method called -> addPeriod, for domain ' . $this->domain_id . ' with period ' . $this->period . ' ', $this->filename );

		if (!$this->domain_id) {
			return false;
		}

		$expires = date( 'Y-m-d', strtotime( $this->expires . ' +' . $this->period . ' years' ) );
		$q = $this->db->prepare( 'UPDATE hb_domains SET expires=:expires, next_due=:due, next_invoice=:invoice, `status`=\'Active\' WHERE id=:id' );
		$execute = array( ':expires' => $expires, ':due' => $expires, ':invoice' => Utilities::nextinvoicedate( $expires ), ':id' => $this->domain_id );
		$q->execute( $execute );
	}

	function isNameserverIPs() {
		return true;
	}

	function getLastError() {
		if (( is_array( $this->error ) && !empty( $this->error ) )) {
			$error = implode( ', ', $this->error );
		}
		else {
			$error = '';
		}

		$this->error = array(  );
		return (substr( $error, 0, 1 ) == ',' ? substr( $error, 1 ) : $error);
	}

	function addError($error) {
		if (!is_array( $error )) {
			$error = array( $error );
		}

		foreach ($error as $err) {
			if (array_search( $err, $this->error ) === false) {
				$this->error[] = $err;
				parent::adderror( $err );
				continue;
			}
		}

	}

	function getLastInfo() {
		if (( is_array( $this->registrar_info ) && !empty( $this->registrar_info ) )) {
			$error = implode( ', ', $this->registrar_info );
		}
		else {
			$error = '';
		}

		$this->registrar_info = array(  );
		return (substr( $error, 0, 1 ) == ',' ? substr( $error, 1 ) : $error);
	}

	function addInfo($error) {
		if (array_search( $error, $this->registrar_info ) === false) {
			$this->registrar_info[] = $error;
			parent::addinfo( $error );
		}

	}
}

?>
