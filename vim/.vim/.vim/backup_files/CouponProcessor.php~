<?php

require_once "BaseLib.php";
require_once "libs/KApi.php";


class CouponProcessor extends BaseLib
{

    private $staff_mail = "javier.navarro@gigas.com,devs@gigas.com";

    /**
     * stuff we do when a module is created with an attached coupon
     *
     * - if there's a referrer, we notify him
     * - add the coupon to the client details in a line
     * - mark account as trial/promo ( this is the field we look for to delete trials on expire )
     * - mark client as trial
     */
    function processCoupon($account, $product)
    {
        die("aasd");
        $account_id  = $account['id'];
        $client_id   = $account['client_id'];

        if($account['ptype'] != 'onappcloud' or empty($account['options'])) return;

        $sql = 'SELECT CONCAT(upper(hbxc.type), " DE ", username, " | CUPON: ", hbc.code, "\n") AS note, ' .
                    'hbxc.type AS coupon_type, hbc.id AS coupon_id, hbxc.referer_id AS referrer '.
                    'FROM hb_coupons hbc LEFT JOIN gigas_coupons_extradetails hbxc ON hbc.id = hbxc.coupon_id ' .
                    ' LEFT JOIN auth_user u ON u.id = hbxc.assigned_to_id ' .
                    'WHERE hbc.id in (SELECT coupon_id FROM hb_coupons_log WHERE order_id = ? AND client_id = ?);';
        $query = $this->db->prepare($sql);
        $query->execute(array($account['order_id'], $client_id));
        $info = $query->fetch(PDO::FETCH_ASSOC);
        if(!is_array($info)) return;

        //
        // SEND TICKET TO REFERRER
        //
        if(array_key_exists('referrer', $info) && (!empty($info['referrer'])))
        {
            $referrer_details = $this->api->getClientDetails(array('id' => $info['referrer']));
            $result = $this->sendReferrerTicket($referrer_details, $account['firstname'] . ' ' . $account['lastname'], $product['name']);
            if(!$result)
            {
                $this->mail_staff("Fallo al crear un ticket de cupon", "Fallo al crear un ticket de cupon:\r\n referer_id: " . $info['referrer']. ", amigo: " . $account['firstname']
                                  . ' ' . $account['lastname'] . " compra: " . $product['name'] . "por favor, reenvialo de manera manual desde Mapp");
            }
        }

        //
        // ADD COUPON NOTE TO CLIENT DETAILS
        //
        # Get admin id
        $admin_id = 1;
        #$query = $this->db->prepare("SELECT id FROM hb_admin_access WHERE username = ?");
        #$query->execute(array('admin'));
        #$admin = $query->fetch(PDO::FETCH_ASSOC);
        #$query->closeCursor();
        #$admin_id = empty($admin) ? null : $admin['id'];

        if (!empty($admin_id)) {
            if (!is_null($info['note'])) {
                $query = $this->db->prepare("INSERT INTO hb_notes (id, `type`, rel_id, admin_id, date, note) VALUES (NULL, 'client', ?, ?, NOW(), ?)");
                $query->execute(array($account['client_id'], $admin_id, $info['note']))
                    OR $this->account_error_log($account_id, "Error adding note to client " . print_r($this->db->errorInfo(), true));
                $query->closeCursor();
            }
        } else {
            $this->account_error_log($account_id, "Error adding note to client. Admin not found.");
        }

        # Old way
        #$query = $this->db->prepare("UPDATE hb_client_details SET notes = CONCAT(COALESCE(notes, ''), \"\n\", ?) WHERE id = ?");
        #$query->execute(array((!is_null($info['note']) ? $info['note'] : ''), $account['client_id']))
        #    OR $this->account_error_log($account_id, "Error adding note to client " . print_r($this->db->errorInfo(), true) );

        //
        // MARK ACCOUNT AS TRIAL/PROMO
        //
        if (!array_key_exists('coupon_type', $info)) return;

        $sql_type = "SELECT id FROM gigas_account_extra_type where extratype=?";
        $query_type = $this->db->prepare($sql_type);
        $query_type->execute(array($info['coupon_type']));
        if ($query_type->rowCount() > 0)
        {
            $result_type = $query_type->fetch(PDO::FETCH_ASSOC);
            $type_id = $result_type['id'];
        }else{
            $sql_type_insert = "INSERT INTO gigas_account_extra_type (extratype) VALUES(?)";
            $query_insert = $this->db->prepare($sql_type_insert);
            $sql_result = $query_insert->execute(array($info['coupon_type']));
            if (!$sql_result)
            {
                $errmsg = "Error inserting account extra type " . print_r($this->db->errorInfo(), true);
                $this->account_error_log($account_id, $errmsg);
            }else{
                $type_id = $this->db->lastInsertId();
            }
        }


        $sql2 = "INSERT INTO gigas_account_extradetails (account_id, coupon_id) VALUES (?, ?);";

        try
        {
            $query2 = $this->db->prepare($sql2);
            $sql_result = $query2->execute(array($account_id, $info['coupon_id']));
            if (!$sql_result)
            {
                $errmsg = "Error creating extradetails for the account " . print_r($this->db->errorInfo(), true);
                $this->account_error_log($account_id, $errmsg);
            }
            $extra_id = $this->db->lastInsertId();

            $sql_m2m = "INSERT into gigas_account_extradetails_account_type (accountextradetail_id, accountextratype_id) values (?, ?)";
            $query_m2m = $this->db->prepare($sql_m2m);
            $sql_result = $query_m2m->execute(array($extra_id, $type_id));
            if (!$sql_result)
            {
                $errmsg = "Error while establishing relationship between $extra_id and $type_id " . print_r($this->db->errorInfo(), true);
                $this->account_error_log($account_id, $errmsg);
            }
        }
        catch (Exception $e)
        {
            true;
        }

        //
        // MARK CLIENT AS TRIAL
        //
        if (strcasecmp($info['coupon_type'], "trial")==0)
        {
            $sql3 = "SELECT id as ced_id FROM gigas_client_extradetails where client_id=?";
            $query3 = $this->db->prepare($sql3);
            $query3->execute(array($client_id));
            $ced_id = 0;
            if ($query3->rowCount() > 0)
            {
                $ced = $query3->fetch(PDO::FETCH_ASSOC);
                $ced_id = $ced['ced_id'];
            }
            else
            {
                $sql_insert_ed = "INSERT INTO gigas_client_extradetails " .
                    "(client_id, karma, timezone, trusted_payer) VALUES (?, 0, 0, 0);";
                $query_insert_ed = $this->db->prepare($sql_insert_ed);
                $query_insert_ed->execute(array($client_id));
                $ced_id = $this->db->lastInsertId();
            }

            if ($ced_id > 0)
            {
                $trial_id = "SELECT id FROM gigas_client_extratype WHERE extratype='Trial' or extratype='trial'";
                $sql4 = "SELECT * FROM gigas_client_extradetails_extratype gcee " .
                              "WHERE gcee.clientextradetail_id=$ced_id and gcee.clientextratype_id=($trial_id);";
                $query4 = $this->db->prepare($sql4);
                $query4->execute();
                if ($query4->rowCount() == 0)
                {
                    $sql_mark_trial = "INSERT INTO gigas_client_extradetails_extratype " .
                        "(clientextradetail_id, clientextratype_id) VALUES " .
                        "(?, ($trial_id));";
                    $query_mark_trial = $this->db->prepare($sql_mark_trial);
                    $query_mark_trial->execute(array($ced_id)) || $this->account_error_log($account_id, "couldn't set the client as trial");
                }
            }
            else
            {
                $this->mail_staff("Error al registrar un cliente como trial en ".$__FILE__);
            }
        }
    }

    private function sendReferrerTicket($client, $referee_full_name, $product_name)
    {
        die("aasd");
        $kUser = new KUser;
        $user = $kUser->addFilter('email', $client['email'])->get();

        if(empty($user))
        {
            $fullname    = $client['firstname'] . ' ' . $client['lastname'];
            $usergroupid = 26; // Karma0
            $password    = $client['password'];
            $email       = $client['email'];
            $phone       = $client['phonenumber'];
            $params      = array(
                'fullname' => $fullname,
                'usergroupid' => $usergroupid,
                'password' => $password,
                'email' => $email,
                'phone' => $phone,
            );
            $user = $kUser->post($params);
        }

        if(empty($user)) return false;

        $departmentId = 8; // Dpto Soporte
        $ticketStatusId = 18; // Closed
        $ticketPriorityId = 2; // Normal
        $ticketTypeId = 4; // Ticket

        $sql = "SELECT subject, message FROM hb_email_templates tpl ";
        $sql.= "INNER JOIN hb_language lang ON tpl.language_id = lang.id ";
        $sql.= "INNER JOIN hb_client_details cli ON lang.name = cli.language ";
        $sql.= "INNER JOIN hb_client_access acc ON cli.id = acc.id ";
        $sql.= "WHERE tpl.tplname = 'mgm:notification' AND acc.email = ? ";

        $query = $this->db->prepare($sql);
        $query->execute(array($client['email']));
        $mail_tpl = $query->fetch(PDO::FETCH_ASSOC);

        if (!$mail_tpl) {
            $stmt = $this->db->prepare("SELECT subject, message FROM hb_email_templates WHERE tplname = 'mgm:notification' LIMIT 1");
            $stmt->execute(array($template));
            $mail_tpl = $stmt->fetch(PDO::FETCH_ASSOC);
        }

        $query->closeCursor();

        $firstname = $client['firstname'];
        $subject = $mail_tpl['subject'];
        $contents = str_replace('%(referee_product_name)s', $product_name, str_replace('%(referee_full_name)s', $referee_full_name, str_replace('%(firstname)s', $firstname, $mail_tpl['message'])));
        $t = new KTicket;
        $params = array(
            'subject' => $subject,
            'fullname' => 'Gigas Support',//$user[0]['fullname'],
            'email' => $user[0]['email'],
            'contents' => $contents,
            'departmentid' => $departmentId,
            'ticketstatusid' => $ticketStatusId,
            'ticketpriorityid' => $ticketPriorityId,
            'tickettypeid' => $ticketTypeId,
            'autouserid' => 1,
        );

        $ticket_is_sent = (bool) $t->post($params);
        if(!$ticket_is_sent){
            $this->mail_staff("Fallo al crear un ticket de cupon", "Fallo al crear un ticket para " . $user[0]['email'] . ", por favor, reenvialo de manera manual desde Mapp" );
        }
        return $ticket_is_sent;
    }


    /**
     * sends mail to staff
     */
    function mail_staff($subject, $msg)
    {
        die("aasd");
        return mail($staff_mail, $subject, $msg);
    }


    /**
     * insert error in account_logs
     */
    function account_error_log($account_id, $errormsg)
    {
        die("aasd");
        $sql_error = "INSERT INTO hb_account_logs (date, account_id, admin_login, module, manual, action, result, event, error) VALUES (NOW(), ?, ?, ?, ?, ?, ?, ?, ?)";
        $params_error = array($account_id, "Automation", str_replace('.php', '', __FILE__), 0, "MarkAsTrial", false, "AfterModuleCreate", $errormsg);
        $query_error = $this->db->prepare($sql_error);
        $result = $query_error->execute($params_error);
    }
}
