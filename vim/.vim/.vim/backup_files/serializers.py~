from rest_framework import serializers
from ghostbill.serializers import (ModelSerializer,
                                   php_to_list_translated,
                                   translate_term)
# from rest_framework.renderers import JSONRenderer
# from rest_framework.parsers import JSONParser
from accounts.models import (Account, AccountAddon, CancelRequest,
                             decipherApiPassword)
import logging


class AccountSerializer(ModelSerializer):
    KEY_TRANSLATION = {
        "option100": "api_login",
        "option101": "api_password",
        "option102": "api_user_id",
    }

    def transform_extra_details(self, obj, value):
        opdict = php_to_list_translated(value,
                                        translate_with=self.KEY_TRANSLATION,
                                        drop_keys=["option6", "option7",
                                                   "option8"])

        try:
            if obj.extra_details and 'option103' in opdict:
                del opdict['option103']
                opdict['api_password'] = decipherApiPassword(
                    opdict['api_password']).decode('utf-8')
        except TypeError:
            logging.exception('Unexpected extra_details value for account %s',
                              obj.id)

        return opdict

    api_url = serializers.URLField(source="_get_api_url")
    product_name = serializers.CharField(source="product_id.name")
    transfer_usage = serializers.IntegerField(source="get_bandwith_usage")
    transfer_limit = serializers.IntegerField(source="get_bandwith_limit")
    location_id = serializers.Field(source="server_group")

    def _transfer_transform(self, value):
        if value != -1:
            return "{0:.2f}".format(value)
        else:
            return None

    def transform_transfer_usage(self, obj, value):
        return self._transfer_transform(value)

    def transform_transfer_limit(self, obj, value):
        return self._transfer_transform(value)

    def transform_product_name(self, obj, value):
        return translate_term(value)

    class Meta:
        model = Account
        fields = ('id',
                  'client_id',
                  'order_id',
                  'product_id',
                  'product_name',
                  'parent',
                  'date_created',
                  'domain',
                  'server_id',
                  'payment_module',
                  'firstpayment',
                  'total',
                  'billingcycle',
                  'next_due',
                  'next_invoice',
                  'status',
                  'extra_details',
                  'transfer_usage',
                  'transfer_limit',
                  'api_url',
                  'location_id',)

        staff_only_fields = ('payment_module',
                             'username',
                             'password',
                             'autosuspend',
                             'autosuspend_date',
                             'rootpassword',
                             'date_changed',
                             'synch_date',
                             'synch_error',
                             'user_error',
                             'domain_error',
                             'notes',
                             'manual',)

class AccountAddonSerializer(ModelSerializer):
    creation_date = serializers.DateTimeField(source="regdate")

    class Meta:
        model = AccountAddon
        fields = ('id',
                  'account_id',
                  'order_id',
                  'addon_id',
                  'name',
                  'setup_fee',
                  'recurring_amount',
                  'billingcycle',
                  'status',
                  'creation_date',
                  'next_due',
                  'next_invoice',)
        staff_only_fields = ('payment_module',)


class CancellationSerializer(ModelSerializer):
    account = serializers.IntegerField(source="account_id.id")

    class Meta:
        model = CancelRequest
        fields = ('id', 'date', 'reason', 'account')
        staff_only_fields = ('type_field')
