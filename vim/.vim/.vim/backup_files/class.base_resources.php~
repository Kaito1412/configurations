<?php

require_once APPDIR_MODULES . 'Hosting/gigashosting/libs/baselib.php';
require_once APPDIR_MODULES . 'Hosting/gigashosting/libs/class.vlan.php';


class GIGAS_BaseResources extends GIGAS_Base
{
    const ERROR = 0;

    public $errorMessages = array(
    );

    public function redo()
    {
        $hapi = new GApiWrapper();
        $account = array('details' => $this->account_details);

        $disks_sizes = array();
        $networks_ip_count = array();

        $backup_size = 0;
        $total_disk_size = 0;
        $total_ip_count = 0;
        $public_ip_count = 0;

        # Calculate product sizes and counts
        $primary_disk_size = $account['details']['options']['option6'];
        $primary_disk_tier_id = $account['details']['options']['option101'];
        $disks_sizes[$primary_disk_tier_id] = $primary_disk_size;
        $total_disk_size = $primary_disk_size;
        $backup_size = $account['details']['options']['option17'];
        $public_ip_count = $account['details']['options']['option13'];
        $vms_count = $account['details']['options']['option14'];
        $cpus_count = $account['details']['options']['option4'];
        $cpu_shares = $account['details']['options']['option5'];
        $memory_count = $account['details']['options']['option3'];
        $backups_count = $account['details']['options']['option15'];
        $hypervisor_tier_id = $account['details']['options']['option100'];

        # Calculate disk space
        $disk_addons = $hapi->getAddonsByModule(array(
            'account_id' => $account['details']['id'],
            'module' => 'class.gigashosting_diskspace.php',
            'status' => 'Active'
        ));

        $backup_addons = array();

        foreach ($disk_addons['addons'] as $disk_addon) {
            $size = $disk_addon['options']['size'];
            $tier_id = $disk_addon['options']['tier_id'];
            $total_disk_size += $size;

            if (array_key_exists($tier_id, $disks_sizes)) {
                $disks_sizes[$tier_id] += $size;
            } else {
                $disks_sizes[$tier_id] = $size;
            }

            if ($disk_addon['options']['has_backup']) {
                $backup_addon = $hapi->getAddonDetails(array('id' => $disk_addon['options']['backup_addon_id']));
                if (array_key_exists('addon', $backup_addon)) {
                    $backup_addons[] = $backup_addon['addon'];
                }
            }
        }

        # Calculate backup space
        foreach ($backup_addons as $backup_addon) {
            $backup_size += $backup_addon['options']['size'];
        }

        # TODO: Calculate memory from addons

        # Calculate ip address count
        $ip_addons = $hapi->getAddonsByModule(array(
            'account_id' => $account['details']['id'],
            'module' => 'class.gigashosting_ip.php',
            'status' => 'Active'
        ));

        foreach ($ip_addons['addons'] as $ip_addon) {
            $public_ip_count += $ip_addon['options']['ipqty'];
        }

        $total_ip_count = $public_ip_count;
        $base_resources = $this->user_api->get('/base_resources')->json();
        $used_resources = $this->user_api->get('/used_resources')->json();

        foreach ($base_resources as $base_resource) {
            if ($base_resource['resource_type'] == 'NetworkGroup') {
                if (strpos($base_resource['group_label'], 'private_network_zone_') === 0) {
                    $total_ip_count += 254;
                } else {
                    $networks_ip_count[$base_resource['group_id']] = $public_ip_count;
                }
            }
        }

        #
        # Check resources limits
        #
        foreach ($used_resources as $used_resource) {
            # Check disk spaces
            if ($used_resource['resource_type'] == 'DataStoreGroup' and $used_resource['use'] > 0) {
                    Engine::singleton()->addError('dataStoreId_error');
                    if (array_key_exists($used_resource['group_id'], $disks_sizes) 
                      && $used_resource['use'] > $disks_sizes[$used_resource['group_id']]) {
                    Engine::singleton()->addError("New hard disk limit has been exceeded. |Se ha sobrepasado el espacio en disco del nuevo producto. ");
                    return false;
                }
            }

            # Check public ips
            if ($used_resource['resource_type'] == 'NetworkGroup' and $used_resource['use'] > 0) {
                foreach ($base_resources as $base_resource) {
                    if ($base_resource['group_id'] == $used_resource['group_id']
                            and strpos($base_resource['group_label'], 'private_network_zone_') === false) {
                        if ($used_resource['use'] > $public_ip_count) {
                                return false;
                                #die('Network Group ' . $used_resource['group_id'] . ' is using ' . $used_resource['use'] . ' but has to be ' . $public_ip_count);
                        }
                    }
                }
            }

            # Check vms count
            if ($used_resource['resource_type'] == 'VmLimit' and $used_resource['use'] > 0 and $used_resource['use'] > $vms_count) {
                Engine::singleton()->addError("New cloud server limit has been exceeded. |Se ha sobrepasado el nÃºmero mÃ¡ximo de cloud server del nuevo producto. ");
                return false;
            }

            # Check cores
            if ($used_resource['resource_type'] == 'Cpu' and $used_resource['use'] > 0 and $used_resource['use'] > $cpus_count) {
                Engine::singleton()->addError("New cpu cores limit has been exceeded. |Se ha sobrepasado el nÃºmero de nucleos de cpu del nuevo producto. ");
                return false;
            }

            # Check memory
            if ($used_resource['resource_type'] == 'Memory' and $used_resource['use'] > 0 and $used_resource['use'] > $memory_count) {
                Engine::singleton()->addError("New memory limit has been exceeded. |Se ha sobrepasado la memoria del nuevo producto. ");
                return false;
            }

            # Check backup size
            #if ($used_resource['resource_type'] == 'Backup' and $used_resource['use'] > 0 and $used_resource['use'] > $backup_size) {
            #    return false;
            #    #die('Backup size used ' . $used_resource['use'] . ' needed ' . $backup_size);
            #}
        }

        #
        # Delete unused resources (data store group and hypervisor tier)
        #
        $api_user_id = $account['details']['extra_details']['option102'];
        foreach ($base_resources as $base_resource) {
            if ($bease_resource['resource_type'] == 'HypervisorTier' and $base_resource['group_id'] != $hypervisor_tier_id) {
                $this->api->delete('/api_user/' . $api_user_id . '/base_resource/hypervisor_tier/' . $base_resource['group_id']);
            }

            if ($base_resource['resource_type'] == 'DataStoreGroup' and !array_key_exists($base_resource['group_id'], $disks_sizes)) {
                $this->api->delete('/api_user/' . $api_user_id . '/base_resource/data_store_group/' . $base_resource['group_id']);
            }
        }

        #
        # Create / modify resources
        #
        # data store groups
        foreach ($disks_sizes as $tier_id => $disk_size) {
            $this->api->put('/api_user/' . $api_user_id . '/base_resource/data_store_group/' . $tier_id, array('limit' => $disk_size));
        }
        # network_groups
        foreach ($networks_ip_count as $tier_id => $ip_count) {
            $this->api->put('/api_user/' . $api_user_id . '/base_resource/network_group/' . $tier_id, array('limit' => $ip_count));
        }
        # resto


        # Calculate cores
        $core_addons = $hapi->getAddonsByModule(array(
            'account_id' => $account['details']['id'],
            'module' => 'class.gigashosting_changecores.php',
            'status' => 'Active'
        ));


                # Calculate cores
        $extracore_addons = $hapi->getAddonsByModule(array(
            'account_id' => $account['details']['id'],
            'module' => 'class.gigashosting_extracores.php',
            'status' => 'Active'
        ));

        $exceeded_cores = 0;
        $amd_cpus = 0;
        $intel_cpus = 0;
        $intel_cpus_addons = 0;
        $amd_cpus_addons = 0;

        foreach ($core_addons['addons'] as $core_addon) {
            if ($core_addon['options']['num_amd_cores']) {
                $exceeded_cores+= intval($core_addon['options']['num_cores']) * intval($core_addon['options']['num_amd_cores']);
            } else {
                $exceeded_cores+= intval($core_addon['options']['num_cores']);
            }
            $intel_cpus_addons+=intval($core_addon['options']['num_cores']);
        }

        foreach ($extracore_addons['addons'] as $core_addon) {
            if ($core_addon['options']['cpu_type'] == 'intel') {
                $intel_cpus_addons+=$core_addon['options']['num_cores'];
            } else {
                $amd_cpus_addons+=$core_addon['options']['num_cores'];
            }
        }

        $products_details =  $hapi->getProductDetailsForHumans(array('id' => $account['details']['product_id']));

        if ($products_details['core_type'] == 'Intel') {
            $intel_cpus = $cpus_count;
        } else {
            $amd_cpus = $cpus_count - $exceeded_cores;
        }

        $amd_cpus+= $amd_cpus_addons;
        $intel_cpus+= $intel_cpus_addons;

        $cpu_limit = $amd_cpus + $intel_cpus;

        $params = array(
            'memory_limit' => $memory_count,
            'cpu_limit' => $cpu_limit,
            'cpu_share_limit' => $cpu_shares,
            'intel_cpu_limit' => $intel_cpus,
            'virtual_machines_limit' => $vms_count,
            'hypervisor_tier_id' => $hypervisor_tier_id,
        );

        $this->api->put('/api_user/' . $api_user_id . '/multi_base_resource', $params);

        # TODO: Falla al reasignar el espacio por un bug. FuncionarÃ¡ cuando se termine el ticket: #4205
        $params = array(
            'img_disk_size_limit' => $backup_size,
            'backup_limit' => $backups_count,
        );
        try {
            $this->api->put('/api_user/' . $api_user_id . '/multi_base_resource', $params);
        } catch (Exception $e) {
        }
        # api user role
        try {
            $this->api->put('/api_user/' . $api_user_id, array('role' => $account['details']['options']['option105']));
        } catch (Exception $e) {
        }

        return true;

        # TODO: Change role if needed
        # TODO: Change enable backup
        # TODO: Manage backup tier
    }

    private function getCoresByModule($module_name, $cpu_type=null) {
        $num_cores = 0;
        $hapi = new GApiWrapper;
        $filter = array(
                'account_id' => $this->account_details['id'],
                'module' => $module_name,
                'status' => 'Active'
        );

        $core_addons = $hapi->getAddonsByModule($filter);
        foreach ($core_addons['addons'] as $core_addon) {
            if ($core_addon['options']['num_cores'] == false) {
                $core_addon['options']['num_cores'] = 1;
            }

            if ($core_addon['options']['num_amd_cores'] == false) {
                $core_addon['options']['num_amd_cores'] = $core_addon['options']['num_cores'];
            }

            if (is_null($cpu_type)  // si son todos
                    or is_null($core_addon['options']['cpu_type'])  // si el modulo es changecores
                    or ($core_addon['options']['cpu_type'] == $cpu_type)) {
                if ($module_name == 'class.gigashosting_changecores.php') {
                    $num_amd_cores = intval($core_addon['options']['num_amd_cores']);
                    if (is_null($num_amd_cores)) {
                        $num_amd_cores = intval($core_addon['options']['num_cores']);
                    }
                    $num_intel_cores = intval($core_addon['options']['num_cores']);
                    if (is_null($num_intel_cores)) {
                        $num_intel_cores = $num_amd_cores;
                    }
                    if ($num_amd_cores  > 0  && is_null($cpu_type)) {

                        $num_cores = $num_cores - ($num_amd_cores - $num_intel_cores);
                        continue;
                    }
                }
                $num_cores += intval($core_addon['options']['num_cores']);
            }
        }
        return $num_cores;
    }

    public function getTotalIntelCores() {
        $total_intel = 0;
        if ($this->account_details['options']['option107'] == 'Intel') {
            $total_intel += intval($this->account_details['options']['option4']);
        }
        $intel_modules = array(
            'class.gigashosting_changecores.php',
            'class.gigashosting_extracores.php'
        );
        foreach ($intel_modules as $module) {
            $total_intel += $this->getCoresByModule($module, 'intel');
        }
        return $total_intel;
    }

    public function getTotalCores($product_cores=null) {
        $total_cores = 0;
        $modules = array(
            'class.gigashosting_changecores.php',
            'class.gigashosting_extracores.php',
        );
        foreach ($modules as $module) {
            $total_cores += $this->getCoresByModule($module);
        }

        $hapi = new GApiWrapper;
        if ($product_cores === null) {
            $p_details = $hapi->getProductDetails(array('id'=>$this->account_details['product_id']));
            $total_cores += intval($p_details['product']['options']['option4']);
        } else {
            $total_cores += $product_cores;
        }
        return $total_cores;
    }
}
