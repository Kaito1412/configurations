<?php

require_once('class.Utils.php');
require_once(MAINDIR . 'includes/modules/Other/gigasutils/libs/KApi.php');


/*************************************************************
 *
 * Domain Module Class - Gigas Reseller
 * rese326890.venus.orderbox-dns.com
 * rese326890.earth.orderbox-dns.com
 *
 *
 ************************************************************/

class gigasreseller extends DomainModule
{
    // INFO Displayed on the module management section
    protected $description = 'Domains configuration using Reseller Club API made by Gigas';

    /*
     * This variable will be auto-loaded by HostBill before any action will be taken by module.
     */
    protected $client_data=array();

    protected $configuration = array(
        'username'=>array(
            'value'=>'',
            'type'=>'input',
            'default'=>false
        ),
        'password'=>array(
            'value'=>'',
            'type'=>'password',
            'default'=>false
        ) ,
        'api_key' => array (
            'value' => '',
            'type' => 'password',
            'default' => false
        ),
        'api_url'=>array(
            'value'=>'',
            'type'=>'input'
        ),
        'customer-id'=>array(
            'value'=>'',
            'type'=>'input'
        ),
        'default_ns1'=>array(
            'value'=>'dns01.gigas.com',
            'type'=>'input',
        ),
        'default_ns2'=>array(
            'value'=>'dns02.gigas.com',
            'type'=>'input',
        ),
        'default_ns3'=>array(
            'value'=>'dns03.gigas.com',
            'type'=>'input',
        ),
        'default_ns4'=>array(
            'value'=>'dns04.gigas.com',
            'type'=>'input',
        ),
        'synch_dry_run'=>array(
            'value'=>'',
            'type'=>'check',
        ),
        'transfer_dry_run'=>array(
            'value'=>'',
            'type'=>'check',
        ),
        //mail donde se notifican los errores de dominios
        'mail_domain_notify'=>array(
            'value'=>'dominios@gigas.com',
            'type'=>'input',
        ),
    );
    /*
     * Translation of the configuration fields
     */
    protected $lang=array(
        'english'=>array(
            'username'=>'Reseller ID in Reseller Club',
            'password'=>'Reseller Club user password',
            'api_url' => 'API URL for the service. If you are in testing mode is https://test.httpapi.com/api/',
            'email_error' => 'Email error',
            'nameserver_error' => 'Error in nameserver',
            'bad_html' => 'Bad HTML',
            'email_done' => 'Email Done!',
            'email_failed' => 'Email failed!',
            'updatedns_error'=> 'you need to put the correct parameters',
            'error_info' => 'An error occured: ',
            'error_register' => 'You need to put the correct fields.',
            'register_ok' => 'Domain has been registered',
            'register_error2' => 'There was a problem while registering the domain.',
            'register_error3' => 'Some of your contact information is incorrect or missing.',
            'transfer_error_validate' => 'Transfer not validated. You need to put in contact with your actual provider',
            'pending_transfer' => 'Pending Transfer',
            'transfer_ok' => 'Domain transfer has been initiated',
            'transfer_error2' => 'There was a problem while transfering the domain.',
            'renew_ok' => 'Renewed succesfully',
            'renew_error' => 'Error while renewing the domain',
            'ns_error' => 'Unable to get Name Servers',
            "bad_record" => "Bad DNS record.",
            "ttl_low" => "TTL value is too low.",
            "bad_hostname" => "Invalid hostname.",
            "bad_value" => "Invalid address value.",
            "bad_domain" => "Invalid domain.",
            "no_a_record_for_mx" => "No A record for this MX record.",
            "txt_record_too_long" => "TXT record too long.",
            "bad_service" => "Invalid service value.",
            "bad_target" => "Invalid target value.",
            "bad_weight" => "Invalid weight value.",
            "bad_port" => "Invalid port value.",
            "updatedns_error" => "Error while updating DNS records.",
            "bad_priority" => "Invalid priority value.",
            "bad_ttl" => "Invalid TTL value.",
            "action_failed" => "Action failed.",
            "dns_records_updated" => "DNS records updated successfully."
        ),
        'spanish'=>array(
            'username'=>'Reseller ID en Reseller Club',
            'password'=>'Contraseña en Reseller Club',
            'api_url' => "Url de la API para el servicio. Si estás en modo texto es probable que sea https://test.httpapi.com/api/",
            'email_error' => 'Error en email',
            'nameserver_error' => 'Error en nameserver',
            'bad_html' => 'Texto no válido',
            'email_done' => 'Email configurado correctamente',
            'email_failed' => 'Fallo en la configuración de email',
            'updatedns_error'=> 'Parámetros incorrectos en dns',
            'error_info' => 'Ha ocurrido un error: ',
            'error_register' => 'Parámetros incorrectos en registro',
            'register_ok' => 'El dominio ha sido correctamente registrado.',
            'register_error2' => 'Ha habido un problema al registrar el dominio',
            'register_error3' => 'Parte de tu información de contacto es incorrecta.',
            'transfer_error_validate' => 'La transferencia no ha sido validad. ponte en cotnacto con tu proveedor actual de dominio',
            'pending_transfer' => 'Pending Transfer',
            'transfer_ok' => 'La transferencia del dominio ha sido iniciada',
            'transfer_error2' => 'Huboun problema al transferir el dominio',
            'renew_ok' => 'El dominio ha sido renovado correctamente',
            'renew_error' => 'Error en la renovación del dominio',
            'ns_error' => 'No ha sido posible actualizar los nameservers',
            "bad_record" => "Error en el registro DNS.",
            "ttl_low" => "El valor de TTL es demasiado bajo.",
            "bad_hostname" => "Hostname incorrecto.",
            "bad_value" => "Valor de address incorrecto.",
            "bad_domain" => "Dominio incorrecto.",
            "no_a_record_for_mx" => "No hay un registro A para el registro MX.",
            "txt_record_too_long" => "Registro TXT demasiado largo.",
            "bad_service" => "Valor de servicio incorrecto.",
            "bad_target" => "Valor de Target incorrecto.",
            "bad_weight" => "Valor de peso incorrecto.",
            "bad_port" => "Valor de puerto incorrecto.",
            "updatedns_error" => "Error al actualizar los registros de DNS.",
            "bad_priority" => "Valor de prioridad incorrecto.",
            "bad_ttl" => "Valor TTL incorrecto.",
            "action_failed" => "La acción falló.",
            "dns_records_updated" => "Registros DNS actualizados correctamente."
        )
    );

    protected $activate = 0;

    /*
     * please REMOVE ALL UNNECESARRY COMMANDS
     */
    protected $commands = array('Register', 'Transfer', 'Renew', 'ContactInfo', 'DNSManagement', 'RegisterNameServers',
                                'EmailForwarding', 'EppCode', 'ResendEmailTransfer');

    /*
     * these are commands available for the clients from client area
     * please REMOVE ALL UNNECESARRY COMMANDS
     */
    protected $clientCommands = array('ContactInfo', 'DNSmanagement', 'RegisterNameServers', 'EmailForwarding',
                                      'EppCode');

    /*
     * Memoization
     */

    protected $reseller_order_id = array();
    protected $reseller_details = array();

    private function usingApiTest()
    {
        return strpos($this->configuration["api_url"]["value"], "test") !== false;
    }

    public function Send($call, $params, $method = 'POST', $valid_error = array())
    {
        $data = "auth-userid=".$this->configuration['username']['value'];
        if (!empty($this->configuration['api_key']['value'])) {
            $data .= "&api-key=" . $this->configuration['api_key']['value'];
        } else {
            $data .= "&auth-password=".$this->configuration['password']['value'];
        }
        if (is_array($params)) {
            foreach ($params as $key => $val) {
                if (is_array($val)) {
                    foreach ($val as $post_elem) {
                        $data .= "&{$key}={$post_elem}";
                    }
                } else {
                    $data .= "&{$key}={$val}";
                }
            }
        }

        $curl = curl_init();

        if ($method == 'POST') {
            curl_setopt($curl, CURLOPT_URL, $this->configuration['api_url']['value'].$call);
            curl_setopt($curl, CURLOPT_POST, true);
            //urlencode($data)
            curl_setopt($curl, CURLOPT_POSTFIELDS, $data);
        } elseif ($method == 'GET') {
            //urlencode($data)
            curl_setopt($curl, CURLOPT_URL, $this->configuration['api_url']['value'].$call."?".$data);
            //error_log ("metodo get");
        }
        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($curl, CURLOPT_TIMEOUT, 90);

        $out = curl_exec($curl);

        curl_close($curl);
        $resp = (array) json_decode($out);  // API returns data encoded in JSON
        $resp_printable = http_build_query($resp);

        if ((array_key_exists('status', $resp) && !($resp['status'] == "ERROR" || $resp['status'] =='error'
        || $resp['status'] =='Failed')) || (!array_key_exists('status', $resp) && !array_key_exists('error', $resp))) {
            $this->logAction(array('action' => "$call",
                'result' => true,
                'change' => $out,
                'error' => false
            ));

            return $resp;

        } else {
            $ret = false;
            if (array_key_exists('msg', $resp)) {
                $resp['message'] = $resp['msg'];
            }
            $error_m = (array_key_exists('message', $resp) ? $resp['message']:"Unknown");

            if (!empty($valid_error) && !empty($resp['message'])) { //tenemos errores considerables como aceptables?
                //comprobar
                if (is_array($valid_error)) {
                    foreach ($valid_error as $e) {
                        if (strrpos($resp['message'], $e) !== false) {
                            $ret = $resp;
                            $error_m = $error_m . " Error accepted";
                            break;
                        }
                    }
                } elseif (strrpos($resp['message'], $valid_error)!==false) {
                    //es directamente un unico string
                    $ret = $resp;
                    $error_m = $error_m . " Error accepted";
                }
            }
            $this->logAction(array('action' => "$call",
                'result' => false,
                'change' => $out,
                'error' => "ERROR: $error_m PARAMETERS: " . print_r($params, true)
            ));
            return $ret;
        }
    }

    private function saveNameServers()
    {
        $default_ns1 = $this->configuration['default_ns1']['value'];
        $default_ns2 = $this->configuration['default_ns2']['value'];

        if (!empty($this->options['ns1'])) {
            $ns1 = $this->options['ns1'];
        } else {
            $ns1 = $default_ns1;
            $this->options['ns1'] = $ns1;
        }

        if (!empty($this->options['ns2'])) {
            $ns2 = $this->options['ns2'];
        } else {
            $ns2 = $default_ns2;
            $this->options['ns2'] = $ns2;
        }


        if (($ns1 ==  $default_ns1 and $ns2 == $default_ns2) or preg_match('/'.$domain.'$/', $ns1)
        or preg_match('/'.$domain.'$/', $ns2)) {
            $ns = array(
                $default_ns1, $default_ns2,
                $this->configuration['default_ns3']['value'], $this->configuration['default_ns4']['value']
            );
            $this->options['ns3'] = $this->configuration['default_ns3']['value'];
            $this->options['ns4'] = $this->configuration['default_ns4']['value'];

        } else {
            $ns = array($ns1, $ns2);
            if (!empty($this->options['ns3'])) {
                push_array($ns, $this->options['ns3']);
            }
            if (!empty($this->options['ns4'])) {
                push_array($ns, $this->options['ns4']);
            }
        }
        $stmt = $this->db->prepare('UPDATE hb_domains SET nameservers= :nameservers WHERE name= :domain');
        $nameservers = implode("|", $ns);
        $domain = $this->options['sld'] . "." . $this->options['tld'];
        $stmt->bindParam(':nameservers', $nameservers, PDO::PARAM_STR);
        $stmt->bindParam(':domain', $domain, PDO::PARAM_STR);
        if (!$stmt->execute()) {
            error_log("error: UPDATE hb_domains SET nameservers=\"$nameservers\" WHERE name=\"$domain\"");
        }
        return $ns;
    }

    public function Register()
    {
        //Validation
        $domain = $this->options['sld'] . "." . $this->options['tld'];
        # error_log(
        #     "#############"
        #     . "       ".print_r($this->options, true)
        # );

        if (strpos($domain, chr(207)) !== false and in_array($this->options['tld'], array('com', 'net', 'name'))) {
            $this->addError(
                'Character &#962; not supported for .com, .net and .name registrations|Carácter &#962;'
                . 'no soportado en registros .com, .net y .name'
            );
            return false;
        }

        if (strpos($domain, chr(195)) !== false and in_array($this->options['tld'], array('de'))) {
            $this->addError(
                'Character &#223; not supported for .de registrations|Carácter &#223; no soportado en registros .de'
            );
            return false;
        }

        $ns = $this->saveNameServers();

        if (!(Utils::validateDomain($domain)
              && Utils::validateDomain($this->options['ns1'])
              && Utils::validateDomain($this->options['ns2']))) {
            $this->addError($this->lang['english']['error_register']."|".$this->lang['spanish']['error_register']);
            return false;
        }

        $protect = $this->options['idprotection'] == '1' ? 'true' : 'false';

        $id = $this->addContact();
        if ($this->options['tld'] == 'es' and !empty($this->options['ext']['es_form_juridica'])
            and $this->options['ext']['es_form_juridica']!='1') {
            $billing = $this->addContact(true);
        } else {
            $billing = $id;
        }

        if (empty($id)) {
            $this->addError($this->lang['english']['register_error3']."|".$this->lang['spanish']['register_error3']);
            $this->error_domain_mail(
                '[HOSTBILL] Fallo en registro dominios',
                "En crear contacto:" . $domain
            );
            error_log($this->lang['english']['register_error3'] . ": no id");
            return false;
        }
        if (empty($billing)) {
            $this->addError($this->lang['english']['register_error3']."|".$this->lang['spanish']['register_error3']);
            $this->error_domain_mail(
                '[HOSTBILL] Fallo en registro dominios',
                "En crear contacto para billing/admin/tech:" . $domain
            );
            error_log($this->lang['english']['register_error3'] . ": billing");
            return false;
        }

        $params = array(
            'domain-name'=> $domain,
            'years' => $this->options['numyears'],
            'ns' => $ns,
            'customer-id' => $this->getCustomerId(),
            'reg-contact-id' => $id[0],
            # Para algunos tld se ponen a -1 los contactos de billing, admin y tech
            # //http://manage.resellerclub.com/kb/answer/752
            'admin-contact-id' => in_array($this->options['tld'], array('eu', 'uk', 'nz', 'ru')) ? "-1" : $billing[0],
            'tech-contact-id' => in_array($this->options['tld'], array('eu', 'uk', 'nz', 'ru')) ? "-1" : $billing[0],
            'billing-contact-id' => in_array($this->options['tld'], array('eu', 'uk', 'nz', 'ru', 'ca', 'nl')) ? "-1" : $billing[0],
            'invoice-option' => 'NoInvoice',
            'protect-privacy' => $protect,
        );

        // Añadimos código de idioma para dominios IDN
        if (strpos(strtolower($domain), 'xn--') === 0) {
            require_once(MAINDIR . 'includes/modules/Domain/idn_languages.php');
            $client_language = strtolower($this->client_data['language']);
            $idn_language_codes_tld = isset($idn_language_codes[$this->options['tld']])
                ? $idn_language_codes[$this->options['tld']]
                : null;

            if (!empty($idn_language_codes_tld) and is_array($idn_language_codes_tld)) {
                $idn_language_code = isset($idn_language_codes_tld[$client_language])
                    ? $idn_language_codes_tld[$client_language]
                    : array_shift(array_values($idn_language_codes_tld));
            } elseif (!empty($idn_language_codes_tld) and is_string($idn_language_codes_tld)) {
                $idn_language_code = $idn_language_codes_tld;
            } else {
                $idn_language_code = "es"; // y que sea lo que 'reseller club' quiera ...
            }

            $params = $this->addAttribute('idnLanguageCode', $idn_language_code, $params);
        }

        if ($this->options['tld'] == 'asia') {
            $params = $this->addAttribute('cedcontactid', $id[0], $params);
        }

        $out = $this->Send('domains/register.json', $params); // get response from the server
        if (!empty($out) and (strtolower($out['status']) == 'success')) {
            $this->addDomain('Active');
            $this->addInfo($this->lang['english']['register_ok']."|".$this->lang['spanish']['register_ok']);
            $this->setresellerinfo($out['entityid']);
            //Activate dns
            $activate = $this->Send('dns/activate.json', array('order-id' => $this->getOrderId()));
            return true;
        } else {
            $this->addError($this->lang['english']['register_error2']."|".$this->lang['spanish']['register_error2']);
            $this->error_domain_mail(
                '[HOSTBILL] Fallo en registro dominios',
                'En añadir dominio: ' . $domain
            );
            error_log($this->lang['english']['register_error2'] . ": final");
            return false;
        }
    }

    private function getresellerinfo($domain = "")
    {
        $domain = $domain ? $domain : $this->options['sld'].".".$this->options['tld'];

        if (strrpos($domain, 'xn--')!==false) {
            $domain = idn_to_utf8($domain);
        }
        $stmt = $this->db->prepare(
            "SELECT e.* FROM hb_domains d "
            . "INNER JOIN gigas_domains_extra e ON d.id=e.id "
            . "WHERE d.name= ?"
        );

        $res = $stmt->execute(array($domain));
        if ($stmt->rowCount()>1) {
            $this->error_domain_mail(
                "[HOSTBILL] dominio $domain repetido!!! REVISAR!!",
                "Existe un dominio repetido en la base de datos. Buscar por $domain"
            );
            $this->addError("Domain duplicated|Dominio duplicado");
            return false;
        }
        $row = array();
        if ($res) {
            $row = $stmt->fetch(PDO::FETCH_ASSOC);
            $stmt->closeCursor();
        } else {
            $errmsg = $stmt->errorInfo();
            if ($errmsg[0] != '00000') {
                error_log(print_r($errmsg, true));
            }
        }
        return $row;
    }

    private function delresellerinfo($domain = "")
    {
        $domain = $domain ? $domain : $this->options['sld'].".".$this->options['tld'];

        if (strrpos($domain, 'xn--')!==false) {
            $domain = idn_to_utf8($domain);
        }


        $stmt = $this->db->prepare("DELETE FROM gigas_domains_extra WHERE id=(SELECT id FROM hb_domains WHERE name= ?)");
        return $stmt->execute(array($domain));
    }

    private function setresellerinfo($reseller_id, $expiry_stamp = "", $domain = "")
    {
        $domain = $domain ? $domain : $this->options['sld'].".".$this->options['tld'];

        if (strrpos($domain, 'xn--')!==false) {
            $domain = idn_to_utf8($domain);
        }

        $stmt = $this->db->prepare("SELECT d.id FROM hb_domains d WHERE d.name= ?");
        $stmt->execute(array($domain));
        if ($stmt->rowCount()>1) {
            $this->error_domain_mail(
                "[HOSTBILL] dominio $domain repetido!!! REVISAR!!",
                "Existe un dominio repetido en la base de datos. Buscar por $domain"
            );
            $this->addError("Domain duplicated|Dominio duplicado");
            return false;
        }
        $idcol = $stmt->fetch(PDO::FETCH_COLUMN);
        $stmt->closeCursor();
        $id = $idcol;
        $fields = "id, reseller_id";
        $values = ":id, :reseller_id";
        $value_update = "reseller_id= :reseller_id";
        if (!empty($expiry_stamp)) {
            $expiry_date = date('Y-m-d H:i:s', $expiry_stamp);
            $fields = $fields.", reseller_expiry";
            $values = $values.", :expiry_date";
            $value_update = $value_update.", reseller_expiry= :expiry_date";
        }
        $q = "INSERT INTO gigas_domains_extra ($fields) VALUES ($values) ON DUPLICATE KEY UPDATE $value_update";
        $stmt = $this->db->prepare($q);
        $stmt->bindParam(':reseller_id', $reseller_id, PDO::PARAM_INT);
        $stmt->bindParam(':id', $id, PDO::PARAM_INT);
        if (!empty($expiry_stamp)) {
            $stmt->bindParam(':expiry_date', $expiry_date, PDO::PARAM_STR);
        }
        $res = $stmt->execute();
        $errmsg = "";
        if (!$res) {
            $errmsg = $stmt->errorInfo();
            if (intval($errmsg[0]) != '0') {
                error_log(print_r($errmsg, true));
            } else {
                //falso negativo
                $res = true;
            }
        }
        $this->logAction(array('action' => "SetResellerInfo",
            'result' => $res,
            'change' => $q,
            'error' => print_r($errmsg, true)
        ));
    }

    protected function setAsPDR($domain = "")
    {
        $domain = $domain ? $domain : $this->options['sld'].".".$this->options['tld'];

        $stmt = $this->db->prepare("SELECT d.id FROM hb_domains d WHERE d.name= ?");
        $stmt->execute(array($domain));
        if ($stmt->rowCount()>1) {
            $this->error_domain_mail(
                "[HOSTBILL] dominio $domain repetido!!! REVISAR!!",
                "Existe un dominio repetido en la base de datos. Buscar por $domain"
            );
            $this->addError("Domain duplicated|Dominio duplicado");
            return false;
        }
        $id = $stmt->fetch(PDO::FETCH_COLUMN);
        $stmt->closeCursor();

        $stmt = $this->db->prepare(
            "INSERT INTO gigas_domains_extra (id, from_pdr) VALUES (?, 1) ON DUPLICATE KEY UPDATE from_pdr=1"
        );
        $res = $this->db->execute(array($id));
        if (!$res) {
            $errmsg = $stmt->errorInfo();
            if ($errmsg[0] != '00000') {
                error_log(print_r($errmsg, true));
            }
        }
        $this->logAction(array('action' => "SetAsPDR",
            'result' => $res,
            'change' => $q,
            'error' => print_r($errmsg, true)
        ));
    }

    public function getOrderId($domain = "", $saveondb = false)
    {
        $domain = $domain ? $domain : $this->options['sld'].".".$this->options['tld'];

        if (!empty($this->reseller_order_id) and !empty($this->reseller_order_id[$domain])) {
            return $this->reseller_order_id[$domain];
        }

        $res = array();
        // solicitamos el order id
        $out = $this->askForOrder($domain);

        if ($out === false || $out == -1) {
            $row = $this->getresellerinfo($domain);
            if (!empty($row)) {
                $this->reseller_order_id[$domain] = $row['reseller_id'];
                return $this->reseller_order_id[$domain];
            } else {
                //error, notificar y salir
                $this->addError(
                    "Couldn't synchronize domain id for $domain"
                    . "|No se pudo sincronizar el id de dominio para $domain"
                );
                //mail();
                return null;
            }
        }
        $oid = $out[0];
        if ($saveondb) {
            $this->setresellerinfo(intval($oid), "", $domain);
        }
        $this->reseller_order_id[$domain] = $oid;
        return $oid;
    }

    protected function askForOrder($domain = "")
    {
        $params = array('domain-name'=>$domain);
        // solicitamos el order id
        $out = $this->Send('domains/orderid.json', $params, 'GET', "Website doesn't exist");
        if ($out===false) {
            //retry
            $out = $this->Send('domains/orderid.json', $params, 'GET', "Website doesn't exist");
        }
        if (!is_array($out) || !array_key_exists('status', $out)) {
            //false or orderid
            return $out;
        } else {
            //website doesn't exist
            return -1;
        }
    }

    protected function getDomainDetails($domain_name, $refresh_data = false)
    {
        if (!empty($this->reseller_details)
            and !empty($this->reseller_details[$domain_name])
            and !$refresh_data) {
            return $this->reseller_details[$domain_name];
        }
        $order_id = $this->getOrderId($domain_name);
        if (empty($order_id) or !$order_id) {
            error_log("Domain $domain_name couldn't be found on resellers");
            return array();
        }
        $domain_details = null;
        $retrys = 3;
        while ($retrys > 0 and empty($domain_details)) {
            $params = array(
                'order-id' => $order_id,
                'options' => 'All',
            );

            $domain_details = $this->Send('domains/details.json', $params, 'GET');
            $retrys--;
        }
        if (empty($domain_details) or !$domain_details) {
            return array();
        } else {
            $this->reseller_details[$domain_name] = $domain_details;
        }
        return $this->reseller_details[$domain_name];
    }

    private function sendTicketToUser($hbuser, $template, $replace_this, $replace_with)
    {
        $kUser = new KUser;
        $user = $kUser->addFilter('email', $hbuser['email'])->get();

        if (empty($user)) {
            $fullname = $hbuser['firstname'] . ' ' . $hbuser['lastname'];
            $usergroupid = 26; // Karma0
            $params = array(
                'fullname' => $fullname,
                'usergroupid' => $usergroupid,
                'password' => $hbuser['password'],
                'email' => $hbuser['email'],
                'phone' => $hbuser['phonenumber'],
            );
            $user = $kUser->post($params);
        }

        if (empty($user)) {
            error_log("no hay user para enviar un ticket");
            return false;
        }

        $departmentId = 8; // Dpto Licencias
        $ticketStatusId = 74; // Dominios
        $ticketPriorityId = 2; // Normal
        $ticketTypeId = 4; // Ticket

        $sql = "SELECT subject, message FROM hb_email_templates tpl INNER JOIN hb_language lng ";
        $sql.= "ON tpl.language_id = lng.id WHERE tplname = ? AND lng.name = ? LIMIT 1";
        $stmt = $this->db->prepare($sql);
        $stmt->execute(array($template, $hbuser['language']));
        $mail_tpl = $stmt->fetch(PDO::FETCH_ASSOC);

        if (!$mail_tpl) {
            $stmt = $this->db->prepare("SELECT subject, message FROM hb_email_templates WHERE tplname = ? LIMIT 1");
            $stmt->execute(array($template));
            $mail_tpl = $stmt->fetch(PDO::FETCH_ASSOC);
        }

        $stmt->closeCursor();

        $subject = str_replace($replace_this, $replace_with, $mail_tpl['subject']);
        $contents = str_replace($replace_this, $replace_with, $mail_tpl['message']);

        $t = new KTicket;
        $params = array(
            'subject' => $subject,
            'fullname' => 'Gigas Support',//$user[0]['fullname'],
            'email' => $hbuser['email'],
            'contents' => $contents,
            'departmentid' => $departmentId,
            'ticketstatusid' => $ticketStatusId,
            'ticketpriorityid' => $ticketPriorityId,
            'tickettypeid' => $ticketTypeId,
            'autouserid' => 1,
        );

        $ticket = $t->post($params);

        if (empty($ticket)) {
            $msg = "Fallo al crear un ticket para " . $hbuser['email']
                . ", por favor, reenvialo de manera manual desde Mapp. Los parametros fueron: "
                . print_r($params, true);
            mail(
                $this->configuration['mail_domain_notify']['value'],
                "Fallo al crear un ticket de transfer de dominio",
                $msg
            );
            return false;
        }
        return true;

    }

    protected function sendTicketOnPDRTransfer()
    {
        $domain = $this->options['sld'].".".$this->options['tld'];

        $q = "select cd.firstname,cd.lastname,cd.phonenumber,ca.email,ca.password,cd.language "
            . "from hb_client_details cd INNER JOIN hb_client_access ca ON cd.id=ca.id where cd.id= ?";
        $stmt = $this->db->prepare($q);
        $res = $stmt->execute(array($this->options['id']));
        if ($res === false) {
            return false;
        }
        $hbuser = $stmt->fetch(PDO::FETCH_ASSOC);
        $stmt->closeCursor();

        $replace_this = array('%(domain_name)s','%(firstname)s');
        $replace_with = array($domain, $hbuser['firstname']);

        return $this->sendTicketToUser($hbuser, "domain:pdr_transfer", $replace_this, $replace_with);
    }

    protected function sendTicketOnTransferComplete($userid)
    {
        $domain = $this->options['sld'].".".$this->options['tld'];

        $stmt = $this->db->prepare(
            "select cd.firstname,cd.lastname,cd.phonenumber,ca.email,ca.password,cd.language from hb_client_details cd "
            . "INNER JOIN hb_client_access ca ON cd.id=ca.id where cd.id= ?"
        );
        $res = $stmt->execute(array($userid));
        if ($res === false) {
            return false;
        }
        $hbuser = $stmt->fetch(PDO::FETCH_ASSOC);
        $stmt->closeCursor();

        $replace_this = array('%(domain_name)s','%(firstname)s');
        $replace_with = array($domain, $hbuser['firstname']);

        return $this->sendTicketToUser($hbuser, "domain:transfer_completed", $replace_this, $replace_with);
    }

    # metodo que llama hostbill para sincronizar
    # http://wiki.hostbillapp.com/index.php?title=Domain_Modules#Synchronize
    # afecta a transfer (para comprobar que un pending transfer ya no es asi) y a renew
    # puede que afecte a otros tambien
    #
    public function synchInfo()
    {
        $res=array();
        $domain = $this->options['sld'].".".$this->options['tld'];
        $transfercompleted = false;
        $stmt = $this->db->prepare("SELECT * FROM hb_domains WHERE name= ? AND status!='Cancelled'");
        $r = $stmt->execute(array($domain));
        if ($stmt->rowCount() > 1) {
            $this->error_domain_mail(
                "[HOSTBILL] dominio $domain repetido!!! REVISAR!!",
                "Existe un dominio repetido en la base de datos. Buscar por $domain"
            );
            return $res;
        }

        $hbdomain = $stmt->fetch(PDO::FETCH_ASSOC);
        $oid = $this->getOrderId($domain, true);
        $_orders = new Orders();
        if (empty($oid)) {
            if ($hbdomain['status']=='Active' && ($this->askForOrder($domain)==-1)) {
            $this->error_domain_mail(
                    "[HOSTBILL] dominio $domain probablemente migrado",
                    "No se ha podido recuperar el order id del dominio $domain que esta marcado como activo en hostbill"
                    . ", por favor, revisalo por si se ha movido a otro proveedor y ajusta el estado como proceda"
                );
            }
            $this->addError("Couldn't find domain to sync|No se pudo encontrar el dominio a sincronizar");
            return $res;
        }

        $out = $this->getDomainDetails($domain);

        if (empty($out)) {
            $this->addError("Couldn't synchronize domain|No se pudo sincronizar el dominio");
            return $res;
        }

        //expiration date
        if (array_key_exists('endtime', $out) && !empty($out['endtime'])) {
            $res['expires'] = date('Y-m-d', $out['endtime']);
        }

        //domain status
        if (array_key_exists('currentstatus', $out) && !empty($out['currentstatus'])) {
            if ($out['currentstatus'] == 'Active') {
                //comprobar si es renew y pending, si no...
                if (!($hbdomain['type']=='Renew' && $hbdomain['status']=='Pending')) {
                    $transfercompleted = ($hbdomain['status']=='Pending Transfer' && $hbdomain['type']=='Transfer');
                    $res['status'] = 'Active';
                }
            } elseif ($out['currentstatus'] == 'Deleted') {
                //ha emigrado a otro reseller
                $res['status'] = 'Cancelled';
                $this->delresellerinfo($domain);
            } elseif ($out['currentstatus'] == 'Pending Delete Restorable') {
                $res['status'] = 'Expired';
                if ($hbdomain['status'] == 'Pending Transfer' && $hbdomain['type'] == 'Transfer') {
                    $transfercompleted = true;
                    $this->error_domain_mail(
                        "[HOSTBILL] dominio $domain expirado al transferir",
                        "El dominio $domain esta marcado como expirado en Resellers con fecha de expiracion en hostbill"
                        . " {$hbdomain['expires']} y en reseller de {$res['expires']}. Pero estaba pendiente de "
                        . "transferencia, por lo que ha sido marcado como expirado y no se renovara"
                    );
                } else {
                    $this->delresellerinfo($domain);
                    $_orders->markAsCancelled($hbdomain['order_id'], false);
                    //Mandar mail por expiracion
                    $this->error_domain_mail(
                        "[HOSTBILL] dominio $domain expirado",
                        "El dominio $domain esta marcado como expirado en Resellers con fecha de expiracion en hostbill"
                        . " {$hbdomain['expires']} y en reseller de {$res['expires']}"
                    );
                }
            } else {
                if ($hbdomain['status'] == 'Active') {
                    //Mandar mail por posible caso extraño
                    $this->error_domain_mail(
                        "[HOSTBILL] dominio $domain con status extraño que deberia ser activo",
                        "El dominio $domain ha recibido esta respuesta al intentar sincronizar:\n"
                        . print_r($out, true) .", por favor, comprueba que todo esta correcto: "
                    );
                }
            }
        }


        //nameservers
        $nss = array();
        for ($i = 1; $i<5; $i++) {
            $key = 'ns'.$i;
            if (array_key_exists($key, $out)) {
                $nss[] = $out[$key];
            }
        }
        if (!empty($nss)) {
            $res['ns'] = $nss;
        }

        //registrar lock
        $res['reglock'] = $this->getRegistrarLock();

        //privacy protection
        if (!empty($out['isprivacyprotected'])) {
            $res['idprotection'] = ($out['isprivacyprotected']=="true");
        }

        if ($this->configuration['synch_dry_run']['value']) {

            $this->logAction(array('action' => "Synchronize",
                'result' => true,
                'change' => "DRY RUN result: ".print_r($res, true)
                                              . "|complete transfer: $transfercompleted|{$hbdomain['order_id']}",
                'error' => ""
            ));

            return array();
        } else {
            if ($transfercompleted===true) {
                $_orders->markAsAccepted($hbdomain['order_id'], 'Domain transfer complete');
                $reseller = $this->getresellerinfo();
                if ($res['status']=='Active' && $reseller['from_pdr']==1) {
                    $this->logAction(array('action' => "Synchronize",
                        'result' => true,
                        'change' => "Domain $domain has moved and needs to be renewed, doing so now",
                        'error' => false
                    ));
                    $this->Renew();
                } elseif ($reseller['from_pdr']==1) {
                    $this->logAction(array('action' => "Synchronize",
                        'result' => true,
                        'change' => "Domain $domain has moved and needs to be renewed, but it came as expired",
                        'error' => false
                    ));
                }
                //enviamos ticket al usuario para avisar de que su transfer esta completo
                if (!$this->sendTicketOnTransferComplete($hbdomain['client_id'])) {
                    $this->logAction(array('action' => "Synchronize",
                        'result' => false,
                        'change' => "Failed sending ticket to user to inform of the transfer complete status",
                        'error' => "hbdomain: " . print_r($hbdomain, true)
                    ));
                }
            }

            $this->logAction(array('action' => "Synchronize",
                'result' => true,
                'change' => "Sync result: ". print_r($res, true)
                                           . "|complete transfer: $transfercompleted|{$hbdomain['order_id']}",
                'error' => ""
            ));
            return $res;
        }
    }

    public function Transfer()
    {
        $domain = $this->options['sld'].".".$this->options['tld'];
        //error_log("DOMAIN:$domain");
        //error_log("options: " . print_r($this->options, true));

        if (!Utils::validateDomain($domain)) {
            $this->addError($this->lang['english']['error_register']."|".$this->lang['spanish']['error_register']);

            return false;
        }

        $ns = $this->saveNameServers();

        if (!empty($this->options['epp_code'])) {
            $eppcode = $this->sanitizeAuthCode($this->options['epp_code']);
        } else {
            $eppcode = null;
        }

        if ($this->options['idprotection'] == '1') {
            $protect = 'true';
        } else {
            $protect = 'false';
        }

        //Validate domain transfer if we are not in test environment
        if (! $this->usingApiTest()) {
            $out2 = $this->Send('domains/validate-transfer.json', array('domain-name' => $domain), 'GET');
            if (!$out2[0]) {
                //$this->addError('Fail at transferring domain|No se puede transferir este dominio');
                $this->logAction(array('action' => "Transfer",
                'result' => false,
                'change' => "Can't transfer as it's invalid",
                'error' => "Invalid domain name: $domain"
                ));
                return false;
            }
        } else {
            $this->logAction(array(
                "action" => "Transfer",
                "result" => false,
                "change" => "ignoring validate transfer call for being in test environment",
                "error" => "OK"
            ));
        }

        $oid = $this->getOrderId($domain);
        if (!empty($oid)) {
            $this->logAction(array('action' => "Transfer",
                'result' => false,
                'change' => "There is an orderid ($oid) for $domain",
                'error' => true
            ));
            $this->addError('Already transferring|Ya se esta transfiriendo');
            return false;
        }

        $id = $this->addContact();
        if ($this->options['tld'] == 'es' and !empty($this->options['ext']['es_form_juridica'])
        and $this->options['ext']['es_form_juridica']!='1') {
            $billing = $this -> addContact(true);
        } else {
            $billing = $id;
        }
        if (empty($id)) {
            $this->addError($this->lang['english']['register_error3']."|".$this->lang['spanish']['register_error3']);
            return false;
        }

        $idn_domain = $this->toPunycode($domain);

        $params = array(
            'domain-name' => $idn_domain,
            'ns' => $ns,
            'customer-id' => $this->getCustomerId(),
            'reg-contact-id' => $id[0],
            # Para algunos tld se ponen a -1 los contactos de billing, admin y tech
            # //http://manage.resellerclub.com/kb/answer/752
            'admin-contact-id' => in_array($this->options['tld'], array('eu', 'uk', 'nz', 'ru')) ? "-1" : $billing[0],
            'tech-contact-id' => in_array($this->options['tld'], array('eu', 'uk', 'nz', 'ru')) ? "-1" : $billing[0],
            'billing-contact-id' =>
            in_array($this->options['tld'], array('eu', 'uk', 'nz', 'ru', 'ca', 'nl')) ? "-1" : $billing[0],
            'invoice-option' => 'NoInvoice',
            'protect-privacy' => $protect
        );
        if (!empty($eppcode)) {
            $params["auth-code"] = $eppcode;
        }

        if (!$this->configuration['transfer_dry_run']['value']) {
            $PDR_message = "The domain $domain is registered by PDR Ltd. d/b/a PublicDomainRegistry.com as a Registrar."
                . " Can't execute a Transfer request for this Domain.";
            $out = $this->Send('domains/transfer.json', $params, 'POST', $PDR_message); // get response from the server
            $pos = strspn($PDR_message ^ $out['error'], "\0");

            if (!empty($out) and (strtolower($out['status']) == 'success')) {

                $this->addDomain('Pending Transfer');
                $this->addInfo($this->lang['english']['transfer_ok']."|".$this->lang['spanish']['transfer_ok']);

                //Activate dns
                $activate = $this->Send('dns/activate.json', array('order-id' => $this->getOrderId()));
                $this->logAction(array('action' => "Transfer",
                    'result' => $activate!=false,
                    'change' => "Activate dns: ".print_r($activate, true),
                    'error' => false
                ));
                $this->setresellerinfo($out['entityid'], '', $domain);

                return true;

            } elseif (strrpos($PDR_message, $out['error'])!==false) {
                $this->addDomain('Pending Transfer');
                //$this->addInfo($this->lang['english']['transfer_ok']."|".$this->lang['spanish']['transfer_ok']);
                $this->setAsPDR();
                $this->sendTicketOnPDRTransfer();
                $this->logAction(array('action' => "Transfer",
                    'result' => false,
                    'change' => "Can't transfer, pending user movement between resellers",
                    'error' => $PDR_message
                ));
                $this->error_domain_mail(
                    "[HOSTBILL] Fallo al iniciar la transferencia del dominio $domain",
                    "El dominio $domain esta registrado en PDR, por favor inicia los tramites para su movimiento."
                );
            } else {
                $this->addError(
                    $this->lang['english']['transfer_error2']." ".$out['error']
                    ."|".$this->lang['spanish']['transfer_error2']." ".$out['error']
                );
                return false;
            }
        }
        $this->logAction(array('action' => "Transfer",
            'result' => true,
            'change' => "DRY RUN params: ".print_r($params, true),
            'error' => "dry run"
        ));
        return false;
    }


    public function Renew()
    {
        $domain = $this->options['sld'].".".$this->options['tld'];

        $q = $this->db->prepare("SELECT expires FROM hb_domains where name=:dom");
        $q->execute(array('dom'=>$domain));
        if ($q->rowCount() > 1) {
            $this->error_domain_mail(
                "[HOSTBILL] dominio $domain repetido!!! REVISAR!!",
                "Existe un dominio repetido en la base de datos. Buscar por $domain"
            );
            $this->addError("Domain duplicated|Dominio duplicado");
            return false;
        }
        $hbexpirydate = $q->fetch(PDO::FETCH_COLUMN);

        //pedimos la fecha a reseller
        /*$par = array(
            'order-id' => $this->getOrderId(),
            'options' => 'OrderDetails'
            );
            $out = $this->Send('domains/details.json', $par, "GET");*/
        $out = $this->getDomainDetails($domain);
        //error_log("respuesta tras el send " . print_r($out, true));
        if ($out!==false && $out!==1 && !(array_key_exists('error', $out)) && array_key_exists('endtime', $out)) {
            $expdate = $out['endtime'];
            if (date('Y-m-d', $expdate)!=$hbexpirydate) {
                $this->addError("Incorrect expiration date|Fecha de expiracion incorrecta");
            }
        } else {
            $this->error_domain_mail(
                "[HOSTBILL] Fallo en renovacion del dominio $domain",
                "Error al buscar los detalles de: $domain\nRespuesta: " . print_r($out, true)
            );
            $this->addError("Dominio $domain no encontrado|Domain $domain not found");
            return false;
        }

        //error_log("expdate es $expdate");
        if (!$this->options['numyears']) {
            $years = '0';
        } else {
            $years = $this->options['numyears'];
        }

        $params = array(
            'order-id' => $this->getOrderId(),
            'years' => $years,
            //'exp-date' => strtotime("+$years year"),
            'exp-date' => $expdate,
            'invoice-option' => 'NoInvoice'
        );
        //error_log("parametros " . print_r($params, true));
        $out = $this->Send('domains/renew.json', $params);          // get response from the server

        if (!empty($out) and (strtolower($out['status']) == 'success')) {
            $this->addPeriod();
            $this->addInfo(
                $this->lang['english']['renew_ok'].' '.$params['years'].' years.'
                ."|".$this->lang['spanish']['renew_ok'].' '.$params['years'].' años.'
            );

            return true;
        } else {
            $this->addError($this->lang['english']['renew_error']."|".$this->lang['spanish']['renew_error']);
            $this->error_domain_mail(
                '[HOSTBILL] Fallo en renovacion del dominio ' . $domain,
                'Error al intentar renovar con ResellersClub: ' . $domain . '\nError: ' . print_r($out, true)
            );

            return true;
        }
    }

    public function getNameServers()
    {
        $query_domain = $this->options['sld'].".".$this->options['tld'];
        $out = $this->getDomainDetails($query_domain, true);

        if (empty($out)) {
            return array();
        }
        $domain = $out['domainname'];
        $i = 1;
        $new_values = array();
        while (isset($out['ns'.$i])) {
            $new_values[] = $out["ns$i"];
            //error_log("ns$i: " . $out["ns$i"]);
            $i++;
        }
        if (preg_match('/\.' . $domain . '$/', $out['ns1'])) {
            // Usa sus nameserver
            $new_values['nameservers'] = array();
            $new_values['ips'] = array();
            foreach ($out['cns'] as $ns_name => $ns_ips) {
                $new_values['nameservers'][] = $ns_name;
                $new_values['ips'][] = $ns_ips[0];
            }
        }
        return $new_values;
    }

    private function getChildNameServers()
    {
        $query_domain = $this->options['sld'].".".$this->options['tld'];
        $domain_details = $this->getDomainDetails($query_domain);

        if (empty($domain_details)) {
            return array();
        }

        $cns = array('nameservers'=>array(), 'ips'=>array());
        foreach ($domain_details['cns'] as $ns_name => $ns_ips) {
            $cns['nameservers'][] = $ns_name;
            $cns['ips'][] = $ns_ips[0];
        }
        return $cns;
    }

    private function validateNS($ns, $nsip, $nstype, $domain)
    {
        var_dump(Utils::validateDomain($ns));
        if (!Utils::validateDomain($ns)) {
            return false;
        } elseif ($nstype == 'mine' and ! preg_match('/\.' . $domain . '$/', $ns)) {
            return false;
        } elseif ($nstype == 'mine' and ! Utils::validateIp($nsip)) {
            return false;
        }
        return true;
    }

    public function updateNameServers()
    {
        $order_id = $this->getOrderId();

        //
        // ÑAPAS NECESARIAS
        //
        // Nos saltamos este paso si estamos bloqueando/desbloqueando el dominio
        // De esta forma queda más limpio en la vista de hostbill y no guardamos
        // cosas que parece que no se van a guardar
        //
        if (isset($this->options['registrarLock'])
        and (intval($this->getRegistrarLock()) == intval($this->options['registrarLock']))) {
            return true;
        }

        //
        // Si estamos protegiendo el dominio => protegemos y salimos
        //
        if (isset($this->options['idprotection'])
        and intval($this->options['idprotection']) != intval($this->details['idprotection'])) {
            return $this->updateIDProtection();
        }

        $domain = $this->options['sld'] . '.' . $this->options['tld'];

        $ns1 = $this->options['ns1'];
        $nsip1 = $this->options['nsip1'];
        $ns2 = $this->options['ns2'];
        $nsip2 = $this->options['nsip2'];
        $ns3 = $this->options['ns3'];
        $nsip3 = $this->options['nsip3'];
        $ns4 = $this->options['ns4'];
        $nsip4 = $this->options['nsip4'];

        //$nstype = $this->options['type'];
        $nstype = "clients";
        if (
            strcmp($ns1, $this->configuration['default_ns1']['value'])==0
            and strcmp($ns2, $this->configuration['default_ns2']['value'])==0) {

            $nstype = "ours";
        } elseif (!empty($nsip1) or !empty($nsip2) or !empty($nsip3) or !empty($nsip4)) {
            $nstype = "mine";
        }
        $ns = array();
        $cns = array(
            'nameservers' => array($ns1, $ns2, $ns3, $ns4),
            'ips' => array($nsip1, $nsip2, $nsip3, $nsip4),
        );
        $old_cns = $this->getChildNameServers();

        //
        // Validation
        //
        if (!empty($ns1)) {
            $ns[] = $this->toPunycode($ns1);
            if (! $this->validateNS($ns1, $nsip1, $nstype, $domain)) {
                $this->addError('First nameserver not valid|Primer nameserver no válido');
                return false;
            }
        }
        if (!empty($ns2)) {
            $ns[] = $this->toPunycode($ns2);
            if (! $this->validateNS($ns2, $nsip2, $nstype, $domain)) {
                $this->addError('Second nameserver not valid|Segundo nameserver no válido');
                return false;
            }
        }
        if (!empty($ns3)) {
            $ns[] = $this->toPunycode($ns3);
            if (! $this->validateNS($ns3, $nsip3, $nstype, $domain)) {
                $this->addError('Third nameserver not valid|Tercer nameserver no válido');
                return false;
            }
        }
        if (!empty($ns4)) {
            $ns[] = $this->toPunycode($ns4);
            if (! $this->validateNS($ns4, $nsip4, $nstype, $domain)) {
                $this->addError('Forth nameserver not valid|Cuarto nameserver no válido');
                return false;
            }
        }
        if (count($ns) < 2) {
            $this->addError('You must have at least two nameserver|Necesitas configurar al menos 2 nameserver');
            return false;
        }

        die("hola");
        //
        // Creamos/modificamos los child name server en caso de que así lo solicite el cliente
        //
        if ($nstype == 'mine') {
            foreach ($cns['nameservers'] as $pos => $ns_name) {
                $nsip = $cns['ips'][$pos];
                if (!isset($old_cns['nameservers'][$pos])) {
                    if (!empty($ns_name) and !empty($nsip)) {
                        $this->Send(
                            'domains/add-cns.json',
                            array('order-id' => $order_id, 'cns' => $this->toPunycode($ns_name), 'ip' => array($nsip))
                        );
                    }
                    continue;
                }

                $old_ns_name = $old_cns['nameservers'][$pos];
                $old_nsip = $old_cns['ips'][$pos];
                if ($ns_name == $old_ns_name and $old_nsip != $nsip) {
                    $this->Send(
                        'domains/modify-cns-ip.json',
                        array('order-id' => $order_id,
                            'cns'=> $this->toPunycode($ns_name),
                            'old-ip' => $old_nsip, 'new-ip' => $nsip)
                    );
                    unset($old_cns['nameservers'][$pos]);
                } elseif ($ns_name != $old_ns_name and !empty($old_nsip) and !empty($ns_name)) {
                    $this->Send(
                        'domains/modify-cns-name.json',
                        array('order-id' => $order_id,
                        'old-cns'=> $this->toPunycode($old_ns_name),
                        'new-cns' => $this->toPunycode($ns_name))
                    );
                    unset($old_cns['nameservers'][$pos]);
                } elseif (!empty($ns_name) and !empty($nsip)) {
                    $this->Send(
                        'domains/add-cns.json',
                        array('order-id' => $order_id, 'cns' => $this->toPunycode($ns_name), 'ip' => array($nsip))
                    );
                } else {
                    #por aqui pasa cuando ha vaciado un campo de nameserver
                    continue;
                }
            }
        }

        //
        // Modificamos los name server
        //
        $out = $this->Send('domains/modify-ns.json', array('order-id' => $order_id, 'ns' => $ns));
        if (empty($out) or (strtolower($out['status']) != 'success')) {
            $this->addError('Action failed|Acción incorrecta');
            return false;
        }

        //
        // Y para terminar borramos los child name server que sobran
        //
        foreach ($old_cns['nameservers'] as $pos => $old_ns_name) {
            $old_nsip = $old_cns['ips'][$pos];
            $out = $this->Send(
                'domains/delete-cns-ip.json',
                array('order-id' => $order_id, 'cns' => $this->toPunycode($old_ns_name), 'ip' => $old_nsip)
            );
        }

        //
        // Fin
        //
        $this->addInfo('Nameservers has been updated|Nameservers actualizados');
        return true;

    }

    /*
     * (OPTIONAL) public function getContactInfo():array.
     * return array with the structure like in example below
     *
     */

    public function getContactInfo()
    {
        $contact_id = $this->getContactId();

        $params = array(
            'contact-id' => $contact_id,
        );

        $out = $this->Send('contacts/details.json', $params, 'GET');

        if ($out) {
            $result = array('firstname' => $out['name'],
                'companyname' => $out['company'],
                'email' => $out['emailaddr'],
                'address1' => $out['address1'],
                'city' => $out['city'],
                'state' => $out['state'],
                'postcode' => $out['zip'],
                'country' => $out['country'],
                'phonenumber' => $out['telno'],
            );
            return $result;
        } else {
            //$this->addError('Unable to get contact info.|No ha sido posible obtener la info de contacto');
            return false;
        }
    }


    public function updateContactInfo()
    {
        $pass = true;

        //Validation
        if (!Utils::validateNameRequired($this->options['firstname'])) {
            $pass = false;
            $this->addError('Invalid firstname|nombre no válido');
        }
        if (!Utils::validateName($this->options['lastname'])) {
            $pass = false;
            $this->addError('Invalid lastname|apellido no válido');
        }
        if (!Utils::validateNameRequired($this->options['companyname'])) {
            $pass = false;
            $this->addError('Invalid companyname|empresa no válida');
        }
        if (!Utils::validateEmail($this->options['email'])) {
            $pass = false;
            $this->addError('Invalid email|email no válido');
        }
        if (!Utils::validateNameRequired($this->options['address1'])) {
            $pass = false;
            $this->addError('Invalid address1|dirección no válida');
        }
        if (!Utils::validateNameRequired($this->options['city'])) {
            $pass = false;
            $this->addError('Invalid city|ciudad no válida');
        }
        if (!Utils::validatePostCode($this->options['postcode'])) {
            $pass = false;
            $this->addError('Invalid postcode|código postal no válido');
        }
        if (!Utils::validatePhone($this->options['phonenumber'])) {
            $pass = false;
            $this->addError('Invalid phone|teléfono no válido');
        }
        if (!Utils::validateNameRequired($this->options['country'])) {
            $pass = false;
            $this->addError('Invalid country|país no válido');
        }

        if (!Utils::validateName(strlen($this->options['address2']))) {
            $pass = false;
            $this->addError('Invalid address2|linea2 de dirección no válida');
        }

        if ($pass === false) {
            return false;
        }

        /**
           modificamos el contacto
           si el TLD no soporta modificar un contacto creamos uno nuevo y lo reasignamos
         */
        $tlds_non_modifiable = array('es');

        if (in_array($this->options['tld'], $tlds_non_modifiable) == false) {
            // el TLD permite modificar contactos
            $params = array(
                'name' => $this->options['firstname']."+".$this->options['lastname'],
                'company' => $this->options['companyname'],
                'email' => urlencode($this->options['email']),
                'address-line-1' => $this->options['address1'],
                'city' => $this->options['city'],
                'state' => $this->options['state'],
                'zipcode' => $this->options['postcode'],
                'phone-cc' => '0', //TODO get the phone-cc by country
                'phone' => $this->options['phonenumber'],
                'country' => $this->options['country'],
                'address-line2' => $this->options['address2'],
                'contact-id' => $this->getContactId()
            );
            $call = 'contacts/modify.json';

            $out = $this->Send($call, $params);
        } else {
            //el TLD no permite modificar contactos, anadimos uno nuevo...
            $query_domain = $this->options['sld'].".".$this->options['tld'];
            $registrantContactId =  $this->getDomainDetails($query_domain, true)["registrantcontactid"];

            $out = $this->addContact($this->options['tld'] == 'es', true);
            if ($out != null) {
                $newContactId = $out[0];

                //...y se lo reasignamos al dominio
                $params = array(
                    'order-id' => $this->getOrderId(),
                    'reg-contact-id'     => $registrantContactId,  //intocable en los .es
                    'admin-contact-id'   => $newContactId,
                    'tech-contact-id'    => $newContactId,
                    'billing-contact-id' => $newContactId,
                );

                $call = 'domains/modify-contact.json';

                $out = $this->Send($call, $params);
            }
        }

        if ($out) {
            $this->addInfo('Contact Info has been updated|Info de contacto actualizada');
        } else {
            $this->addError('Action failed|Error al actualizar contactos');
        }

        return (bool) $out;
    }

    public function getEmailForwarding()
    {
    }

    public function updateEmailForwarding()
    {
        if (!preg_match("/^[_\.0-9a-zA-Z\-\=ñÑ]+$/i", $this->options['newForwardAddress'])) {
            $this->addError($this->lang['english']['bad_html']."|".$this->lang['spanish']['bad_html']);

            return false;
        }

        $params = array(
            'domain-name'=> $this->options['sld'].".".$this->options['tld'],
            'value'=> 'ASPMX.L.GOOGLE.COM',
            'priority' => '1'
        );
        $url = 'dns/manage/add-mx-record.json';

        $params['ttl'] = 14400;
        $out = $this->Send($url, $params);

        $url = 'dns/manage/add-txt-record.json';
        $params = array(
            'domain-name'=> $this->options['sld'].".".$this->options['tld'],
            'value'=> $this->options['newForwardAddress']
        );

        $params['ttl'] = 14400;
        $out = $this->Send($url, $params);

        if ($out) { // SUCCESS !
            $this->addInfo($this->lang['english']['email_done']."|".$this->lang['spanish']['email_done']);
            return true;
        } else {
            $this->addError($this->lang['english']['email_failed']."|".$this->lang['spanish']['email_failed']);
            return false;
        }
    }

    /*
     * EXTENDED FUNCTIONALITY
     */

    private function mergeResults($arr1, $arr2){
        $out = $arr2;
        foreach ($arr1 as $i => $v) {
            if (is_numeric($i) == true) {
                $out[] = $v;
            }
        }
        return $out;
    }

    private function getAllDNSRecordsOfType($domain, $record_type) {
        $records = array();
        $page_num = 1;
        $params = array(
            'domain-name' => $domain,
            'type' => $record_type,
            'no-of-records' => '50',
            'page-no' => (string)$page_num
        );
        $continue = true;
        $records_final = array();
        while ($page_num < 20 and $continue) {
            $params['page-no'] = (string)$page_num;
            $out = $this->Send('dns/manage/search-records.json', $params, 'GET');
            $page_num += 1;
            $records_final = $this->mergeResults($records_final, $out);
            if (count($out) < 49) {
                $continue = false;
            }
        }
        if ($page_num >= 20) {
            error_log("getAllDNSRecordsOfType might be in a infinite loop");
        }
        return $records_final;
    }

    public function getDNSManagement()
    {
        //Activate dns
        $activate = $this->Send('dns/activate.json', array('order-id' => $this->getOrderId()));
        $domain = $this->options['sld'].".".$this->options['tld'];

        /* $params = array( */
        /*     'domain-name' => $domain, */
        /*     'type' => 'A', */
        /*     'no-of-records' => '50', */
        /*     'page-no' => '1' */
        /* ); */

        $records = array("A", 'AAAA', 'CNAME', 'MX', 'NS', 'TXT', 'SRV');
        /* $out = $this->Send('dns/manage/search-records.json', $params, 'GET'); */
        /* $out_final[0] = $out; */
        $out_final = [];
        $cont = 0;

        foreach ($records as $record) {
            $out_aux = $this->getAllDNSRecordsOfType($domain, $record);
            /* $params['type'] = $record; */
            /* $out_aux = $this->Send('dns/manage/search-records.json', $params, 'GET'); */

            if ($out_aux) {

                $out_final[$cont] = $out_aux;
                $cont += 1;
            }
        }
        //error_log("=-=--=-=-=-=-=-=-=-=-=" . print_r($out_final, true));
        $result = array();
        $cont = 0;

        foreach ($out_final as $elem_out) {
            foreach ($elem_out as $key => $elem) {
                $elemento = (array) $elem;
                if (array_key_exists('host', $elemento)) {
                    $hb_elem = array (
                        "hostname"=>$elemento["host"],
                        "priority"=>$elemento["priority"],
                        "address"=>$elemento["value"],
                        "recordtype"=>$elemento["type"],
                        "ttl"=>$elemento["timetolive"]
                    );
                    if (isset($elemento["weight"])) {
                        $hb_elem["weight"] = $elemento["weight"];
                    }
                    if (isset($elemento["port"])) {
                        $hb_elem["port"] = $elemento["port"];
                    }

                    /*if ($elemento['type'] == 'MX') {
                        $array['hosts'][] = array('hostname' => $elemento['host'],
                            'address' => $elemento['priority']." ".$elemento['value'],
                            'recordtype' => $elemento['type']
                        );
                    } elseif ($elemento['type'] == 'SRV') {
                        $array['hosts'][] = array('hostname' => $elemento['host'],
                            'address' => $elemento['priority']." ".$elemento["weight"]." ".
                            $elemento["port"]." ".$elemento['value'],
                            'recordtype' => $elemento['type']
                        );
                    } else {
                        $array['hosts'][] = array('hostname' => $elemento['host'],
                            'address' => str_replace("\"", "", $elemento['value']),
                            'recordtype' => $elemento['type']
                        );
                        }*/

                    $array["hosts"][] = $hb_elem;
                }
            }
        }

        $array['records'] = array('A', 'AAAA', 'CNAME', 'MX', 'NS', 'TXT', 'SRV');

        return $array;
    }

    private function autoConfMX()
    {
        $a = $this->options;
        $mailIp = $this->options['ip'];
        $domain = $this->options['sld'] . '.' . $this->options['tld'];
        $subDomain = 'mail';
        $mailDomain = $subDomain . "." . $domain;
        $priority = '60';

        $params = array(
            'domain-name' => $domain,
            'type' => 'A',
            'no-of-records' => 1,
            'page-no' => 1,
            'value' => $mailIp,
            'host' => $subDomain,
        );
        //$salida = $this->Send('dns/manage/search-records.json', $params, 'GET');
        $salida = $this->getAllDNSRecordsOfType($domain, "A");
        if (intval($salida['recsindb']) == 0) {
            $params = array(
                'domain-name' => $domain,
                'value' => $mailIp,
                'host' => $subDomain,
            );
            $params['ttl'] = 14400;
            $salida = $this->Send('dns/manage/add-ipv4-record.json', $params);
            if (strtolower($salida['status']) != 'success') {
                $this->addError(
                    'Server error while adding the required A record. Please contact support'
                    . '|Error al añadir el registro A requerido. Contacta con soporte'
                );
                return false;
            }
        }
        $params = array(
            'domain-name' => $domain,
            'type' => 'MX',
            'no-of-records' => 1,
            'page-no' => 1,
            'value' => $mailDomain,
        );
        //$salida = $this->Send('dns/manage/search-records.json', $params, 'GET');
        $salida = $this->getAllDNSRecordsOfType($domain, "MX");
        if (intval($salida['recsindb']) == 0) {
            $params = array(
                'domain-name' => $domain,
                'value' => $mailDomain,
                'priority' => $priority,
            );
            $params['ttl'] = 14400;
            $salida = $this->Send('dns/manage/add-mx-record.json', $params);
            if (strtolower($salida['status']) != 'success') {
                $this->addError(
                    'Server error while adding the MX record. Please contact support'
                    . '|Error al añadir el registro MX. Contacta con soporte'
                );
                return false;
            }
        } else {
            $this->addError('MX record already exists|El registro MX ya existe');
            return false;
        }
        $this->addInfo('DNS has been updated|Las DNS han sido actualizadas');
        return true;
    }

    protected function jsMessage($translation_index, $extra_string = "", $is_error = false)
    {
        $eng = $this->lang['english'][$translation_index];
        if (empty($eng)) {
            $eng = $translation_index;
        }
        $spa = $this->lang['spanish'][$translation_index];
        if (empty($spa)) {
            $spa = $translation_index;
        }

        $msg = "$eng $extra_string|$spa $extra_string";
        if ($is_error) {
            $this->addError($msg);
        } else {
            $this->addInfo($msg);
        }
    }

    protected function jsError($translation_index, $extra_string = "")
    {
        $this->jsMessage($translation_index, $extra_string, true);
    }

    protected function resellerCall($action, $record_type)
    {
        $action = strtolower($action);
        switch($record_type) {
            case 'A':
                $new_type = "ipv4";
                break;
            case 'AAAA':
                $new_type = "ipv6";
                break;
                // el resto funcionan igual todos pero asi comprobamos que solo estan en los del grupo
            case 'MX':
            case 'NS':
            case 'TXT':
            case 'SRV':
            case 'CNAME':
                $new_type = strtolower($record_type);
                break;
            default:
                $this->jsError("bad_record", $record_type);
                return false;
        }
        return "dns/manage/$action-$new_type-record.json";
    }

    protected function validateDNSrecords(
        $domain,
        $record_type,
        $address,
        $hostname,
        $ttl = 14400,
        $priority = 0,
        $weight = 0,
        $port = 0
    ) {

        if ($ttl < 7200) {
            $this->jsError("ttl_low");
            return false;
        }


        $params = array(
            'domain-name' => $domain,
            'value' => $address,
            'host' => $this->toPunycode($hostname),
            'ttl' => $ttl
        );
        //error_log("params inicialmente vale " . print_r($params, true));
        switch($record_type) {
            case 'A':
                if (strlen($hostname) > 0 and !Utils::validateDnsDomain($hostname, $domain)) {
                    $this->jsError('bad_hostname');
                    return false;
                }
                if (!Utils::validateIp($address)) {
                    $this->addError('Bad IP Address|Ip incorrecta');
                    return false;
                }
                break;

            case 'CNAME':
                if (strlen($hostname) > 0 and !Utils::validateDnsDomain($hostname, $domain)) {
                    $this->jsError('bad_hostname');
                    return false;
                }
                if (!Utils::validateDnsDomain($address, $domain)) {
                    $this->jsError('bad_value');
                    return false;
                }
                $params['value'] = $this->toPunycode($address);
                break;

            case 'AAAA':
                if (!Utils::validateIpv6($address)) {
                    $this->addError('bad_ip6_address');
                    return false;
                }
                break;

            case 'MX':
                if (strlen($hostname) > 0 and !Utils::validateDnsDomain($hostname, $domain)) {
                    $this->jsError('bad_hostname');
                    return false;
                }

                if (!Utils::validateDnsDomain($address, $domain)) {
                    $this->jsError('bad_domain');
                    return false;
                }

                # El registro MX está dentro de la zona DNS
                # por lo que nos aseguramos de que existe un registro A para el destino
                if (strpos($address, '.') === false or preg_match('/\.'. $domain .'$/', $address)) {
                    $values = array($address);

                    if (strpos($address, '.' . $domain) !== false) {
                        $values[] = str_replace('.' . $domain, '', $address);
                    }

                    $a_records = array_filter($this->getAllDNSRecordsOfType($domain, "A"), function ($el) {
                        return is_object($el);
                    });

                    $hosts = array_map(function ($el) {
                        return $el->host;
                    }, $a_records);

                    if (!array_intersect($hosts, $values)) {
                        $this->jsError("no_a_record_for_mx");
                        return false;
                    }
                }

                $params['priority'] = $priority;

                break;

            case 'NS':
                if (!Utils::validateDnsDomain($address, $domain)) {
                    $this->jsError('bad_value');

                    return false;
                }
                $params['value'] = $this->toPunycode($address);
                break;

            case 'TXT':
                if (strlen($address) > 300) {
                    $this->jsError('txt_record_too_long');
                    return false;
                }
                $address = urlencode($address);
                $params['value'] = $address;
                break;

            case 'SRV':
                if (!Utils::validateDnsDomain($hostname, $domain)) {
                    $this->jsError('bad_service', $hostname);
                    return false;
                } elseif (!preg_match('/^_[^_]+\._[^_\.]+\.+'. $domain .'+\.$/', $hostname) && !preg_match('/^_[^_]+\._[^_\.]+$/', $hostname)) {
                    $this->jsError('bad_service', $hostname);
                    return false;
                }

                if (!Utils::validateDnsDomain($address, $domain)) {
                    $this->jsError('bad_target');
                    return false;
                }
                if (!is_numeric($weight)) {
                    $this->jsError('bad_weight');
                    return false;
                }
                if (!is_numeric($port)) {
                    $this->jsError('bad_port');
                    return false;
                }
                $params['weight'] = $weight;
                $params['port'] = $port;
                //error_log("port $port vs " . $params["port"]);
                $params['priority'] = $priority;
                break;

            default:
                $this->jsError('updatedns_error');
                return false;
        }
        //error_log("call params: " . print_r($params, true));
        return $params;
    }

    protected function getDNSFormValues($index = "")
    {
        if ($index === "") {
            $pre = "new";
        } else {
            $pre = "";
        }
        $record_type = $this->options[$pre."RecordType".$index];
        /* hostname */
        $hostname = $this->options[$pre."HostName".$index];
        /* address */
        $address = $this->options[$pre.'Address'.$index];

        /* Prioridad */
        $priority = 0;
        if (!empty($this->options[$pre.'Priority'.$index])) {
            $priority = $this->options[$pre.'Priority'.$index];
            if (!is_numeric($priority)) {
                $this->jsError("bad_priority");
                return false;
            }
        }
        /* Time To Live */
        $ttl = 14400;
        if (!empty($this->options[$pre.'TTL'.$index])) {
            $ttl = $this->options[$pre.'TTL'.$index];
            if (!is_numeric($ttl)) {
                $this->jsError("bad_ttl");
                return false;
            }
        }

        /* SRV especific */
        $weight = $this->options[$pre."Weight".$index];
        $port = $this->options[$pre."Port".$index];
        //error_log("options are ::: " . print_r($this->options, true));

        return array($record_type, $hostname, $address, $priority, $ttl, $weight, $port);
    }


    public function updateDNSManagement ()
    {
        if ($this->options['autoconfMX'] == 'true') {
            return $this->autoConfMX();
        }

        $domain = $this->options['sld'].".".$this->options['tld'];

        /* is a valid domain?*/
        if (!Utils::validateDomain($domain)) {
            $this->jsError('updatedns_error');

            return false;
        }

        if (!empty($this->options["newHostName"])) {
            list($record_type, $hostname, $address, $priority, $ttl, $weight, $port) = $this->getDNSFormValues();
            $call = $this->resellerCall("add", $record_type);
            if ($call === false) {
                return false;
            }
            $params = $this->validateDNSrecords($domain, $record_type, $address, $hostname, $ttl, $priority, $weight, $port);
            if ($params === false) {
                return false;
            }
            $out = $this->Send($call, $params);
            if ((!empty($out) and (strtolower($out['status']) == 'success'))) {
                $this->jsMessage('dns_records_updated');
                return true;
            } else {
                $this->jsError('action_failed', $out['msg']);
                return false;
            }
        } else {

            //DELETE or UPDATE!
            $end_result = false;
            foreach($this->options as $op_name => $op_value) {
                if (strpos($op_name, "HostName") === 0) {
                    $i = intval(substr($op_name, 8));

                    if ($this->options["recordDeleted".$i]==1) {
                        $action = "delete";
                    } elseif ($this->options["recordUpdated".$i]==1) {
                        $action = "update";
                    } else {
                        $action = null;
                    }
                    if (!empty($action)) {
                        //$row = str_replace("-{delete}", "", $row);
                        list($record_type, $hostname, $address, $priority, $ttl, $weight, $port) = $this->getDNSFormValues($i);
                        $call = $this->resellerCall($action, $record_type);
                        if ($call === false) {
                            return false;
                        }
                        if ($action == "delete") {
                            $params = array(
                                "domain-name" => $domain,
                                "host" => $hostname,
                                "value" => $this->toPunycode($address),
                            );

                            if (!empty($priority)) {
                                $params['priority'] = $priority;
                            }

                            if ($record_type == 'SRV') {
                                //FIXTHIS
                                $params['weight'] = $weight;
                                $params['port'] = $port;
                            }

                        } else {
                            $params = $this->validateDNSrecords($domain, $record_type, $address, $hostname, $ttl, $priority, $weight, $port);
                            if ($params === false) {
                                return false;
                            }
                            $params["new-value"] = $params["value"];
                            unset($params["value"]);
                            $params["current-value"] = $this->options["OldAddress".$i];

                            if ($record_type == 'SRV' and !preg_match('/' . $domain . '$/', $params['host'])) {
                                $params['host'] .= '.' . $domain;
                            }
                        }

                        $out = $this->Send($call, $params);
                        if (!empty($out) and (strtolower($out['status']) == 'success')) {
                            $this->jsMessage('dns_records_updated', $record_type);
                        } else {
                            $this->jsError('action_failed', $out['msg']);
                            $end_result = false;
                        }

                    }
                }
            }
            return $end_result;
        }

    }

    public function registerNameServer()
    {
        $params = array(
            'sld' => $this->options['sld'],
            'tld' => $this->options['tld'],
            // full nameserver name
            'cns' => $this->toPunycode($this->options['NameServer'].'.'.$this->options['sld'].'.'.$this->options['tld']),
            // nameserver IP
            'ip' => $this->options['NameServerIP'],
            'order-id' => $this->getOrderId()
        );
/*
   domains/add-cns.json?auth-userid=0&api-key=key&order-id=0&cns=ns1.domain.com&ip=0.0.0.0&ip=1.1.1.1
*/
        $out = $this->Send('domains/add-cns.json', $params);
        if ($out) {
            $this->addInfo('Nameserver has been registered|Nameserver registrado');
            return true;
        } else {
            $this->addError('Action failed|Acción fallida');
            return false;
        }
    }


    public function modifyNameServer()
    {

        $params = array(
            'sld' => $this->options['sld'],
            'tld' => $this->options['tld'],
            // nameserver full name
            'cns' => $this->toPunycode($this->options['NameServer'].'.'.$this->options['sld'].'.'.$this->options['tld']),
            // nameserver OLD IP
            'old-ip' => $this->options['NameServerOldIP'],
            // nameserver NEW IP
            'new-ip' => $this->options['NameServerNewIP'],
            'order-id' => $this->getOrderId()
        );

        $params['ttl'] = 14400;
        $out = $this->Send('domains/modify-cns-ip.json', $params);

        if ($out) {
            $this->addInfo('NameServer has been updated');
            return true;
        } else {
            $this->addError('Action failed');
            return false;
        }
    }


    public function deleteNameServer()
    {
        $domain_cns = $this->getChildNameServers();
        $del_cns = $this->toPunycode($this->options['NameServer'].'.'.$this->options['sld'].'.'.$this->options['tld']);
        $del_ip = null;
        // find the ip of the cns
        for ($i=0; $i < count($domain_cns['nameservers']); $i++) {
            if (strcasecmp($domain_cns['nameservers'][$i], $del_cns) == 0) {
                $del_ip = $domain_cns['ips'][$i];
                break;
            }
        }

        if ($del_ip===null) {
            $this->addError("Child name server not found in the system");
            return false;
        }

        $params = array(
            'order-id' => $this->getOrderId(),
            // nameserver full name
            'cns' => $del_cns,
            'ip' => $del_ip
        );

        $out = $this->Send('domains/delete-cns-ip.json', $params);

        if ($out) {
            $this->addInfo('NameServer has been deleted');
            return true;
        } else {
            $this->addError('Action failed');
            return false;
        }
    }

    public function getEppCode()
    {
        $query_domain = $this->options['sld'].".".$this->options['tld'];
        $out = $this->getDomainDetails($query_domain);
        if (empty($out)) {
            return array();
        }

        if ($out && isset($out['domsecret'])) {
            return $out['domsecret'];         /// RETURN EPP CODE - STRING
        }
    }

    public function ResendEmailTransfer()
    {
        $params = array(
            'order-id' => $this->getOrderId()
        );

        $out = $this->Send('domains/resend-rfa.json', $params);

        if ($out) {
            $this->addInfo('Email sent');         /// RETURN EPP CODE - STRING
        } else {
            $this->addInfo('Email not sent');
        }
    }

    //sustituida por la que comprueba contra la tabla gigas_domains_extra
    /*function getOrderId()
    {
        $params = array(
            'domain-name'=> $this->options['sld'].".".$this->options['tld']
        );

        $out = $this->Send('domains/orderid.json', $params, 'GET');

        if ($out['status'] == 'ERROR')
        {
            $out = '0';
        }
        return is_array($out) ? $out[0] : '0';
    }*/

    /**
     * ponemos admincontactid por defecto porque registrantcontactid no vale como referencia
     * en los .es ( ver #3263 )
     */
    public function getContactId($contact = 'admincontactid')
    {
        $query_domain = $this->options['sld'].".".$this->options['tld'];
        $out = $this->getDomainDetails($query_domain);
        if (empty($out)) {
            return array();
        }

        return is_array($out) ? $out[$contact] : '0';
    }

    public function getCustomerId()
    {
        return $this->configuration['customer-id']['value'];
    }

    public function addContact($billingEs = false, $useOptions = false)
    {
        $data = $useOptions ? $this->options : $this->client_data;

        $type = 'Contact';
        $phonecc = '0';

        $tmp = array(
            array('tld' => array('es'), 'type' => 'EsContact', 'phonecc' => '34'),
            array('tld' => array('uk'), 'type' => 'UkContact', 'phonecc' => '44'),
            array('tld' => array('eu'), 'type' => 'EuContact', 'phonecc' => '0'),
            array('tld' => array('co', 'com.co', 'nom.co', 'net.co'), 'type' => 'CoContact', 'phonecc' => '44'),
        );

        $tmp = current(array_filter($tmp, function($a) {
            return in_array($this->options['tld'], $a['tld']);
        }));

        if ($tmp !== false) {
            $type = $tmp['type'];
            $phonecc = $tmp['phonecc'];
        }

        # Quitar símbolos raros en direcciones en dominios com, net, org (ademas de los .es),  es decir, en todos (ticket #650)
        $trans = array('º'=>'o', 'ª'=>'a');
        $address1 = str_replace(
            " ",
            "+",
            preg_replace(
                '/[^0-9a-zA-Z\/\.\,\- ]/',
                '',
                strtr($data['address1'], $trans)
            )
        );

        $params = array(
            'name' => $data['firstname']."+".$data['lastname'],
            'company' => $data['companyname'] ? $data['companyname'] : 'private',
            'email' => urlencode($data['email']),
            'address-line-1' => $address1,
            'city' => $data['city'],
            'state' => $data['state'],
            'zipcode' => $data['postcode'],
            'phone-cc' => $phonecc,
            'phone' => $data['phonenumber'],
            'country' => $data['country'],
            'type'  => $type
        );

        //customer-id
        $params['customer-id'] = $this->getCustomerId();

        $call = 'contacts/add.json';
        $out = $this->Send($call, $params);

        if ($this->options['tld'] == 'es') {

            if (!empty($this->options['ext']['es_identificacion']) &&
            $this->options['ext']['es_identificacion'] != 1) {
                //aparentemente hostbill pone un 1...
                $form_juridica = $this->options['ext']['es_form_juridica'];
                $tipo_id = $this->options['ext']['es_tipo_identificacion'];
                $nif = $this->options['ext']['es_identificacion'];
            } else {
                $form_juridica = "1";
                $tipo_id = $this->options["country"] == "ES" ? "1": "3";
                $nif = $this->client_data["nif"] or $this->client_data["cif"];
                $this->options['ext']['es_identificacion'] = $nif;
            }

            $params = array(
                'contact-id' => $out[0],
                'attr-name1' => 'es_form_juridica',
                'attr-value1' => $form_juridica,
                'attr-name2' => 'es_tipo_identificacion',
                'attr-value2' => $tipo_id,
                'attr-name3' => 'es_identificacion',
                'attr-value3' =>  $nif,
                'product-key' => 'dotes'
            );
            //error_log("parametros de creacion>>>>>>>>>>\n" . print_r($params, true));
            if (empty($params['attr-value1'])) {
                $params['attr-value1'] = '1';
                //apparently it was registered through buying an VPS, we make up the info and store it
                if ($this->client_data['nif']) {
                    $letra_nie = strtoupper(substr($this->client_data['nif'], 0, 1));
                    $nie_transformer = array('X'=>"0", 'Y'=>"1", 'Z'=>"2", 'M'=>"0");
                    if (array_key_exists($letra_nie, $nie_transformer)) {
                        $params['attr-value2'] = '3';
                        $params['attr-value3'] = ($nie_transformer[$letra_nie])
                            . str_pad(substr($this->client_data['nif'], 1), 9, '0', STR_PAD_LEFT);
                        $this->logAction(
                            array(
                                'action' => "$call",
                                'result' => true,
                                'change' => "Cambiando nie para que lo acepten: "
                                . $this->client_data['nif'] . " -> " . $params['attr-value3'],
                                'error' => false
                            )
                        );
                    } else {
                        $params['attr-value2'] = '1'; //nif/cif
                        $params['attr-value3'] = str_pad($this->client_data['nif'], 9, '0', STR_PAD_LEFT);
                    }
                } elseif ($this->client_data['cif']) {
                    $params['attr-value2'] = '1'; //nif/cif
                    $params['attr-value3'] = $this->client_data['cif'];
                }
                $save = array(
                    $params['attr-name1'] => $params['attr-value1'],
                    $params['attr-name2'] => $params['attr-value2'],
                    $params['attr-name3'] => $params['attr-value3'],
                );
                $this->updateExtended($save);//guardamos para que quede constancia
            }
            if ($billingEs and $params['attr-value1']!='1') {
                // En caso de ser un billing contact y que no sea un natural person
                // => reescribimos a natural person con doc type other
                $params['attr-value1'] = 1;
                $params['attr-value2'] = 0;
            }

            $call = 'contacts/set-details.json';
            $out2 = $this->Send($call, $params);
            if ($out2 === false) {
                return null;
            }

        } elseif ($this->options['tld'] == 'us') {
            $params = array(
                'contact-id' => $out[0],
                'attr-name1' => 'purpose',
                'attr-name2' => 'category',
                // check http://manage.resellerclub.com/kb/answer/790 to know what each value means
                'attr-value1' => $this->options['ext']['us_purpose'],
                'attr-value2' => $this->options['ext']['us_category'],
                'product-key' => 'domus'
            );
            /*if ($params['company']!='Private')
            {
                $params['attr-value1'] = 'P1';
                $params['attr-value2'] = 'C32';
                if ($params['country'] != 'US')
                    $params['attr-value2'] = 'C31';
            }*/
            $call = 'contacts/set-details.json';
            $out2 = $this->Send($call, $params);
            if ($out2 === false) {
                return null;
            }
        }
        return $out;
    }

    public function updatePrivacy($id)
    {
        $stmt = $this->db->prepare(
            "UPDATE hb_domains SET idprotection= :id where name= :sld"
        );

        $stmt->bindParam(':id', $id, PDO::PARAM_INT);
        $stmt->bindParam(
            ':sld',
            $this->options['sld'].".".$this->options['tld'],
            PDO::PARAM_STR
        );

        return $stmt->execute();
    }

    public function getRegistrarLock()
    {
        $call = 'domains/locks.json';
        $params = array(
            'order-id' => $this->getOrderId(),
        );
        $out = $this->Send($call, $params, 'GET');

        if (empty($out) || !isset($out['transferlock'])) {
            return false;
        }

        return true;
    }

    public function updateRegistrarLock()
    {
        if ($this->options['registrarLock'] and $this->protectDomain($this->options['registrarLock'])) {
            $this->addInfo('Domain locked|Dominio bloqueado');
            return true;
        } elseif (!$this->options['registrarLock'] and $this->protectDomain($this->options['registrarLock'])) {
            $this->addInfo('Domain unlocked|Dominio desbloqueado');
            return true;
        }
        $this->addError('Error while locking/unlocking domain|Error al bloquear/desbloquear el dominio');
        return false;
    }

    private function protectDomain($lock = true)
    {
        $call = 'domains/enable-theft-protection.json';

        if (!$lock) {
            $call = 'domains/disable-theft-protection.json';
        }

        $params = array(
            'order-id' => $this->getOrderId(),
        );

        $out = $this->Send($call, $params);

        if (!empty($out) and (strtolower($out['status']) == 'success')) {
            return true;
        }
        return false;
    }

    public function getIDProtection()
    {
        $query_domain = $this->options['sld'].".".$this->options['tld'];
        $domain_details = $this->getDomainDetails($query_domain);
        if (empty($domain_details)) {
            return array();
        }
        if (strtolower($domain_details['isprivacyprotected']) == 'false') {
            return false;
        }
        return true;
    }

    public function updateIDProtection()
    {
        $order_id = $this->getOrderId();
        $idprotection = $this->options['idprotection'];
        $params = array(
            'order-id'=>$order_id,
            'protect-privacy'=> (($this->options['idprotection'] == 1)?'true':'false'), 'reason' => 'Yes'
        );
        $this->updatePrivacy($this->options['idprotection']);
        $out = $this->Send('domains/modify-privacy-protection.json', $params);
        if (!empty($out) and (strtolower($out['status']) == 'success')) {
            $this->addInfo('Protect Privacy Updated|Protección de privacidad actualizada');
            return true;
        }
        $this->addError('Error while updating Protect Privacy|Error al actualizar la protección de privacidad');
        return false;
    }

    private function toPunycode($name)
    {
        return idn_to_ascii($name);
    }

    private function fromPunycode($name)
    {
        return idn_to_utf8($name);
    }

    private function getIdent()
    {
        $res = "";
        $user_id = $_SESSION['AppSettings']['login']['id'];
        if (empty($user_id)) {
            return $res;
        }

        if (empty($this->db)) {
            $this->db = Engine::singleton()->getObject("db");
        }
        if (empty($this->db)) {
            error_log("no tengo bb.dd.!!!");
            return $res;
        }

        $stmt = $this->db->prepare(
            "select value from hb_client_fields_values "
            . "where (field_id=(select id from hb_client_fields where code='nif') "
            . "or field_id=(select id from hb_client_fields where code='cif')) and client_id= ? limit 1"
        );
        $res =$stmt->execute(array($user_id));
        if ($res !== false) {
            if ($stmt->rowCount()>0) {
                $res = $stmt->fetchColumn();
            } else {
                error_log("sin resultados");
            }
        } else {
            $errmsg = $qres->errorInfo();
            if ($errmsg[0] != '00000') {
                error_log("se ha roto algo: " . print_r($errmsg, true));
            }
        }

        return $res;
    }

    private function getTLDs()
    {
        $res = array();
        foreach (array_keys($this->options) as $key) {
            if (strpos($key, "tld")!==false) {
                $res[]=$this->options[$key];
            }
        }
        return $res;
    }

    public function getExtendedAttributes()
    {
        $attributes = array( );
        $tlds = $this->getTLDs();
        // solo necesitamos el ultimo, porque pasa por
        // la funcion tantas veces como tlds
        $lasttld = $tlds[count($tlds)-1];
        if (substr($lasttld, 0 - 2) == "us") {
            $extension = "us";
            $attributes[] = array(
                "name" => "us_category",
                "description" => "Nexus Category",
                "type" => "select",
                "option" => array(
                    array( "value" => "C11", "title" => "us_category_C11" ),
                    array( "value" => "C12", "title" => "us_category_C12"),
                    array( "value" => "C21", "title" => "us_category_C21" ),
                    array( "value" => "C31", "title" => "us_category_C31" ),
                    array( "value" => "C32", "title" => "us_category_C32" )
                )
            );
            $attributes[] = array(
                "name" => "us_purpose",
                "description" => "Application Purpose",
                "type" => "select",
                "option" => array(
                    array( "value" => "P1", "title" => "us_purpose_P1" ),
                    array( "value" => "P2", "title" => "us_purpose_P2" ),
                    array( "value" => "P3", "title" => "us_purpose_P3"),
                    array( "value" => "P4", "title" => "us_purpose_P4" ),
                    array( "value" => "P5", "title" => "us_purpose_P5" )
                )
            );
            /* }
            // Por ahora no se usa, asi que mejor comentarlo
            // elseif ( substr( $this->options['tld'], 0 - 2 ) == "ca" )
            {
                $extension = "ca";
                $attributes[] = array(
                    "name" => "ca_CPR",
                    "description" => "Legal Type of Registrant Contact",
                    "type" => "select",
                    "option" => array(
                        array( "value" => "CCO", "title" => "Corporation" ),
                        array( "value" => "CCT", "title" => "Canadian citizen" ),
                        array( "value" => "RES", "title" => "Canadian resident" ),
                        array( "value" => "GOV", "title" => "Government entity" ),
                        array( "value" => "EDU", "title" => "Educational" ),
                        array( "value" => "ASS", "title" => "Unincorporated Association" ),
                        array( "value" => "HOP", "title" => "Hospital" ),
                        array( "value" => "TDM", "title" => "Trade-mark" ),
                        array( "value" => "PRT", "title" => "Partnership" ),
                        array( "value" => "TRD", "title" => "Trade Union" ),
                        array( "value" => "PLT", "title" => "Political Party" ),
                        array( "value" => "LAM", "title" => "Libraries, Archives and Museums" ),
                        array( "value" => "TRS", "title" => "Trust" ),
                        array( "value" => "ABO", "title" => "Aboriginal Peoples" ),
                        array( "value" => "INB", "title" => "Indian Band" ),
                        array( "value" => "LGR", "title" => "Legal Representative" ),
                        array( "value" => "OMK", "title" => "Official Mark" ),
                        array( "value" => "MAJ", "title" => "The Queen" )
                    )
                    );*/
        } elseif (substr($lasttld, 0 - 2) == "es") {
            $extension = "es";
            $attributes[] = array(
                "name" => "es_form_juridica",
                "description" => "Legal Entity Type",
                "type" => "select",
                "option" => array(
                    array( "value" => "1", "title" =>   'es_formjur_1' ),
                    array( "value" => "39", "title" =>  'es_formjur_39' ),
                    array( "value" => "47", "title" =>  'es_formjur_47' ),
                    array( "value" => "59", "title" =>  'es_formjur_59' ),
                    array( "value" => "68", "title" =>  'es_formjur_68' ),
                    array( "value" => "124", "title" => 'es_formjur_124' ),
                    array( "value" => "150", "title" => 'es_formjur_150' ),
                    array( "value" => "152", "title" => 'es_formjur_152' ),
                    array( "value" => "164", "title" => 'es_formjur_164' ),
                    array( "value" => "181", "title" => 'es_formjur_181' ),
                    array( "value" => "197", "title" => 'es_formjur_197' ),
                    array( "value" => "203", "title" => 'es_formjur_203' ),
                    array( "value" => "229", "title" => 'es_formjur_229' ),
                    array( "value" => "269", "title" => 'es_formjur_269' ),
                    array( "value" => "286", "title" => 'es_formjur_286' ),
                    array( "value" => "365", "title" => 'es_formjur_365' ),
                    array( "value" => "434", "title" => 'es_formjur_434' ),
                    array( "value" => "436", "title" => 'es_formjur_436' ),
                    array( "value" => "439", "title" => 'es_formjur_439' ),
                    array( "value" => "476", "title" => 'es_formjur_476' ),
                    array( "value" => "510", "title" => 'es_formjur_510' ),
                    array( "value" => "524", "title" => 'es_formjur_524' ),
                    array( "value" => "525", "title" => 'es_formjur_525' ),
                    array( "value" => "554", "title" => 'es_formjur_554' ),
                    array( "value" => "560", "title" => 'es_formjur_560' ),
                    array( "value" => "562", "title" => 'es_formjur_562' ),
                    array( "value" => "566", "title" => 'es_formjur_566' ),
                    array( "value" => "608", "title" => 'es_formjur_608' ),
                    array( "value" => "612", "title" => 'es_formjur_612' ),
                    array( "value" => "713", "title" => 'es_formjur_713' ),
                    array( "value" => "717", "title" => 'es_formjur_717' ),
                    array( "value" => "744", "title" => 'es_formjur_744' ),
                    array( "value" => "745", "title" => 'es_formjur_745' ),
                    array( "value" => "746", "title" => 'es_formjur_746' ),
                    array( "value" => "747", "title" => 'es_formjur_747' ),
                    array( "value" => "877", "title" => 'es_formjur_877' ),
                    array( "value" => "878", "title" => 'es_formjur_878' ),
                    array( "value" => "879", "title" => 'es_formjur_879' )
                )
            );
            $doc = $this->getIdent();
            $defdoc = 1;
            if (!empty($doc) and (strtoupper($doc[0])=='X' or strtoupper($doc[0])=='Y' or strtoupper($doc[0])=='Z')) {
                $defdoc = 3;
            }
            $attributes[] = array(
                "name" => "es_tipo_identificacion",
                "description" => "Identification Type",
                "type" => "select",
                "option" => array(
                    array( "value" => "1", "title" => "es_idtype_1" ),
                    array( "value" => "3", "title" => "es_idtype_3" ),
                    array( "value" => "0", "title" => "es_idtype_0" )
                ),
                "default" => $defdoc
            );

            if (!isset( $this->options['ext']['es_identificacion'])) {
                $attributes[] = array(
                    "name" => "es_identificacion",
                    "description" => "Identification Value",
                    "type" => "input" ,
                    "default" => $this->getIdent()
                );
            } else {
                $attributes[] = array(
                    "name" => "es_identificacion",
                    "description" => "Identification Value",
                    "type" => "input"
                );
            }
        }
        if (!empty($attributes)) {
            foreach ($attributes as $key => $attr) {
                if (isset($this->options['ext'][$attr['name']])) {
                    $attributes[$key]['default'] = $this->options['ext'][$attr['name']];
                }
            }
            return array($extension => $attributes);
        }
    }

    private function addAttribute($name, $value, $params)
    {
        if (!is_array($params)) {
            return $params;
        }

        $attr_position = 1;

        foreach (array_keys($params) as $key) {
            if (preg_match('/^attr-name([0-9]+)$/', $key, $out)) {
                if (intval($out[1]) >= $attr_position) {
                    $attr_position = intval($out[1]) + 1;
                }
            }
        }

        $params['attr-name' . $attr_position] = $name;
        $params['attr-value' . $attr_position] = $value;

        return $params;
    }

    private function sanitizeAuthCode($auth_code)
    {
        $ascii_chars = array('+', '&', '*', '%');
        $replace_with = array('%2B', '%26', '%2A', '%25');
        return str_replace($ascii_chars, $replace_with, $auth_code);
    }

    public function unistall()
    {
        #$sql = "DROP VIEW domains";
        #$query = $this->db->prepare($sql);
        #$res = $query->execute();
        return true;
    }

    public function install()
    {
        $sql = "CREATE VIEW domains AS SELECT * FROM hb_domains";
        $stmt = $this->db->prepare($sql);
        $res = $stmt->execute();
    }

    private function error_domain_mail($subject, $content)
    {
        $content .=  "\n\nOrigen: ". $_SERVER['HTTP_HOST'];

        return mail(
            $this->configuration['mail_domain_notify']['value'],
            $subject,
            $content
        );
    }
}
