<section id="hideme_error" class="notifier-pas np-error" style="display:none">
<a href="#hideme" class="hide">X</a>
<p id="errors"></p>
</section>
<section id="hideme_info" class="notifier-pas np-ok" style="display:none">
<a href="#hideme" class="hide">X</a>
<p id="infos"></p>
</section>
<script type="text/javascript">
{literal}
    (function()
    {
        var originalSlideDownMethod = $.fn.slideDown;
        $.fn.slideDown = function()
        {
            if($(this).attr('id') == 'errors')
            {
                $('[id="hideme error"]').show();
            }
            else if($(this).attr('id') == 'infos')
            {
                $('[id="hideme info"]').show();
            }
            originalSlideDownMethod.apply(this, arguments);
        }

        $('.hide').click(function()
        {
            $(this).parent().fadeOut(500);
            $(this).parent().find('p span').remove()
        });
    })();
{/literal}
</script>
{php}

require_once("libs/Utils.php");
require_once APPDIR_MODULES . "Other/gigasutils/libs/Hostbill.php";
require_once(APPDIR_MODULES . "Hosting/gigashosting/libs/class.gigasapi.php");
$db = Engine::singleton()->getObject('db');
if($_GET['token']) {

    $q = $db->prepare("DELETE FROM gigas_changepass_token WHERE create_date < DATE_SUB(NOW(), INTERVAL 1 HOUR)");
    $q->execute();
    $q->closeCursor();
    $q = $db->prepare("SELECT token, api_login FROM gigas_changepass_token WHERE token = ?");
    $q->execute(array($_GET['token']));
    $account = $q->fetch(PDO::FETCH_ASSOC);
    $q->closeCursor();

    if($account) {
        $this->assign("token", $account['token']);
        $this->assign("login", $account['api_login']);

    } else {
        Engine::singleton()->addError('Invalid or expired link | Enlace no válido o expirado ');
        hbm_redirect("");
    }

} else {
        Engine::singleton()->addError('Invalid link | Enlace no válido');
        hbm_redirect("");
}
{/php}
{literal}
<style type="text/css">

.test{
    top: -30px !important;
    left: 0px !important;
}
</style>
{/literal}
<script type="text/javascript" src="{$template_dir}js/password_strength_plugin.js"></script>
<script type="text/javascript">
{literal}
$(document).ready(function()
{

    $('#reset_submit').click(function(event){

        destroy("error");

        if($('#pass').val() !== $('#pass2').val()) {

            $("#errors").html(" Password doesn't match. Please check both fields have the same value.| Las contraseñas no coinciden. Comprueba que las escrito correctamente en ambos campos.");
            $("#hideme_error").show();
            event.preventDefault();
        } else {
            if($('#pass').val().length < 6 ) {
                $("#errors").html(" Password too short, must be between 6 and 40 characters.  | Password demasiado corto, debe tener entre 6 y 40 caracteres.");
                $("#hideme_error").show();
                event.preventDefault();
            }else if($('#pass').val().length > 40 ) {
                $("#errors").html(" Password too long, must be between 6 and 40 characters. | Password demasiado largo, debe tener entre 6 y 40 caracteres.");
                $("#hideme_error").show();
                event.preventDefault();
            }else{
                return true;
            }
        }
    });

    //Password strength
    $passS = $("#pass").passStrength({
        baseStyle: "test",
        userid: "#token",
        strongPass: "strongPass"
    });
    $.fn.shortPass = 'Muy corta';
    $.fn.badPass = 'Débil';
    $.fn.goodPass = 'Buena';
    $.fn.strongPass = 'Muy buena';
});
{/literal}
</script>

<section id="wrap" class="psw-form-section">
	<h2>{$lang.change_pass}</h2>
    <div class="formwrap log-wrap psw-form-container">
    	<p>{$lang.reset_apipass}</p>

        <form method="POST" id="reset_pass">
            <div class="NewPass">
                <label>{$lang.password}</label>
                <input type="password" name="pass" value="" id="pass" style="width: 325px;"/>
                <input type="hidden" name="token" id="token" value="{$token}">
                <input type="hidden" name="login" id="login" value="{$login}">
            </div>

            <div class="NewPassVer">
                <label>{$lang.confirmpassword}</label>
                <input type="password" name="pass2" id="pass2" required style="width: 325px;"/>
            </div>
             <div>
                <input type="submit" id="reset_submit" />
            </div>
        </form>
	</div>
</section>
{php}
if($_POST['pass']) {
    $pass = $_POST['pass'];
    if (!preg_match("/^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])[\w@\-\.]{6,40}$/", $pass)) {
        Engine::singleton()->addError('Password is not secure enough | La contraseña no es lo suficiente segura');
    }else{
        $sql = "SELECT hba.*, hbclients.id, hbclients.email, hbcdetails.language, hbcdetails.firstname FROM hb_accounts hba ";
        $sql.= "JOIN gigas_changepass_token tok ON hba.id = tok.account_id ";
        $sql.= "JOIN hb_client_access hbclients ON hba.client_id = hbclients.id ";
        $sql.= "JOIN hb_client_details hbcdetails ON hbclients.id = hbcdetails.id ";
        $sql.= "WHERE tok.token = ? ";
        $q = $db->prepare($sql);
        $q->execute(array($_POST['token']));
        $account = $q->fetch(PDO::FETCH_ASSOC);
        $q->closeCursor();
        $account['extra_details'] = unserialize($account['extra_details']);
        $hapi = new GApiWrapper();
        $server = $hapi->getServerDetails(array('id' => $account['server_id']));
        $admin_api = new GigasApi($server['server']);

        try {
            $r = $admin_api->put('/api_user/'. $account['extra_details']['option102'], array('password' => $pass))->json();
            $changed = true;
        } catch (Exception $r) {
            Engine::singleton()->addError($r);
            hbm_redirect("apipassreset");
        }

        if ($changed) {
            $api_login = $account['extra_details']['option100'];
            $account['extra_details']['option101'] = GigasUtilities::cipherApiPassword($pass);
            $q = $db->prepare("UPDATE hb_accounts SET extra_details = ? WHERE id = ?");
            $q->execute(array(serialize($account['extra_details']), $account['id']));
            $q = $db->prepare("INSERT INTO gigas_changepass_log VALUES (NULL, :token, :api_login, now(), 'reset')");
            $q->execute(array(':token' => $_POST['token'], ':api_login' => $api_login));
            $q = $db->prepare("DELETE FROM gigas_changepass_token WHERE token = :token");
            $q->execute(array(':token' => $_POST['token']));
            Engine::singleton()->addInfo('Password changed successfully | Contraseña cambiada correctamente ');

            $sql = "SELECT subject, message, language_id FROM hb_email_templates tpl INNER JOIN hb_language lng ";
            $sql.= "ON tpl.language_id = lng.id WHERE tplname = ? AND lng.name = ? LIMIT 1";
            $query = $db->prepare($sql);
            $query->execute(array('api:passreset_sucess', $account['language']));
            $mail_tpl = $query->fetch(PDO::FETCH_ASSOC);
            $query->closeCursor();
            $subject = $mail_tpl['subject'];
            $contents = $mail_tpl['message'];
            $contents = str_replace('%(account_id)s', $account['id'], $contents);
            $contents = str_replace('%(firstname)s', $account['firstname'], $contents);
            $mailer = new Mailer();
            $mailer->AddAddress($account['email']);
            $mailer->Subject = $subject;
            $mailer->Body = $contents;
            $mailer->Send();
            $sql = "INSERT INTO hb_email_log VALUES (NULL, ?, ?, ?, ?, NOW(), 1)";
            $query = $db->prepare($sql);
            $query->execute(array($account['id'], $account['email'], $subject, $contents));
            $query->closeCursor();

            try {
                $r = $admin_api->post('/token', array('user' => $api_login, 'password' => $pass))->json();
            } catch (Exception $r) {
                Engine::singleton()->addError($r);
                hbm_redirect("apipassreset");
            }

            try {
                $r = $admin_api->post('/permanent_token', array('user' => $api_login, 'password' => $pass))->json();
            } catch (Exception $r) {
                Engine::singleton()->addError($r);
                hbm_redirect("apipassreset");
            }

            hbm_redirect("");
         }
    }
    Engine::singleton()->saveInfos();
    hbm_redirect("apipassreset");
}
{/php}
