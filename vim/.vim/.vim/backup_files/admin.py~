# -*- coding: utf-8 -*-
from django.contrib import admin
from django.core.exceptions import PermissionDenied
from django import forms

from orders.models import (Order, Coupon,
        CouponExtraDetail, CouponPromo, CouponUsage, CouponReferralBenefit, PromoContact)
from accounts.models import Account
from main.utils import export_as_csv
from main.admin import BaseAdmin
from orders.forms import CouponForm
import datetime


class FilterUsed(admin.SimpleListFilter):
    '''
    Filtra entre 0 y cualquier otro valor
    '''
    title = "Is Used"
    parameter_name = "isused"

    def lookups(self, request, model_admin):
        return (('No', 'No'), ('Yes', 'Yes'))

    def queryset (self, request, queryset):
        if self.value() == 'No':
            return queryset.filter(num_usage=0)
        if self.value() == 'Yes':
            return queryset.filter(num_usage__gte=1)


class CouponUsageInline(admin.TabularInline):
    model = CouponUsage
    extra = 0
    readonly_fields = ('client', 'order', 'date', 'discount')
    can_delete = False


class CouponExtraDetailInline(admin.StackedInline):
    model = CouponExtraDetail


class CouponAdmin(BaseAdmin):
    form = CouponForm
    list_display = ('code', 'extra_type_field', 'referrer_link', 'assigned_to', 'creation_date', 'products',
            'aplicable_by', 'is_used', 'used_by_link', 'value', 'type_field', 'cycles',
            'expires', 'max_usage_custom', 'num_usage', 'client', 'notes', 'resend_coupon')
    search_fields = ['code']
    list_filter = ['num_usage', 'cycles', 'clients', FilterUsed, 'couponextradetail__creation_date', 'couponextradetail__type_field']
    inlines = [CouponExtraDetailInline, CouponUsageInline]
    fields = ('code', ('value', 'type_field'), 'cycle', 'products', 'addons', 'cycles', 'clients', 'client_id', 'max_usage', 'expires')
    actions = ['export_as_csv']

    ####################def save_formset(self, request, form, formset, change):

    #Admin actions
    def export_as_csv(self, request, queryset):
        """
        Generic csv export admin action.
        """
        if not request.user.is_staff:
            raise PermissionDenied

        opts = self.model._meta

        return export_as_csv(opts, queryset,
                             extra_fields=["extra_type_field", "is_used",
                                     "get_user", "products_list"],
                             exclude_fields=['client_id', 'products', 'addons'])
    export_as_csv.short_description = "Export selected coupons as csv file"

    def country_filter(self, queryset, countries):
        return queryset.filter(client_id__clientdetail__country__in=countries)


class OrderAdmin(BaseAdmin):
    list_display = ('id', 'number', 'payment_module', 'client_link',
                    'invoice_link', 'product_name', 'total', 'date_created',
                    'order_ip', 'licenses', 'order_status', 'account_status',
                    'invoice_status', 'client_country')
    readonly_fields = ['id', 'number', 'payment_module', 'client_id',
                       'invoice_id', 'total', 'date_created', 'order_ip', 'notes',
                       'order_status', 'account_status', 'invoice_status']
    fields = ['id', 'number', 'payment_module', 'client_id', 'invoice_id',
              'total', 'date_created', 'order_ip', 'notes', 'order_status',
              'account_status', 'invoice_status']
    # grupo finance si puede editar el invoice
    administracion_readonly_fields = ['id', 'number', 'payment_module',
                                      'client_id', 'total', 'date_created',
                                      'order_ip', 'notes', 'order_status',
                                      'account_status', 'invoice_status']
    list_filter = ['date_created', 'status', 'invoice_id__status',
                    'account__status', 'payment_module',
                    'client_id__clientdetail__country']
                    #'orderlicense__status', 'orderlicense__license_type'
    search_fields = ['client_id__email', 'id']
    actions = ['export_as_csv']
    date_hierarchy = 'date_created'

    def get_readonly_fields(self, request, obj=None):
        if request.user.groups.filter(name="Finance").count():
            return self.administracion_readonly_fields
        return super(OrderAdmin, self).get_readonly_fields(request, obj)

    #Admin actions
    def export_as_csv(self, request, queryset):
        """
        Generic csv export admin action.
        """
        if not request.user.is_staff:
            raise PermissionDenied

        opts = self.model._meta

        return export_as_csv(opts, queryset, ['product_name', 'license_key',
                                              'client_country'])

    export_as_csv.short_description = "Export selected objects as csv file"

    def queryset(self, request):
        queryset = super(OrderAdmin, self).queryset(request)
        if str(request.GET.get('status__exact')) == 'CloudSales':
            accounts = list()
            for acc in Account.objects\
                    .filter(product_id__category_id__name__contains='Cloud',
                            order_id__isnull=False).all():
                if 'order_id_id' in acc.__dict__:
                    accounts.append(acc.__dict__['order_id_id'])

            get = request.GET.copy()
            get.pop('status__exact')
            request.GET = get
            return queryset.select_related().filter(pk__in=accounts, status='Active')
        else:
            return queryset

    def country_filter(self, queryset, countries):
        return queryset.filter(client_id__clientdetail__country__in=countries)


class CouponPromoForm(forms.ModelForm):
    notes = forms.CharField(widget=forms.Textarea)

    class Meta:
        model = CouponPromo


class CouponPromoAdmin(BaseAdmin):
    list_display = ("promo", "description","coupon_prefix", "days_until_action", 'date_start', 'date_end', 'notes')
    form = CouponPromoForm


class CouponReferralBenefitInline(admin.StackedInline):
    model = CouponReferralBenefit


class CouponUsageStatusFilter(admin.SimpleListFilter):
    title = "Is applied"
    parameter_name = "isapplied"

    def lookups(self, request, model_admin):
        return (('waiting', 'Waiting'), ('applied', 'Applied'), ('pending', 'Pending'))

    def queryset(self, request, queryset):
        if self.value() == 'waiting':
            end_date = datetime.date.today() - datetime.timedelta(days=45)
            return queryset.filter(date__gt=end_date)

        elif self.value() == 'applied':
            return queryset.filter(couponreferralbenefit__isnull=False)

        elif self.value() == 'pending':
            end_date = datetime.date.today() - datetime.timedelta(days=45)
            return queryset.filter(date__lte=end_date, couponreferralbenefit__isnull=True)


class CouponUsageAdmin(BaseAdmin):
    list_display = ("id", "coupon_link", "used_by_link", "referrer_link", "promo_name", "discount", "order_link", "date", "status")
    date_hierarchy = "date"
    list_filter = ("coupon__couponextradetail__type_field__promo", "date", CouponUsageStatusFilter)
    inlines = (CouponReferralBenefitInline,)
    readonly_fields = ('coupon', 'client', 'order', 'discount')
    search_fields = ['coupon__code', 'order__id', 'client__email']

    def lookup_allowed(self, key, value):
        if key in ("coupon__couponextradetail__type_field__promo"):
            return True
        return super(CouponUsageAdmin, self).lookup_allowed(key, value)

    def country_filter(self, queryset, countries):
        return queryset.filter(client__clientdetail__country__in=countries)


class CouponReferralBenefitAdmin(BaseAdmin):
    list_display = ("id", "usage", "discount", "date")
    date_hierarchy = "date"
    list_filter = ("date",)

    def queryset(self, request):
        queryset = super(CouponReferralBenefitAdmin, self).queryset(request)
        return queryset.exclude(
            usage__coupon__couponextradetail__referrer__isnull=True
        )

    def country_filter(self, queryset, countries):
        return queryset.filter(
            usage__client__clientdetail__country__in=countries
        )


class PromoContactAdmin(BaseAdmin):
    list_display = ("name", "company", "email", "phone", "promotype", "contacted", "coupon_id")
    list_editable = ("contacted",)
    list_filter = ("promotype","contacted")
    search_fields = ["name", "company", "coupon_id__code"]

    def country_filter(self, queryset, countries):
        new_queryset = queryset.filter(
            coupon_id__client_id__clientdetail__country__in=countries
        )
        if new_queryset.count() > 0:
            return new_queryset
        return queryset.filter(
            coupon_id__in=CouponUsage.objects.filter(
                client__clientdetail__country__in=countries
            ).values_list('coupon', flat=True)
        )


admin.site.register(PromoContact, PromoContactAdmin)
admin.site.register(CouponReferralBenefit, CouponReferralBenefitAdmin)
admin.site.register(CouponUsage, CouponUsageAdmin)
admin.site.register(CouponPromo, CouponPromoAdmin)
admin.site.register(Order, OrderAdmin)
admin.site.register(Coupon, CouponAdmin)
