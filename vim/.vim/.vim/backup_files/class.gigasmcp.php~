<?php

require_once dirname(__FILE__)."/gigasutils/libs/Req.php";
require_once dirname(__FILE__)."/gigasutils/libs/Hostbill.php";
require_once dirname(__FILE__)."/gigasmcp/Multicurrency.php";


class GigasMCP extends OtherModule implements Observer
{
    protected $configuration = array();
    protected $lang = array();

    protected $info = array
        (
            "isobserver" => true,
            #"haveadmin" => true,
            #"haveuser" => true,
            #"havetpl" => true,
            #"havelang" => true,
            #"extras_menu" => true,
        );

    const NAME = 'Gigas Multicurrency Pricing';
    const VER = '1.0';
    protected $filename = "class.gigasmcp.php";
    protected $description = "Gigas Multicurrency Pricing";
    protected $modname = NAME;
    protected $version = VER;

    public $api;

    public function __construct()
    {
        $log = Engine::singleton( )->getSetting( "login");
        $this->client_id = $log['id'];
        $this->api = new HostbillApi();
        $this->request = new Req();
        $this->langs = new Language();
        return parent::__construct();
    }

    public function getClientId()
    {
        return $this->client_id;
    }

    public function getLangs($what)
    {
        return $this->langs->lookupLine($what, 'english') . '|' . $this->langs->lookupLine($what, 'spanish');
    }

    public function enabled()
    {
        $modConf = $this->api->getModuleConfiguration($this->id);
        return $modConf['active'] == 1;
    }

    public function AfterModuleChangePackage($details)
    {
        //
        // En los upgrade con moneda extranjera actualizamos el precio del producto en hb_accounts y hb_upgrades
        //
        $account = $this->api->getAccountDetails(array('id'=>$details['account']['id']));
        $client = $this->api->getClientDetails(array('id'=>$account['client_id']));

        if($client['currency_id'] != 0 and $this->enabled())
        {
            $mu = new Multicurrency();
            $mu->setCurrency($client['currency_id']);
            $cycle = $mu->getCycleByBillingcycle($account['billingcycle']);
            $price = $mu->getProductPrice($account['product_id'], $cycle);

            $product_price = $price['price'];

            $sql = "SELECT * FROM hb_upgrades WHERE account_id = ? AND product_id = ? ORDER BY id DESC LIMIT 1";
            $query = $this->db->prepare($sql);
            $query->execute(array($account['id'], $account['product_id']));
            $hb_upgrade = $query->fetch(PDO::FETCH_ASSOC);

            $sql = "UPDATE hb_upgrades SET new_value = ? WHERE id = ?";
            $query = $this->db->prepare($sql);
            $query->execute(array($product_price, $hb_upgrade['id']));

            $sql = "UPDATE hb_accounts SET total = ? WHERE id = ?";
            $query = $this->db->prepare($sql);
            $query->execute(array($product_price, $account['id']));
        }
    }

    public function NewOrder($order_id)
    {
        $order = $this->api->getOrderDetails(array('id'=>$order_id));
        $client = $this->api->getClientDetails(array('id'=>$order['client_id']));

        //
        // Es un upgrade/downgrade
        //
        if(!empty($order['upgrades']) and $client['currency_id'] != 0 and $this->enabled())
        {
            $account = $this->api->getAccountDetails(array('id'=>$order['upgrades'][0]['account_id']));
            die("lo encontre");

            // Sacamos el carrito de la sesión
            if(!empty($_SESSION['GigasCart']))
            {
                $_SESSION['GigasCart']['items'][0]['type'] = 'Upgrade';
                $_SESSION['GigasCart']['items'][0]['product_id'] = $order['upgrades'][0]['id'];
                $_SESSION['GigasCart']['items'][0]['price'] = $_SESSION['GigasCart']['subtotal'];
                $cart = $_SESSION['GigasCart'];
            }
            // Si no existe debe ser porque se está upgradeando desde el admin
            else
            {
                $mu = new Multicurrency();
                $mu->setCurrency($order['currency_id']);
                $cart = $mu->convertAdminUpgrade($order, $account);
            }

            // Cambiamos los precios
            if(!empty($cart))
            {
                $this->changePrices($order, $cart);

                $sql = "UPDATE hb_upgrades SET new_value = ? WHERE id = ?";
                $query = $this->db->prepare($sql);
                $query->execute(array($cart['recurring'], $order['upgrades'][0]['id']));

                $sql = "UPDATE hb_accounts SET total = ? WHERE id = ?";
                $query = $this->db->prepare($sql);
                $query->execute(array($cart['recurring'], $account['id']));
            }
        }
        //
        // No es upgrade/downgrade
        //
        elseif($client['currency_id'] != 0 and $this->enabled())
        {
            if(!empty($_SESSION['GigasCart']))
            {
                $cart = $_SESSION['GigasCart'];
            }
            // Si no existe gigascart intentamos sacarlo desde las template_vars
            elseif(!empty($_SESSION['template_vars']))
            {
                $template_vars = $_SESSION['template_vars'];
                $mu = new Multicurrency();
                $mu->convert($template_vars);
                $cart = $_SESSION['GigasCart'];
            }
            else
            {
                $cart = null;
            }

            // Cambiamos los precios
            if(!empty($cart))
            {
                // Averiguamos las tasas que debería tener el producto
                // y si son distintas a las actuales las reasignamos
                // Además si la moneda en el cart es distinta a la del usuario, la reasignamos
                if(isset($_SESSION['template_vars']))
                {
                    // Averiguamos las tasas que debería tener el producto
                    $tax1 = $this->getTaxRate($client['country'], $client['state'], 'L1');
                    $tax2 = $this->getTaxRate($client['country'], $client['state'], 'L2');
                    $template_vars = $_SESSION['template_vars'];

                    // Si son distintas a las actuales las reasignamos
                    if($template_vars['tax']['tax1'] != $tax1['rate'] or $template_vars['tax']['tax2'] != $tax2['rate'])
                    {
                        $template_vars['tax']['tax1'] = $tax1['rate'];
                        $template_vars['tax']['taxname1'] = $tax1['name'];
                        $template_vars['tax']['tax2'] = $tax2['rate'];
                        $template_vars['tax']['taxname2'] = $tax2['name'];

                        $mu = new Multicurrency();
                        $mu->convert($template_vars);
                        $cart = $_SESSION['GigasCart'];  # IMPORTANTE volverlo a pedir
                    }

                    # Si la moneda en el cart es distinta a la del usuario, la reasignamos
                    if($cart['currency_id'] != $client['currency_id'])
                    {
                        $template_vars['clientdata'] = $client;

                        $mu = new Multicurrency();
                        $mu->convert($template_vars);
                        $cart = $_SESSION['GigasCart'];  # IMPORTANTE volverlo a pedir
                    }
                }

                $this->changePrices($order, $cart);
            }
        }

        $_SESSION['GigasCart'] = null;
        unset($_SESSION['GigasCart']);  # Modo paranoia
        $_SESSION['template_vars'] = null;
        unset($_SESSION['template_vars']);
    }

    private function changePrices($order, $cart)
    {
        foreach($cart['items'] as $item)
        {
            if($item['type'] == 'Addon' and !empty($order['addons']))
            {
                // TODO: Funcionará mientras solo se pueda comprar 1 addon a la vez. Mejorar esto.
                // Cambio de precios en factura
                if(isset($order['invoice_id']) and $order['invoice_id'] > 0)
                {
                    $q = "UPDATE hb_invoice_items SET amount = ? WHERE invoice_id = ? AND item_id = ? AND type = ?";
                    $data = array($item['price'], $order['invoice_id'], $order['addons'][0]['id'], $item['type']);
                    $this->updateQuery($q, $data);
                }

                // Cambio en account_addons
                $q = "UPDATE hb_accounts_addons SET setup_fee = ?, recurring_amount = ? WHERE id = ?";
                $data = array($cart['addon']['setup_price'], $cart['addon']['recurring_amount'], $order['addons'][0]['id']);
                $this->updateQuery($q, $data);
            }
            elseif($item['type'] == 'Hosting' and !empty($order['hosting']))
            {
                // update prices with custom config of a product
                // no me gusta, esto es O(n^2) mientras solo tengamos
                // un producto, no hay problema pero si aceptamos carrito hay que repensar esto
                foreach($cart['items'] as $item2) {
                    if ($item2['type'] == 'Config'){
                        $item['price'] += $item2['price'];
                        $item['setup'] += $item2['setup'];
                    }
                }

                // TODO: Funcionará mientras solo se pueda comprar 1 producto a la vez. Mejorar esto.
                // Cambio de precios en factura
                if(isset($order['invoice_id']) and $order['invoice_id'] > 0)
                {
                    $q = "UPDATE hb_invoice_items SET amount = ? WHERE invoice_id = ? AND item_id = ? AND type = ?";
                    $data = array($item['price'], $order['invoice_id'], $order['hosting'][0]['id'], $item['type']);
                    $this->updateQuery($q, $data);
                }

                // Cambio en accounts
                $q = "UPDATE hb_accounts SET firstpayment = ?, total = ? WHERE id = ?";
                $data = array($cart['account']['firstpayment'], $cart['account']['total'], $order['hosting'][0]['id']);
                $this->updateQuery($q, $data);
            }
            elseif(strpos($item['type'], 'Domain') !== false and !empty($order['domains']))
            {
                foreach($order['domains'] as $domain)
                {
                    if($item['domain_name'] == $domain['name'])
                    {
                        // Cambio de precios en factura
                        if(isset($order['invoice_id']) and $order['invoice_id'] > 0)
                        {
                            $q = "UPDATE hb_invoice_items SET amount = ? WHERE invoice_id = ? AND item_id = ? AND type = ?";
                            $data = array($item['price'], $order['invoice_id'], $domain['id'], $item['type']);
                            $this->updateQuery($q, $data);
                        }

                        // Cambio en dominios
                        $q = "UPDATE hb_domains SET firstpayment = ?, recurring_amount = ? WHERE name = ? AND id = ?";
                        $data = array($cart['domain'][$domain['name']]['firstpayment'], $cart['domain'][$domain['name']]['recurring_amount'], $domain['name'], $domain['id']);
                        $this->updateQuery($q, $data);
                        break;
                    }
                }
            }
            elseif($item['type'] == 'Upgrade')  # and !empty($order['hosting']))
            {
                // Cambio de precios en factura
                if(isset($order['invoice_id']) and $order['invoice_id'] > 0)
                {
                    //echo "<pre>"; print_r($order);die();
                    $q = "UPDATE hb_invoice_items SET amount = ? WHERE invoice_id = ? AND item_id = ? AND type = ? OR type = 'FieldUpgrade'";
                    $data = array($item['price'], $order['invoice_id'], $order['upgrades'][0]['id'], $item['type']);
                    $this->updateQuery($q, $data);
                }

                // Cambio en hb_upgrades
                $q = "UPDATE hb_upgrades SET total = ?, new_value = ? WHERE id = ?";
                $data = array($cart['total'], $cart['recurring'], $order['upgrades'][0]['id']);
                $this->updateQuery($q, $data);
            }
        }

        // Cambio en order
        $q = "UPDATE hb_orders SET total = ? WHERE id = ?";
        $data = array($cart['order']['total'], $order['id']);
        $this->updateQuery($q, $data);

        // Cambio en el invoice
        if(isset($order['invoice_id']) and $order['invoice_id'] > 0)
        {
            if($cart['total'] == 0) $status = 'Paid';
            else $status = 'Unpaid';
            $q = "UPDATE hb_invoices SET status = ?, subtotal = ?, credit = ?, tax = ?, taxrate = ?, tax2 = ?, taxrate2 = ?, total = ?, rate=1 WHERE id = ?";
            $data = array($status, $cart['subtotal'], $cart['credit'], $cart['tax'], $cart['taxrate'], $cart['tax2'], $cart['taxrate2'], $cart['total'], $order['invoice_id']);
            $this->updateQuery($q, $data);
        }

        // Cambio el credit del cliente
        if(isset($cart['remaining_credit']))
        {
            $q = "UPDATE hb_client_billing SET credit = ? WHERE client_id = ?";
            $data = array($cart['remaining_credit'], $order['client_id']);
            $this->updateQuery($q, $data);
        }
    }

    private function updateQuery($q, $data)
    {
        $query = $this->db->prepare($q);
        $query->execute($data);
        $query->closeCursor();
    }

    private function getTaxRate($country, $state, $type='L1')
    {
        foreach(array($country, '0') as $c)
        {
            foreach(array($state, '0') as $s)
            {
                $query = $this->db->prepare("SELECT name, rate FROM hb_tax where country = ? and state = ? and type = ? LIMIT 1");
                $query->execute(array($c, $s, $type));
                $tax_info = $query->fetch(PDO::FETCH_ASSOC);
                if(!empty($tax_info))
                {
                    $tax_info['rate'] = floatval($tax_info['rate']) * 1.00;
                    return $tax_info;
                }
            }
        }
        return array('name'=>'IVA', 'rate' => 0.00);
    }
}
