# -*- coding: utf-8 -*-

import datetime
from tornado.web import HTTPError
from managers.network_manager import (OnappNetworkInterfaceManager,
                                      NetworkManager,
                                      IpAddressJoinManager,
                                      OnappIpAddressManager
                                      as IpAddressManager)
from managers.resource_manager import ResourceManager
from managers.utils import query_server_group_get_object
from api.libs.shortcuts import get_db_object_or_http_error
from comfy import config


PARKING_VLAN = config.get('PARKING_VLAN')
VLAN_STARTING_VALUE = config.get('VLAN_STARTING_VALUE')
VLAN_DATA = config.get('VLAN_DATA')


def get_all(console_id=None, api_user_id=None, cloud_id=None, args=None,
            is_admin=False):
    ifaces = IpAddressManager(console=console_id,
                              cloud_id=cloud_id,
                              as_admin=is_admin).get_list(
                                  args if args else None)
    return {'code': 200, 'response': ifaces}


def get(console_id=None, api_user_id=None, cloud_id=None, args=None,
        is_admin=False):
    iface = IpAddressManager(console=console_id,
                             cloud_id=cloud_id,
                             as_admin=is_admin).get_object(args['id'])
    return {'code': 200, 'response': iface}


def reserve(console_id=None, api_user_id=None, cloud_id=None, args=None,
            is_admin=False):
    net = NetworkManager(console=console_id,
                         cloud_id=cloud_id,
                         as_admin=is_admin).get_object(args['network_id'])

    if not net:
        raise HTTPError(404, 'Network not found')

    if not net.public:
        raise HTTPError(409, "Network must be public")

    if not ResourceManager(console_id=console_id,
                           cloud_id=cloud_id,
                           as_admin=is_admin).can_create_ip(
                               args['network_id']):
        raise HTTPError(412, "Not enough ip address resources")

    ip = IpAddressManager(console=console_id,
                          cloud_id=cloud_id,
                          as_admin=is_admin).reserve(args['network_id'])

    if not ip:
        raise HTTPError(400, 'Operation failed')

    else:
        return {"code": 200, "response": ip}

    raise HTTPError(500, 'Error')


def release(console_id=None, api_user_id=None, cloud_id=None, args=None,
            is_admin=False):
    ip_mng = IpAddressManager(console=console_id,
                              cloud_id=cloud_id,
                              as_admin=is_admin)
    ip = ip_mng.get_object(args['id'])

    if not ip:
        raise HTTPError(404, 'IP address not found')

    ip_mng.release(ip.id)

    return {"code": 204, "response": ""}


def clean(console_ip=None, ip_address=None, mask_address='255.255.255.0'):
    import requests
    from api.libs.mail import send_mail

    url = "http://10.2.42.25/gigas_delister"
    params = {"ip": ip_address,
              "mask": mask_address,
              "console": console_ip}
    try:
        response = requests.get(url, params).json()
        if response['code'] != 200:
            raise requests.exceptions.RequestException
    except requests.exceptions.RequestException:
        send_mail("error", "Error clean ip: {0}".format(ip_address))
        return False

    return True


def delete(console_id=None, api_user_id=None, cloud_id=None, args=None,
           is_admin=False):
    ip_mng = IpAddressManager(console_id, cloud_id, is_admin)
    ip = get_db_object_or_http_error(ip_mng,
                                     args['id'],
                                     'IP address not found')

    ipjoin_mng = IpAddressJoinManager(console_id, cloud_id, is_admin)
    if ipjoin_mng.get_count({"ip_address_id": args['id']}):
        raise HTTPError(403, 'IP address is in use and cannot be deleted')

    net_mng = NetworkManager(console_id, cloud_id, True)
    net = get_db_object_or_http_error(net_mng,
                                      ip._network_id,
                                      'Network not found')

    if net.vlan == PARKING_VLAN:
        raise HTTPError(400,
                        "Reserved IP addresses must be released first")

    if net.vlan < VLAN_STARTING_VALUE and not is_admin:
        raise HTTPError(403, "Public IP addresses can't be delete")

    if ip_mng.delete(ip):
        return {"code": 204, "response": ""}

    raise HTTPError(400, 'Operation failed')


def attach(console_id=None, api_user_id=None, cloud_id=None, args=None,
           is_admin=False):
    iface_mng = OnappNetworkInterfaceManager(console_id, cloud_id, is_admin)
    iface = get_db_object_or_http_error(iface_mng,
                                        args['network_interface'],
                                        'Network interface not found')

    if not ResourceManager(console_id,
                           cloud_id,
                           as_admin=True).can_create_ip(iface.network_id):
        raise HTTPError(409,
                        "Can't create any more IP addresses on that network")

    ip_mng = IpAddressManager(console_id, cloud_id, is_admin)
    ip = ip_mng.attach(args['id'], args['network_interface_id'])

    if ip:
        return {"code": 200, "response": ip}

    raise HTTPError(400, 'Operation failed')


def add_to_network(console_id=None, api_user_id=None, cloud_id=None, args=None,
                   is_admin=False):
    net_mng = NetworkManager(console_id, cloud_id, is_admin)
    net = get_db_object_or_http_error(net_mng,
                                      args['network_id'],
                                      'Network not found')

    if net.public and not is_admin:
        raise HTTPError(404, 'Network not found')

    if net.public:
        # check required parameters
        required_parameters = {'prefix': 'netmask',
                               'broadcast_number': 'broadcast',
                               'network_number': 'network_address',
                               'gateway_number': 'gateway'}

        missing_parameters = set(required_parameters.keys()) - set(args.keys())
        if missing_parameters:
            raise HTTPError(400,
                            "Missing parameters, required parameters are: {0}"
                            .format(', '.join([
                                str(required_parameters[x])
                                for x in missing_parameters])))
        args['disallowed_primary'] = args.pop('disallowed_primary', False)

    else:  # if not net.public:
        # if private, it'll fill the gaps
        for vlan in VLAN_DATA:
            if (args['ip_number'] > vlan['network_number'] and
                    args['ip_number'] < vlan['broadcast_number']):
                for key in vlan:
                    args[key] = args.get(key, vlan[key])
                break
        else:
            raise HTTPError(412,
                            'IP range is not valid. Valid ranges are: '
                            '192.168.0.0/16, 10.0.0.0/8 and 172.16.0.0/12')

    # fill some more necessary fields
    args['ipv4'] = 1
    args['created_at'] = datetime.datetime.utcnow()
    args['updated_at'] = datetime.datetime.utcnow()

    # check if ip address already exists
    ip = query_server_group_get_object(
        IpAddressManager,
        {'as_admin': True},
        query_params={
            "filters": {"ip_number": args["ip_number"], "vlan": net.vlan}
        }
    )
    if ip:
        raise HTTPError(412, 'IP address already exists')

    # check resources only if creating a private IP
    if not net.public:
        if net.public and not ResourceManager(console_id=console_id,
                                              cloud_id=cloud_id,
                                              as_admin=is_admin).can_create_ip(
                                                  args['network_id']):
            raise HTTPError(412, "IP addresses limit exceeded")

    args['_network_id'] = args.pop('network_id')

    ipmng = IpAddressManager(console_id, cloud_id, is_admin)
    ip_address_id = ipmng.create_object(args)

    if ip_address_id:
        return {'code': 201, 'response': ipmng.get_object(ip_address_id)}

    raise HTTPError(500, 'Operation failed')
